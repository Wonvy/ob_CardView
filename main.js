/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// main.ts
__export(exports, {
  default: () => CardViewPlugin
});
var import_obsidian2 = __toModule(require("obsidian"));

// cardView.ts
var import_obsidian = __toModule(require("obsidian"));
var VIEW_TYPE_CARD = "card-view";
var CardView = class extends import_obsidian.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
    this.currentView = plugin.settings.defaultView;
  }
  getViewType() {
    return VIEW_TYPE_CARD;
  }
  getDisplayText() {
    return "\u5361\u7247\u89C6\u56FE";
  }
  async onOpen() {
    const { containerEl } = this;
    this.tagContainer = containerEl.createDiv("tag-filter");
    await this.loadTags();
    const viewSwitcher = containerEl.createDiv("view-switcher");
    this.createViewSwitcher(viewSwitcher);
    this.container = containerEl.createDiv("card-container");
    this.previewContainer = containerEl.createDiv("preview-container");
    await this.loadNotes();
  }
  async loadTags() {
    const tags = this.getAllTags();
    tags.forEach((tag) => {
      const tagEl = this.tagContainer.createEl("button", { text: tag });
      tagEl.addEventListener("click", () => this.filterByTag(tag));
    });
  }
  getAllTags() {
    const tags = new Set();
    this.app.vault.getMarkdownFiles().forEach((file) => {
      const cache = this.app.metadataCache.getFileCache(file);
      if (cache == null ? void 0 : cache.tags) {
        cache.tags.forEach((tag) => tags.add(tag.tag));
      }
    });
    return Array.from(tags);
  }
  createViewSwitcher(container) {
    const views = ["card", "list", "timeline"];
    views.forEach((view) => {
      const btn = container.createEl("button", { text: view });
      btn.addEventListener("click", () => this.switchView(view));
    });
  }
  async loadNotes() {
    const files = this.app.vault.getMarkdownFiles();
    this.container.empty();
    files.forEach((file) => {
      const card = this.createNoteCard(file);
      this.container.appendChild(card);
    });
  }
  createNoteCard(file) {
    const card = document.createElement("div");
    card.addClass("note-card");
    const title = card.createDiv("note-title");
    title.setText(file.basename);
    const lastModified = card.createDiv("note-date");
    lastModified.setText(new Date(file.stat.mtime).toLocaleDateString());
    const cache = this.app.metadataCache.getFileCache(file);
    if (cache == null ? void 0 : cache.tags) {
      const tagContainer = card.createDiv("note-tags");
      cache.tags.forEach((tag) => {
        const tagEl = tagContainer.createEl("span", {
          text: tag.tag,
          cls: "note-tag"
        });
      });
    }
    card.addEventListener("mouseenter", async () => {
      try {
        this.previewContainer.empty();
        const content = await this.app.vault.read(file);
        await import_obsidian.MarkdownRenderer.renderMarkdown(content, this.previewContainer, file.path, this);
      } catch (error) {
        console.error("\u9884\u89C8\u52A0\u8F7D\u5931\u8D25:", error);
        this.previewContainer.setText("\u9884\u89C8\u52A0\u8F7D\u5931\u8D25");
      }
    });
    return card;
  }
  switchView(view) {
    this.currentView = view;
    this.container.setAttribute("data-view", view);
    this.loadNotes();
  }
  filterByTag(tag) {
    const files = this.app.vault.getMarkdownFiles();
    this.container.empty();
    files.forEach((file) => {
      const cache = this.app.metadataCache.getFileCache(file);
      if ((cache == null ? void 0 : cache.tags) && cache.tags.some((t) => t.tag === tag)) {
        const card = this.createNoteCard(file);
        this.container.appendChild(card);
      }
    });
    this.tagContainer.querySelectorAll("button").forEach((btn) => {
      if (btn.textContent === tag) {
        btn.addClass("active-tag");
      } else {
        btn.removeClass("active-tag");
      }
    });
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  defaultView: "card"
};
var CardViewSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian2.Setting(containerEl).setName("\u9ED8\u8BA4\u89C6\u56FE").setDesc("\u9009\u62E9\u9ED8\u8BA4\u7684\u89C6\u56FE\u6A21\u5F0F").addDropdown((dropdown) => dropdown.addOption("card", "\u5361\u7247\u89C6\u56FE1").addOption("list", "\u5217\u8868\u89C6\u56FE").addOption("timeline", "\u65F6\u95F4\u8F74\u89C6\u56FE").setValue(this.plugin.settings.defaultView).onChange(async (value) => {
      this.plugin.settings.defaultView = value;
      await this.plugin.saveSettings();
    }));
  }
};
var CardViewPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView(VIEW_TYPE_CARD, (leaf) => new CardView(leaf, this));
    this.addRibbonIcon("layout-grid", "\u5361\u7247\u89C6\u56FE", () => {
      this.activateView();
    });
    this.addSettingTab(new CardViewSettingTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf = workspace.getLeavesOfType(VIEW_TYPE_CARD)[0];
    if (!leaf) {
      leaf = workspace.getLeaf("tab");
      await leaf.setViewState({
        type: VIEW_TYPE_CARD,
        active: true
      });
    }
    workspace.revealLeaf(leaf);
  }
};
//# sourceMappingURL=data:application/json;base64,
