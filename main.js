/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CardViewPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// cardView.ts
var import_obsidian2 = require("obsidian");

// ts/other.ts
var import_obsidian = require("obsidian");
async function openInAppropriateLeaf(app, file, openFile = true) {
  var _a;
  const fileExplorer = app.workspace.getLeavesOfType("file-explorer")[0];
  if (fileExplorer) {
    try {
      if (openFile) {
        const leaves = app.workspace.getLeavesOfType("markdown");
        const currentRoot = (_a = app.leaf) == null ? void 0 : _a.getRoot();
        const otherLeaf = leaves.find((leaf) => {
          const root = leaf.getRoot();
          return root !== currentRoot;
        });
        let targetLeaf;
        if (otherLeaf) {
          await otherLeaf.openFile(file);
          targetLeaf = otherLeaf;
        } else {
          targetLeaf = app.workspace.getLeaf("tab");
          await targetLeaf.openFile(file);
        }
        app.workspace.setActiveLeaf(targetLeaf);
      }
      const fileExplorer2 = app.workspace.getLeavesOfType("file-explorer")[0];
      if (fileExplorer2 && fileExplorer2.view) {
        await fileExplorer2.view.revealInFolder(file);
      }
    } catch (error) {
      console.error("\u64CD\u4F5C\u5931\u8D25:", error);
      new import_obsidian.Notice("\u64CD\u4F5C\u5931\u8D25");
    }
  }
}
function getWeekDates(year, week) {
  console.log("\u83B7\u53D6\u5468\u65E5\u671F\u8303\u56F4 - \u5E74\u4EFD:", year, "\u5468\u6570:", week);
  const firstDayOfYear = new Date(year, 0, 1);
  console.log("\u5E74\u521D\u7B2C\u4E00\u5929:", firstDayOfYear.toISOString());
  const daysToFirstMonday = (8 - firstDayOfYear.getDay()) % 7;
  const firstMonday = new Date(year, 0, 1 + daysToFirstMonday);
  console.log("\u7B2C\u4E00\u4E2A\u5468\u4E00:", firstMonday.toISOString());
  const weekStart = new Date(firstMonday);
  weekStart.setDate(weekStart.getDate() + (week - 1) * 7);
  console.log("\u76EE\u6807\u5468\u7684\u5468\u4E00:", weekStart.toISOString());
  const dates = [];
  for (let i = 0; i < 7; i++) {
    const date = new Date(weekStart);
    date.setDate(date.getDate() + i);
    dates.push(date);
  }
  console.log("\u751F\u6210\u7684\u65E5\u671F\u8303\u56F4:", dates.map((d) => d.toISOString()));
  return dates;
}
function getEndOfWeek() {
  const date = /* @__PURE__ */ new Date();
  const day = date.getDay();
  const diff = date.getDate() - day + (day === 0 ? 0 : 7);
  return new Date(date.setDate(diff));
}
function getStartOfWeek() {
  const date = /* @__PURE__ */ new Date();
  const day = date.getDay();
  const diff = date.getDate() - day + (day === 0 ? -6 : 1);
  return new Date(date.setDate(diff));
}

// ts/models.ts
async function renderStats(app, container) {
  console.log("Rendering stats module...");
  const statsContainer = container.createDiv("stats-container");
  const createStatCard = (container2, label, value) => {
    const card = container2.createDiv("stat-card");
    card.createDiv("stat-label").setText(label);
    card.createDiv("stat-value").setText(value.toString());
  };
  const files = app.vault.getMarkdownFiles();
  const totalNotes = files.length;
  let totalWords = 0;
  for (const file of files) {
    const content = await app.vault.read(file);
    totalWords += content.split(/\s+/).length;
  }
  const allTags = /* @__PURE__ */ new Set();
  files.forEach((file) => {
    const cache = app.metadataCache.getFileCache(file);
    if (cache == null ? void 0 : cache.tags) {
      cache.tags.forEach((tag) => allTags.add(tag.tag));
    }
  });
  createStatCard(statsContainer, "\u603B\u7B14\u8BB0\u6570", totalNotes);
  createStatCard(statsContainer, "\u603B\u5B57\u6570", totalWords);
  createStatCard(statsContainer, "\u4F7F\u7528\u6807\u7B7E\u6570", allTags.size);
}

// cardView.ts
var VIEW_TYPE_CARD = "card-view";
var ConfirmModal = class extends import_obsidian2.Modal {
  constructor(app, title, message) {
    super(app);
    this.result = false;
    this.resolvePromise = () => {
    };
    this.title = title;
    this.message = message;
  }
  async show() {
    return new Promise((resolve) => {
      this.resolvePromise = resolve;
      this.open();
    });
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h3", { text: this.title });
    contentEl.createEl("p", { text: this.message });
    const buttonContainer = contentEl.createDiv("button-container");
    const confirmButton = buttonContainer.createEl("button", { text: "\u786E\u8BA4" });
    confirmButton.addEventListener("click", () => {
      this.result = true;
      this.close();
    });
    const cancelButton = buttonContainer.createEl("button", { text: "\u53D6\u6D88" });
    cancelButton.addEventListener("click", () => {
      this.result = false;
      this.close();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    this.resolvePromise(this.result);
  }
};
var EnhancedFileSelectionModal = class extends import_obsidian2.Modal {
  constructor(app, files, recentFolders, onFoldersUpdate) {
    super(app);
    this.selectedFolder = null;
    this.files = files;
    this.recentFolders = recentFolders;
    this.onFoldersUpdate = onFoldersUpdate;
  }
  // 打开模态框
  async onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h3", {
      text: `\u52A8 ${this.files.length} \u4E2A\u6587\u4EF6`
    });
    if (this.recentFolders.length > 0) {
      const recentSection = contentEl.createDiv("recent-folders-section");
      recentSection.createEl("h4", { text: "\u6700\u4F7F\u7528" });
      const recentList = recentSection.createDiv("recent-folders-list");
      this.recentFolders.forEach((folder) => {
        const item = recentList.createDiv("folder-item recent");
        item.setText(folder);
        item.addEventListener("click", () => this.selectFolder(item, folder));
      });
    }
    const folderList = contentEl.createDiv("folder-list");
    const folders = this.getFoldersWithHierarchy();
    this.createFolderTree(folderList, folders);
    const buttonContainer = contentEl.createDiv("modal-button-container");
    const confirmButton = buttonContainer.createEl("button", {
      text: "\u786E\u8BA4\u79FB\u52A8",
      cls: "mod-cta"
    });
    confirmButton.addEventListener("click", () => {
      if (this.selectedFolder) {
        this.moveFiles(this.selectedFolder);
      }
    });
    const cancelButton = buttonContainer.createEl("button", {
      text: "\u53D6"
    });
    cancelButton.addEventListener("click", () => this.close());
  }
  // 取文件夹层次结构
  getFoldersWithHierarchy() {
    const folders = [];
    const seen = /* @__PURE__ */ new Set();
    this.app.vault.getAllLoadedFiles().forEach((file) => {
      if (file instanceof import_obsidian2.TFolder) {
        const parts = file.path.split("/");
        let currentPath = "";
        let level = 0;
        parts.forEach((part) => {
          if (part) {
            currentPath += (currentPath ? "/" : "") + part;
            if (!seen.has(currentPath)) {
              seen.add(currentPath);
              folders.push({
                path: currentPath,
                name: part,
                level
              });
            }
            level++;
          }
        });
      }
    });
    return folders.sort((a, b) => a.path.localeCompare(b.path));
  }
  // 创建文件夹树
  createFolderTree(container, folders) {
    folders.forEach((folder) => {
      const item = container.createDiv({
        cls: "folder-item"
      });
      item.style.paddingLeft = `${folder.level * 20 + 10}px`;
      const icon = item.createSpan({
        cls: "folder-icon"
      });
      icon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path></svg>`;
      const nameSpan = item.createSpan({
        cls: "folder-name"
      });
      nameSpan.textContent = folder.name;
      item.addEventListener("click", () => this.selectFolder(item, folder.path));
    });
  }
  // 选择文件夹
  selectFolder(element, path) {
    this.contentEl.querySelectorAll(".folder-item").forEach((item) => {
      item.removeClass("selected");
    });
    element.addClass("selected");
    this.selectedFolder = path;
  }
  // 移动文件
  async moveFiles(targetFolder) {
    const confirmModal = new ConfirmModal(
      this.app,
      "\u786E\u8BA4 \u79FB\u52A8",
      `\u662F\u5426\u5C06\u9009\u4E2D\u7684 ${this.files.length} \u4E2A\u6587\u4EF6\u79FB\u52A8\u5230 "${targetFolder}"\uFF1F`
    );
    if (await confirmModal.show()) {
      for (const file of this.files) {
        const newPath = `${targetFolder}/${file.name}`;
        await this.app.fileManager.renameFile(file, newPath);
      }
      this.recentFolders = [targetFolder, ...this.recentFolders.filter((f) => f !== targetFolder)].slice(0, 5);
      this.onFoldersUpdate(this.recentFolders);
      this.close();
    }
  }
};
var CardView = class extends import_obsidian2.ItemView {
  // 构造函数
  constructor(leaf, plugin) {
    super(leaf);
    this.cardSettings = {
      card: {
        showDate: true,
        showContent: true,
        cardGap: 16,
        cardsPerRow: 4,
        cardHeight: 280
        // 默认高度
      },
      list: {
        showDate: true,
        showContent: true,
        cardGap: 16,
        cardsPerRow: 1,
        cardHeight: 280
      },
      timeline: {
        showDate: true,
        showContent: true,
        cardGap: 16,
        cardsPerRow: 2,
        cardHeight: 280
      },
      month: {
        showDate: true,
        showContent: true,
        cardGap: 8,
        cardsPerRow: 1,
        cardHeight: 280
      }
    };
    this.scrollTimeout = null;
    this.homeModules = [
      {
        id: "heatmap",
        name: "\u6D3B\u52A8\u70ED\u529B\u56FE",
        type: "heatmap",
        visible: true,
        order: 0,
        columns: 4
      },
      {
        id: "weekly",
        name: "\u672C\u5468\u7B14\u8BB0",
        type: "weekly",
        visible: true,
        order: 1,
        columns: 4
      },
      {
        id: "recent",
        name: "\u6700\u8FD1\u7F16\u8F91",
        type: "recent",
        visible: true,
        order: 2,
        columns: 4
      },
      {
        id: "stats",
        name: "\u7B14\u8BB0\u7EDF\u8BA1",
        type: "stats",
        visible: true,
        order: 3,
        columns: 4
      },
      {
        id: "calendar",
        name: "\u65E5\u5386",
        type: "calendar",
        visible: true,
        order: 4,
        columns: 4
      }
    ];
    this.plugin = plugin;
    this.currentView = "home";
    this.container = createDiv();
    this.tagContainer = createDiv();
    this.previewContainer = createDiv();
    this.previewResizer = createDiv();
    this.isPreviewCollapsed = false;
    this.searchInput = createEl("input");
    this.currentSearchTerm = "";
    this.selectedTags = /* @__PURE__ */ new Set();
    this.selectedNotes = /* @__PURE__ */ new Set();
    this.lastSelectedNote = null;
    this.recentFolders = [];
    this.cardSize = 280;
    this.cardHeight = 280;
    this.calendarContainer = createDiv();
    this.isCalendarVisible = false;
    this.currentDate = /* @__PURE__ */ new Date();
    this.currentFilter = { type: "none" };
    this.monthViewContainer = createDiv();
    this.isMonthViewVisible = false;
    this.loadedNotes = /* @__PURE__ */ new Set();
    this.currentPage = 1;
    this.pageSize = 20;
    this.isLoading = false;
    this.hasMoreNotes = true;
    this.loadingIndicator = createDiv("loading-indicator");
    this.timelineCurrentPage = 1;
    this.timelinePageSize = 10;
    this.timelineIsLoading = false;
    this.timelineHasMore = true;
    this.timelineLoadingIndicator = createDiv("timeline-loading-indicator");
    this.statusBar = createDiv("status-bar");
    this.statusLeft = createDiv("status-left");
    this.statusRight = createDiv("status-right");
    this.loadingStatus = createDiv("status-item");
    this.currentLoadingView = null;
    this.weekViewContainer = createDiv();
    this.currentWeek = this.getWeekNumber(/* @__PURE__ */ new Date());
    this.currentYear = (/* @__PURE__ */ new Date()).getFullYear();
    this.setupIntersectionObserver();
    const today = /* @__PURE__ */ new Date();
    this.currentYear = today.getFullYear();
    this.currentWeek = this.getWeekNumber(today);
    console.log("\u521D\u59CB\u5316\u5468\u89C6 - \u5E74\u4EFD:", this.currentYear, "\u5468\u6570:", this.currentWeek);
    this.homeModules = plugin.settings.homeModules.length > 0 ? plugin.settings.homeModules : DEFAULT_HOME_MODULES;
  }
  /**
   * 获取视图类型
   * @returns 视图类型标识符
   */
  getViewType() {
    return VIEW_TYPE_CARD;
  }
  /**
   * 获取视图显示文本
   * @returns 示在标签页上的文本
   */
  getDisplayText() {
    return "\u5361\u7247\u89C6\u56FE";
  }
  /**
   * 视图打开时的初始化函数
   * 创建标签过滤器、视图切换按钮和容器
   */
  async onOpen() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.addClass("card-view-container");
    const mainLayout = containerEl.createDiv("main-layout");
    const contentSection = mainLayout.createDiv("content-section");
    const toolbar = contentSection.createDiv("card-view-toolbar");
    const leftTools = toolbar.createDiv("toolbar-left");
    const newNoteBtn = leftTools.createEl("button", {
      cls: "new-note-button"
    });
    newNoteBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-plus"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>
            <span>\u65B0\u5EFA\u7B14\u8BB0</span>
        `;
    newNoteBtn.addEventListener("click", () => this.createNewNote());
    const viewSwitcher = leftTools.createDiv("view-switcher");
    this.createViewSwitcher(viewSwitcher);
    const searchContainer = toolbar.createDiv("search-container");
    this.createCommandButton(searchContainer);
    this.searchInput = searchContainer.createEl("input", {
      type: "text",
      placeholder: "\u641C\u7D22\u8BB0...",
      cls: "search-input"
    });
    const quickNoteBar = mainLayout.createDiv("quick-note-bar");
    quickNoteBar.addClass("minimized");
    const workspaceLeafContent = this.containerEl.closest(".workspace-leaf-content");
    if (workspaceLeafContent) {
      requestAnimationFrame(() => {
        const leafRect = workspaceLeafContent.getBoundingClientRect();
        const right = 20;
        const bottom = 20;
        quickNoteBar.style.position = "absolute";
        quickNoteBar.style.right = `${right}px`;
        quickNoteBar.style.bottom = `${bottom}px`;
        quickNoteBar.style.left = "auto";
        quickNoteBar.style.top = "auto";
        quickNoteBar.style.transform = "none";
        quickNoteBar.style.width = "40px";
        quickNoteBar.style.height = "40px";
      });
    }
    const controls = quickNoteBar.createDiv("quick-note-controls");
    const minimizeBtn = controls.createEl("button", {
      cls: "control-button minimize-btn"
    });
    minimizeBtn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="5" y1="12" x2="19" y2="12"></line></svg>`;
    const minimizeIcon = quickNoteBar.createDiv("minimize-icon");
    minimizeIcon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path><path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path></svg>`;
    this.setupDraggable(quickNoteBar);
    minimizeBtn.addEventListener("click", () => {
      this.minimizeQuickNote(quickNoteBar);
    });
    minimizeIcon.addEventListener("click", () => {
      this.restoreQuickNote(quickNoteBar);
    });
    const inputContainer = quickNoteBar.createDiv("quick-note-input-container");
    const titleInput = inputContainer.createEl("input", {
      cls: "quick-note-title",
      attr: {
        placeholder: "\u8F93\u5165\u7B14\u8BB0\u6807\u9898...",
        type: "text"
      }
    });
    const noteInput = inputContainer.createEl("textarea", {
      cls: "quick-note-input",
      attr: {
        placeholder: "\u8F93\u5165\u7B14\u5185\u5BB9\uFF0C\u6309 Enter \u53D1\u9001..."
      }
    });
    const tagsContainer = inputContainer.createDiv("tags-container");
    const tags = /* @__PURE__ */ new Set();
    const tagInput = tagsContainer.createEl("input", {
      cls: "tag-input",
      attr: {
        placeholder: "\u6DFB\u52A0\u6807\u7B7E..."
      }
    });
    const quickNoteToolbar = inputContainer.createDiv("quick-note-toolbar");
    const codeBtn = quickNoteToolbar.createEl("button", {
      cls: "quick-note-btn",
      attr: { "data-type": "code" }
    });
    codeBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="16 18 22 12 16 6"></polyline><polyline points="8 6 2 12 8 18"></polyline></svg>
            \u4EE3\u7801
        `;
    const imageBtn = quickNoteToolbar.createEl("button", {
      cls: "quick-note-btn",
      attr: { "data-type": "image" }
    });
    imageBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><circle cx="8.5" cy="8.5" r="1.5"></circle><polyline points="21 15 16 10 5 21"></polyline></svg>
            \u56FE\u7247
        `;
    const ideaBtn = quickNoteToolbar.createEl("button", {
      cls: "quick-note-btn",
      attr: { "data-type": "idea" }
    });
    ideaBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>
            \u7075\u611F
        `;
    const tagSuggestions = inputContainer.createDiv("tag-suggestions");
    this.setupQuickNoteEvents(noteInput, quickNoteToolbar, tagSuggestions);
    this.setupSearch();
    this.tagContainer = contentSection.createDiv("filter-toolbar");
    await this.loadTags();
    const contentArea = contentSection.createDiv("card-view-content");
    this.container = contentArea.createDiv("card-container");
    this.cardSize = this.plugin.settings.cardWidth;
    this.container.addEventListener("wheel", (e) => {
      if (e.ctrlKey || e.shiftKey) {
        e.preventDefault();
        if (e.ctrlKey) {
          this.adjustCardSize(e.deltaY);
        } else if (e.shiftKey) {
          this.adjustCardHeight(e.deltaY);
        }
      }
    });
    const previewWrapper = mainLayout.createDiv("preview-wrapper");
    const previewControls = previewWrapper.createDiv("preview-controls");
    const toggleButton = previewControls.createEl("button", {
      cls: "preview-toggle",
      attr: { "aria-label": "\u6298\u53E0\u9884\u89C8" }
    });
    toggleButton.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-right"><polyline points="9 18 15 12 9 6"></polyline></svg>`;
    toggleButton.addEventListener("click", () => this.togglePreview());
    this.previewResizer = previewWrapper.createDiv("preview-resizer");
    this.previewContainer = previewWrapper.createDiv("preview-container");
    this.setupResizer();
    this.setupScrollSync();
    this.statusBar.empty();
    this.statusLeft.empty();
    this.statusRight.empty();
    this.loadingStatus.innerHTML = `
            <div class="loading-indicator">
                <div class="loading-spinner"></div>
                <span>\u51C6\u52A0\u8F7D...</span>
            </div>
        `;
    this.statusLeft.appendChild(this.loadingStatus);
    const totalNotesStatus = createDiv("status-item");
    totalNotesStatus.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><polyline points="10 9 9 9 8 9"></polyline></svg>
            <span>\u603B\u7B14\u8BB0\u6570: ${this.app.vault.getMarkdownFiles().length}</span>
        `;
    this.statusRight.appendChild(totalNotesStatus);
    this.statusBar.appendChild(this.statusLeft);
    this.statusBar.appendChild(this.statusRight);
    contentSection.appendChild(this.statusBar);
    this.currentLoadingView = "card";
    await this.loadNotes();
    const cardContainer = containerEl.querySelector(".card-container");
    if (cardContainer) {
      cardContainer.addEventListener("click", (e) => {
        if (e.target === cardContainer) {
          const cards = cardContainer.querySelectorAll(".note-card");
          cards.forEach((card) => {
            card.classList.remove("selected");
          });
        }
      });
    }
    const sendButton = inputContainer.createEl("button", {
      cls: "quick-note-send",
      attr: {
        "title": "\u53D1\u9001\u7B14\u8BB0"
      }
    });
    sendButton.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="22" y1="2" x2="11" y2="13"></line><polygon points="22 2 15 22 11 13 2 9 22 2"></polygon></svg>
        `;
    sendButton.addEventListener("click", async (e) => {
      var _a, _b;
      e.preventDefault();
      e.stopPropagation();
      const title = (_a = titleInput == null ? void 0 : titleInput.value) == null ? void 0 : _a.trim();
      const content = noteInput.value.trim();
      if (!content) {
        new import_obsidian2.Notice("\u8BF7\u8F93\u5165\u7B14\u8BB0\u5BB9");
        return;
      }
      try {
        const tagItems = (_b = tagsContainer == null ? void 0 : tagsContainer.querySelectorAll(".tag-item")) != null ? _b : [];
        const tagTexts = Array.from(tagItems).map((item) => {
          var _a2, _b2;
          return (_b2 = (_a2 = item.textContent) == null ? void 0 : _a2.replace("\xD7", "").trim()) != null ? _b2 : "";
        });
        const tagsContent = tagTexts.map((tag) => `#${tag}`).join(" ");
        const finalContent = tagsContent ? `${tagsContent}

${content}` : content;
        const fileName = title || (/* @__PURE__ */ new Date()).toLocaleDateString("zh-CN", {
          year: "numeric",
          month: "2-digit",
          day: "2-digit"
        }).replace(/\//g, "-");
        const file = await this.createQuickNote(finalContent, [], fileName);
        if (file) {
          this.clearQuickNoteInputs(titleInput != null ? titleInput : null, noteInput, tags, tagsContainer != null ? tagsContainer : null, tagInput != null ? tagInput : null);
          await this.refreshView();
          new import_obsidian2.Notice("\u521B\u5EFA\u6210\u529F");
        }
      } catch (error) {
        console.error("\u521B\u5EFA\u7B14\u8BB0\u5931\u8D25:", error);
        new import_obsidian2.Notice("\u521B\u5EFA\u7B14\u8BB0\u5931\u8D25");
      }
    });
    this.updateToolbarButtons();
    this.switchView("home");
  }
  // 获取标签和数量
  getTagsWithCount() {
    const tagCounts = /* @__PURE__ */ new Map();
    this.app.vault.getMarkdownFiles().forEach((file) => {
      const cache = this.app.metadataCache.getFileCache(file);
      if (cache == null ? void 0 : cache.tags) {
        cache.tags.forEach((tag) => {
          const count = tagCounts.get(tag.tag) || 0;
          tagCounts.set(tag.tag, count + 1);
        });
      }
    });
    return tagCounts;
  }
  // 加载标签
  async loadTags() {
    const tagCounts = this.getTagsWithCount();
    this.tagContainer.empty();
    const leftArea = this.tagContainer.createDiv("filter-toolbar-left");
    const buttonGroup = leftArea.createDiv("filter-toolbar-buttons");
    const homeButtons = buttonGroup.createDiv("home-view-buttons");
    homeButtons.setAttribute("data-views", "home");
    const manageBtn = homeButtons.createEl("button", {
      cls: "module-manage-btn",
      text: "\u7BA1\u7406\u5E03\u5C40"
    });
    manageBtn.addEventListener("click", () => {
      this.showModuleManager();
    });
    const editBtn = homeButtons.createEl("button", {
      cls: "module-edit-btn",
      text: "\u7F16\u8F91\u5E03\u5C40"
    });
    let isEditMode = false;
    editBtn.addEventListener("click", () => {
      isEditMode = !isEditMode;
      this.container.toggleClass("edit-mode", isEditMode);
      editBtn.setText(isEditMode ? "\u5B8C\u6210\u7F16\u8F91" : "\u7F16\u8F91\u5E03\u5C40");
      editBtn.toggleClass("active", isEditMode);
      this.toggleModuleEditing(isEditMode);
    });
    const cardButtons = buttonGroup.createDiv("card-view-buttons");
    cardButtons.setAttribute("data-views", "card,list,timeline,month,week");
    const calendarBtn = cardButtons.createEl("button", {
      cls: "calendar-toggle-button toolbar-button"
    });
    calendarBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect><line x1="16" y1="2" x2="16" y2="6"></line><line x1="8" y1="2" x2="8" y2="6"></line><line x1="3" y1="10" x2="21" y2="10"></line></svg>
            <span>\u65E5\u5386</span>
        `;
    const settingsBtn = cardButtons.createEl("button", {
      cls: "card-settings-button toolbar-button"
    });
    settingsBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="3"></circle><path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path></svg>
            <span>\u5361\u7247\u8BBE\u7F6E</span>
        `;
    this.calendarContainer = calendarBtn.createDiv("calendar-container");
    this.calendarContainer.style.display = "none";
    let hoverTimeout;
    calendarBtn.addEventListener("mouseenter", () => {
      clearTimeout(hoverTimeout);
      this.showCalendar();
    });
    calendarBtn.addEventListener("mouseleave", () => {
      hoverTimeout = setTimeout(() => {
        this.hideCalendar();
      }, 200);
    });
    const tagButtons = buttonGroup.createDiv("tag-view-buttons");
    tagButtons.setAttribute("data-views", "card,list,timeline,month,week");
    const dropdownContainer = tagButtons.createDiv("tag-dropdown-container");
    const dropdown = dropdownContainer.createEl("select", {
      cls: "tag-dropdown"
    });
    dropdown.createEl("option", {
      text: "\u6807\u7B7E",
      value: ""
    });
    const dropdownPanel = dropdownContainer.createDiv("dropdown-panel");
    dropdownPanel.style.display = "none";
    Array.from(tagCounts.entries()).sort(([a], [b]) => a.localeCompare(b)).forEach(([tag, count]) => {
      const option = dropdownPanel.createDiv("dropdown-option");
      option.createSpan({ text: tag });
      option.createSpan({
        text: count.toString(),
        cls: "tag-count"
      });
      option.addEventListener("click", () => {
        if (!this.selectedTags.has(tag)) {
          this.addSelectedTag(tag, selectedTagsContainer);
          this.selectedTags.add(tag);
          this.refreshView();
        }
        dropdown.value = "";
      });
    });
    const selectedTagsContainer = leftArea.createDiv("selected-tags-container");
    let isMouseOverDropdown = false;
    let isMouseOverPanel = false;
    let hideTimeout;
    dropdown.addEventListener("mouseenter", () => {
      isMouseOverDropdown = true;
      clearTimeout(hideTimeout);
      dropdownPanel.style.display = "grid";
    });
    dropdown.addEventListener("mouseleave", () => {
      isMouseOverDropdown = false;
      if (!isMouseOverPanel) {
        hideTimeout = setTimeout(() => {
          if (!isMouseOverDropdown && !isMouseOverPanel) {
            dropdownPanel.style.display = "none";
          }
        }, 200);
      }
    });
    dropdownPanel.addEventListener("mouseenter", () => {
      isMouseOverPanel = true;
      clearTimeout(hideTimeout);
    });
    dropdownPanel.addEventListener("mouseleave", () => {
      isMouseOverPanel = false;
      if (!isMouseOverDropdown) {
        hideTimeout = setTimeout(() => {
          if (!isMouseOverDropdown && !isMouseOverPanel) {
            dropdownPanel.style.display = "none";
          }
        }, 200);
      }
    });
    document.addEventListener("click", (e) => {
      if (!dropdownContainer.contains(e.target)) {
        dropdownPanel.style.display = "none";
      }
    });
    this.selectedTags.forEach((tag) => {
      this.addSelectedTag(tag, selectedTagsContainer);
    });
    const rightArea = this.tagContainer.createDiv("filter-toolbar-right");
    const cardSettings = rightArea.createDiv("card-settings-container");
    cardSettings.setAttribute("data-views", "card,list,timeline");
    this.createCardSettings(cardSettings);
    this.registerEvent(
      this.app.workspace.on("layout-change", () => {
        const elements = this.tagContainer.querySelectorAll("[data-views]");
        elements.forEach((el) => {
          var _a;
          if (el instanceof HTMLElement) {
            const allowedViews = ((_a = el.dataset.views) == null ? void 0 : _a.split(",")) || [];
            el.style.display = allowedViews.includes(this.currentView) ? "flex" : "none";
          }
        });
      })
    );
  }
  // 添加已选标签
  addSelectedTag(tag, container) {
    const tagEl = container.createDiv("selected-tag");
    tagEl.createSpan({
      text: tag,
      cls: "tag-text"
    });
    const removeBtn = tagEl.createSpan({
      text: "\xD7",
      cls: "remove-tag"
    });
    removeBtn.addEventListener("click", () => {
      this.selectedTags.delete(tag);
      tagEl.remove();
      this.refreshView();
    });
  }
  // 创建视图切换按钮
  createViewSwitcher(container) {
    const views = [
      {
        id: "home",
        icon: "home",
        text: "\u4E3B\u9875\u89C6\u56FE",
        svg: '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path><polyline points="9 22 9 12 15 12 15 22"></polyline></svg>'
      },
      {
        id: "card",
        icon: "grid",
        text: "\u5361\u7247\u89C6\u56FE",
        svg: '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="7" height="7"></rect><rect x="14" y="3" width="7" height="7"></rect><rect x="14" y="14" width="7" height="7"></rect><rect x="3" y="14" width="7" height="7"></rect></svg>'
      },
      {
        id: "list",
        icon: "list",
        text: "\u5217\u8868\u89C6\u56FE",
        svg: '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="8" y1="6" x2="21" y2="6"></line><line x1="8" y1="12" x2="21" y2="12"></line><line x1="8" y1="18" x2="21" y2="18"></line><line x1="3" y1="6" x2="3.01" y2="6"></line><line x1="3" y1="12" x2="3.01" y2="12"></line><line x1="3" y1="18" x2="3.01" y2="18"></line></svg>'
      },
      {
        id: "timeline",
        icon: "clock",
        text: "\u65F6\u95F4\u8F74\u89C6\u56FE",
        svg: '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><polyline points="12 6 12 12 16 14"></polyline></svg>'
      },
      {
        id: "month",
        icon: "calendar",
        text: "\u6708\u5386\u89C6\u56FE",
        svg: '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect><line x1="16" y1="2" x2="16" y2="6"></line><line x1="8" y1="2" x2="8" y2="6"></line><line x1="3" y1="10" x2="21" y2="10"></line></svg>'
      },
      {
        id: "week",
        icon: "calendar",
        text: "\u5468\u89C6\u56FE",
        svg: '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect><line x1="16" y1="2" x2="16" y2="6"></line><line x1="8" y1="2" x2="8" y2="6"></line><line x1="3" y1="10" x2="21" y2="10"></line></svg>'
      }
    ];
    views.forEach((view) => {
      const btn = container.createEl("button", {
        cls: `view-switch-btn ${view.id === this.currentView ? "active" : ""}`
      });
      const iconSpan = btn.createSpan({ cls: "view-switch-icon" });
      iconSpan.innerHTML = view.svg;
      btn.createSpan({ text: view.text, cls: "view-switch-text" });
      btn.addEventListener("click", () => {
        container.querySelectorAll(".view-switch-btn").forEach((b) => b.removeClass("active"));
        btn.addClass("active");
        this.switchView(view.id);
      });
    });
  }
  // 切换视图
  switchView(view) {
    if (this.currentLoadingView === view) {
      return;
    }
    if (this.currentLoadingView) {
      console.log(`\u4E2D\u65AD ${this.currentLoadingView} \u89C6\u56FE\u7684\u52A0\u8F7D`);
      this.isLoading = false;
      this.timelineIsLoading = false;
      this.hasMoreNotes = false;
      this.timelineHasMore = false;
    }
    this.currentView = view;
    this.currentLoadingView = view;
    this.container.empty();
    this.container.setAttribute("data-view", view);
    const contentSection = this.containerEl.querySelector(".content-section");
    if (contentSection) {
      contentSection.removeClass("view-home", "view-card", "view-list", "view-timeline", "view-month", "view-week");
      contentSection.addClass(`view-${view}`);
    }
    let statusMessage = "";
    try {
      switch (view) {
        case "home":
          statusMessage = "\u5207\u6362\u5230\u4E3B\u9875\u89C6\u56FE";
          this.createHomeView();
          break;
        case "card":
          statusMessage = "\u5207\u6362\u5230\u5361\u7247\u89C6\u56FE";
          this.loadNotes();
          break;
        case "list":
          statusMessage = "\u5207\u6362\u5230\u5217\u8868\u89C6\u56FE - \u6309\u6587\u5939\u5206\u7EC4";
          this.createListView();
          break;
        case "timeline":
          statusMessage = "\u5207\u6362\u65F6\u95F4\u8F74\u89C6\u56FE - \u6309\u65E5\u671F\u5206\u7EC4";
          this.createTimelineView();
          break;
        case "month":
          statusMessage = "\u5207\u6362\u5230\u6708\u5386\u89C6\u56FE";
          this.createMonthView();
          break;
        case "week":
          statusMessage = "\u5207\u6362\u5230\u5468\u89C6\u56FE";
          this.createWeekView();
          break;
      }
      this.updateLoadingStatus(statusMessage);
    } catch (error) {
      console.error(`\u5207\u6362\u5230${view}\u89C6\u56FE\u65F6\u51FA\u9519:`, error);
      this.currentLoadingView = null;
    }
    this.updateToolbarButtons();
  }
  // 添加新方法来更新按钮显示状态
  updateToolbarButtons() {
    console.log("Current view:", this.currentView);
    const elements = this.tagContainer.querySelectorAll("[data-views]");
    elements.forEach((el) => {
      var _a;
      if (el instanceof HTMLElement) {
        const allowedViews = ((_a = el.dataset.views) == null ? void 0 : _a.split(",")) || [];
        const shouldShow = allowedViews.includes(this.currentView);
        console.log("Element:", el, "Allowed views:", allowedViews, "Should show:", shouldShow);
        el.style.display = shouldShow ? "" : "none";
      }
    });
  }
  // 加载笔记
  async loadNotes() {
    try {
      console.log("\u5F00\u59CB\u52A0\u8F7D\u7B14\u8BB0...");
      this.currentPage = 1;
      this.hasMoreNotes = true;
      this.container.empty();
      if (!this.container.contains(this.loadingIndicator)) {
        this.container.appendChild(this.loadingIndicator);
      }
      this.loadingIndicator.innerHTML = `
                <div class="loading-spinner"></div>
                <div class="loading-text">\u52A0\u8F7D\u4E2D...</div>
            `;
      this.loadingIndicator.style.display = "flex";
      await this.loadNextPage();
      this.setupInfiniteScroll();
      console.log("\u7B14\u8BB0\u52A0\u5B8C\u6210");
    } catch (error) {
      console.error("loadNotes \u9519\u8BEF:", error);
      new import_obsidian2.Notice("\u52A0\u8F7D\u7B14\u8BB0\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\u63A7\u5236\u53F0\u83B7\u53D6\u8BE6\u7EC6\u4FE1\u606F");
    } finally {
      if (this.currentLoadingView === "card") {
        this.currentLoadingView = null;
      }
    }
  }
  // 加载下一页
  async loadNextPage() {
    if (this.currentView !== "card") {
      console.log("\u4E2D\u65AD\u5361\u7247\u52A0\u8F7D\uFF1A\u89C6\u56FE\u5DF2\u5207\u6362");
      return;
    }
    if (this.isLoading || !this.hasMoreNotes) {
      return;
    }
    try {
      this.isLoading = true;
      this.updateLoadingStatus("\u52A0\u8F7D\u4E2D...");
      const files = this.app.vault.getMarkdownFiles();
      const filteredFiles = await this.filterFiles(files);
      const start = (this.currentPage - 1) * this.pageSize;
      const end = start + this.pageSize;
      const pageFiles = filteredFiles.slice(start, end);
      this.hasMoreNotes = end < filteredFiles.length;
      this.updateLoadingStatus(`\u6B63\u5728\u52A0\u8F7D\u7B2C ${this.currentPage} \u9875 (${start + 1}-${end} / ${filteredFiles.length})`);
      const cards = await Promise.all(
        pageFiles.map(async (file) => {
          try {
            return await this.createNoteCard(file);
          } catch (error) {
            console.error("\u521B\u5EFA\u5361\u7247\u5931:", file.path, error);
            return null;
          }
        })
      );
      cards.forEach((card) => {
        if (card instanceof HTMLElement) {
          if (this.loadingIndicator.parentNode === this.container) {
            this.container.insertBefore(card, this.loadingIndicator);
          } else {
            this.container.appendChild(card);
          }
        }
      });
      if (this.hasMoreNotes) {
        this.container.appendChild(this.loadingIndicator);
        this.loadingIndicator.style.minHeight = "100px";
      }
      this.currentPage++;
    } catch (error) {
      console.error("loadNextPage \u9519\u8BEF:", error);
      this.updateLoadingStatus("\u52A0\u5931\u8D25");
      new import_obsidian2.Notice("\u52A0\u8F7D\u7B14\u8BB0\u5931\u8D25");
    } finally {
      this.isLoading = false;
      if (!this.hasMoreNotes) {
        this.updateLoadingStatus("\u52A0\u8F7D\u6210");
        this.loadingIndicator.style.display = "none";
      } else {
        this.loadingIndicator.style.display = "flex";
      }
    }
  }
  // 过滤文件
  async filterFiles(files) {
    var _a;
    const searchTerm = (_a = this.currentSearchTerm) == null ? void 0 : _a.trim().toLowerCase();
    const filteredFiles = await Promise.all(files.map(async (file) => {
      var _a2, _b, _c;
      const matchesSearch = !searchTerm || file.basename.toLowerCase().includes(searchTerm) || await this.fileContentContainsSearch(file);
      let matchesTags = true;
      if (this.selectedTags.size > 0) {
        const cache = this.app.metadataCache.getFileCache(file);
        matchesTags = (_b = (_a2 = cache == null ? void 0 : cache.tags) == null ? void 0 : _a2.some((t) => this.selectedTags.has(t.tag))) != null ? _b : false;
      }
      let matchesDate = true;
      if (this.currentFilter.type === "date") {
        const fileDate = new Date(file.stat.mtime);
        const fileDateStr = fileDate.toISOString().split("T")[0];
        if (((_c = this.currentFilter.value) == null ? void 0 : _c.length) === 7) {
          matchesDate = fileDateStr.startsWith(this.currentFilter.value);
        } else {
          matchesDate = fileDateStr === this.currentFilter.value;
        }
      }
      return matchesSearch && matchesTags && matchesDate ? file : null;
    }));
    return filteredFiles.filter((file) => file !== null);
  }
  // 设置无限滚动
  setupInfiniteScroll() {
    try {
      console.log("\u8BBE\u7F6E\u65E0\u9650\u6EDA\u52A8...");
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting && !this.isLoading && this.hasMoreNotes && this.currentView === "card") {
              this.loadNextPage();
            }
          });
        },
        {
          root: this.container,
          rootMargin: "200px",
          threshold: 0.1
        }
      );
      observer.observe(this.loadingIndicator);
      this.container.addEventListener("scroll", () => {
        const { scrollTop, scrollHeight, clientHeight } = this.container;
        const scrollPercentage = Math.round(scrollTop / (scrollHeight - clientHeight) * 100);
        if (!isNaN(scrollPercentage)) {
          const scrollStatus = this.statusRight.querySelector(".scroll-status") || createDiv("status-item scroll-status");
          scrollStatus.innerHTML = `
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="18 15 12 9 6 15"></polyline></svg>
                        <span>${scrollPercentage}%</span>
                    `;
          if (!this.statusRight.contains(scrollStatus)) {
            this.statusRight.appendChild(scrollStatus);
          }
        }
        if (this.scrollTimeout) {
          clearTimeout(this.scrollTimeout);
        }
        this.scrollTimeout = setTimeout(() => {
          const triggerThreshold = 300;
          if (scrollHeight - scrollTop - clientHeight < triggerThreshold && !this.isLoading && this.hasMoreNotes && this.currentView === "card") {
            this.loadNextPage();
          }
        }, 100);
      });
    } catch (error) {
      console.error("setupInfiniteScroll \u9519\u8BEF:", error);
    }
  }
  // 创建笔记卡片
  async createNoteCard(file) {
    try {
      const card = document.createElement("div");
      card.addClass("note-card");
      card.setAttribute("data-path", file.path);
      const header = card.createDiv("note-card-header");
      if (this.cardSettings[this.currentView].showDate) {
        const lastModified = header.createDiv("note-date show");
        lastModified.setText(new Date(file.stat.mtime).toLocaleDateString());
      }
      const folderPath = header.createDiv("note-folder");
      const folder = file.parent ? file.parent.path : "\u6839\u76EE\u5F55";
      const pathParts = folder === "\u76EE" ? ["\u6839\u76EE\u5F55"] : folder.split("/");
      pathParts.forEach((part, index) => {
        if (index > 0) {
          folderPath.createSpan({ text: " / ", cls: "folder-separator" });
        }
        const folderPart = folderPath.createSpan({
          text: part,
          cls: "folder-part clickable"
        });
        const currentPath = folder === "\u6839\u76EE\u5F55" ? "" : pathParts.slice(0, index + 1).join("/");
        const underline = folderPart.createSpan({ cls: "folder-underline" });
        folderPart.addEventListener("mouseenter", () => {
          underline.addClass("active");
        });
        folderPart.addEventListener("mouseleave", () => {
          underline.removeClass("active");
        });
        folderPart.addEventListener("click", async (e) => {
          e.stopPropagation();
          e.preventDefault();
          const fileExplorer = this.app.workspace.getLeavesOfType("file-explorer")[0];
          if (fileExplorer && fileExplorer.view) {
            this.app.workspace.revealLeaf(fileExplorer);
            const targetFolder = currentPath ? this.app.vault.getAbstractFileByPath(currentPath) : this.app.vault.getRoot();
            if (targetFolder && (targetFolder instanceof import_obsidian2.TFolder || !currentPath)) {
              await fileExplorer.view.revealInFolder(targetFolder);
            }
          }
        });
      });
      const openButton = header.createDiv("note-open-button");
      openButton.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path><polyline points="15 3 21 3 21 9"></polyline><line x1="10" y1="14" x2="21" y2="3"></line></svg>`;
      openButton.setAttribute("title", "\u5728\u65B0\u6807\u7B7E\u9875\u4E2D\uFFFD\uFFFD\uFFFD\u5F00");
      openButton.style.opacity = "0";
      const cardContent = card.createDiv("note-card-content");
      const title = cardContent.createDiv("note-title");
      let displayTitle = file.basename;
      const timePattern = /^\d{4}[-./]\d{2}[-./]\d{2}/;
      if (timePattern.test(displayTitle)) {
        displayTitle = displayTitle.replace(timePattern, "").trim();
      }
      if (this.currentSearchTerm) {
        title.innerHTML = this.highlightText(displayTitle, this.currentSearchTerm);
      } else {
        title.setText(displayTitle);
      }
      try {
        const noteContent = cardContent.createDiv("note-content");
        if (this.cardSettings[this.currentView].showContent) {
          noteContent.addClass("show");
        }
        noteContent.setAttribute("data-path", file.path);
        const loadingPlaceholder = noteContent.createDiv("content-placeholder");
        loadingPlaceholder.setText("Loading...");
        this.observeNoteContent(noteContent, file);
        card.addEventListener("mouseenter", async () => {
          openButton.style.opacity = "1";
          if (!this.cardSettings.card.showContent) {
            const noteContent2 = cardContent.querySelector(".note-content");
            if (noteContent2) {
              noteContent2.addClass("hover-show");
              if (!this.loadedNotes.has(file.path)) {
                await this.loadNoteContent(noteContent2, file);
              }
            }
          }
          try {
            this.previewContainer.empty();
            const content = await this.app.vault.read(file);
            await import_obsidian2.MarkdownRenderer.render(
              this.app,
              content,
              this.previewContainer,
              file.path,
              this
            );
          } catch (error) {
            console.error("\u9884\u89C8\u52A0\u8F7D\u5931\u8D25:", error);
          }
        });
        card.addEventListener("mouseleave", () => {
          openButton.style.opacity = "0";
          if (!this.cardSettings.card.showContent) {
            const noteContent2 = cardContent.querySelector(".note-content");
            if (noteContent2) {
              noteContent2.removeClass("hover-show");
            }
          }
        });
        openButton.addEventListener("click", async (e) => {
          e.stopPropagation();
          await openInAppropriateLeaf(this.app, file);
          card.addClass("selected");
          this.container.querySelectorAll(".note-card").forEach((cardElement) => {
            if (cardElement !== card) {
              cardElement.removeClass("selected");
            }
          });
        });
      } catch (error) {
        console.error("\u7B14\u8BB0\u52A0\u8F7D\u5931\u8D25:", error);
        throw error;
      }
      card.addEventListener("mouseenter", async () => {
        openButton.style.opacity = "1";
      });
      card.addEventListener("mouseleave", () => {
        openButton.style.opacity = "0";
      });
      if (this.cardSettings.card.showContent) {
        const noteContent = cardContent.createDiv("note-content");
      }
      card.addEventListener("contextmenu", (e) => {
        e.preventDefault();
        e.stopPropagation();
        this.showContextMenu(e, [file]);
      });
      card.addEventListener("click", (e) => {
        this.handleCardSelection(file.path, e);
      });
      return card;
    } catch (error) {
      console.error("\u7B14\u8BB0\u52A0\u8F7D\u5931\u8D25:", error);
      throw error;
    }
  }
  // 预览栏-切换
  togglePreview() {
    this.isPreviewCollapsed = !this.isPreviewCollapsed;
    const previewWrapper = this.containerEl.querySelector(".preview-wrapper");
    if (this.isPreviewCollapsed) {
      this.previewContainer.addClass("collapsed");
      previewWrapper == null ? void 0 : previewWrapper.addClass("collapsed");
      if (previewWrapper instanceof HTMLElement) {
        previewWrapper.style.width = "0px";
      }
      const contentSection = this.containerEl.querySelector(".content-section");
      if (contentSection instanceof HTMLElement) {
        contentSection.style.width = "100%";
      }
    } else {
      this.previewContainer.removeClass("collapsed");
      previewWrapper == null ? void 0 : previewWrapper.removeClass("collapsed");
      const width = "300px";
      if (previewWrapper instanceof HTMLElement) {
        previewWrapper.style.width = width;
      }
      this.previewContainer.style.width = width;
    }
    const toggleButton = this.containerEl.querySelector(".preview-toggle svg");
    if (toggleButton instanceof SVGElement) {
      toggleButton.style.transform = this.isPreviewCollapsed ? "" : "rotate(180deg)";
    }
  }
  // 预览栏-调整大小
  setupResizer() {
    let startX;
    let startWidth;
    const startResize = (e) => {
      e.preventDefault();
      startX = e.pageX;
      startWidth = this.previewContainer.offsetWidth;
      document.addEventListener("mousemove", resize);
      document.addEventListener("mouseup", stopResize);
      document.body.style.cursor = "col-resize";
      this.previewResizer.addClass("resizing");
    };
    const resize = (e) => {
      if (!startWidth) return;
      const width = startWidth - (e.pageX - startX);
      if (width >= 50 && width <= 800) {
        this.previewContainer.style.width = `${width}px`;
        const previewWrapper = this.containerEl.querySelector(".preview-wrapper");
        if (previewWrapper instanceof HTMLElement) {
          previewWrapper.style.width = `${width}px`;
        }
        this.adjustContentWidth();
        if (this.isPreviewCollapsed) {
          this.isPreviewCollapsed = false;
          this.previewContainer.removeClass("collapsed");
          const previewWrapper2 = this.containerEl.querySelector(".preview-wrapper");
          previewWrapper2 == null ? void 0 : previewWrapper2.removeClass("collapsed");
        }
      }
    };
    const stopResize = () => {
      document.removeEventListener("mousemove", resize);
      document.removeEventListener("mouseup", stopResize);
      document.body.style.cursor = "";
      this.previewResizer.removeClass("resizing");
    };
    this.previewResizer.addEventListener("mousedown", startResize);
  }
  // 调整内容宽度
  adjustContentWidth() {
    const mainLayout = this.containerEl.querySelector(".main-layout");
    const previewWidth = this.previewContainer.offsetWidth;
    const contentSection = this.containerEl.querySelector(".content-section");
    if (mainLayout instanceof HTMLElement && contentSection instanceof HTMLElement) {
      const totalWidth = mainLayout.offsetWidth;
      const newContentWidth = totalWidth - previewWidth - 4;
      contentSection.style.width = `${newContentWidth}px`;
      const availableWidth = newContentWidth - 32;
      const columns = Math.floor(availableWidth / this.cardSize);
      const gap = 16;
      const actualCardWidth = (availableWidth - (columns - 1) * gap) / columns;
      this.container.style.gridTemplateColumns = `repeat(${columns}, ${actualCardWidth}px)`;
    }
  }
  // 笔记-创建
  async createNewNote(date) {
    const baseFileName = date ? date.toLocaleDateString() : "\u672A\u547D";
    let fileName = baseFileName;
    let counter = 1;
    while (this.app.vault.getAbstractFileByPath(`${fileName}.md`)) {
      const file = this.app.vault.getAbstractFileByPath(`${fileName}.md`);
      if (file instanceof import_obsidian2.TFile && file.stat.size === 0) {
        await openInAppropriateLeaf(this.app, file, false);
        return;
      } else {
        fileName = date ? `${baseFileName} ${counter}` : `\u672A\u547D\u540D ${counter}`;
        counter++;
      }
    }
    try {
      const file = await this.app.vault.create(
        `${fileName}.md`,
        ""
      );
      await openInAppropriateLeaf(this.app, file, false);
      this.loadNotes();
    } catch (error) {
      console.error("\u521B\u5EFA\u7B14\u8BB0\u5931\u8D25:", error);
    }
  }
  // 速笔记-创建
  async createQuickNote(content, types, fileName) {
    try {
      let finalFileName = fileName;
      let counter = 1;
      while (this.app.vault.getAbstractFileByPath(`${finalFileName}.md`)) {
        finalFileName = `${fileName} ${counter}`;
        counter++;
      }
      const file = await this.app.vault.create(
        `${finalFileName}.md`,
        content
      );
      if (file) {
        return file;
      }
      return null;
    } catch (error) {
      console.error("\u521B\u5EFA\u7B14\u8BB0\u5931\u8D25:", error);
      new import_obsidian2.Notice("\u521B\u5EFA\u7B14\u8BB0\u5931\u8D25");
      return null;
    }
  }
  // 时间轴-加载
  async loadTimelinePage(container) {
    if (this.currentLoadingView !== "timeline") {
      console.log("\u4E2D\u65AD\u65F6\u95F4\u8F74\u89C6\u56FE\u52A0\u8F7D\uFF1A\u89C6\u56FE\u5DF2\u5207\u6362");
      return;
    }
    if (this.timelineIsLoading || !this.timelineHasMore) {
      return;
    }
    try {
      this.timelineIsLoading = true;
      this.updateLoadingStatus("\u52A0\u8F7D\u65F6\u95F4\u8F74...");
      const files = this.app.vault.getMarkdownFiles();
      const filteredFiles = await this.filterFiles(files);
      const notesByDate = /* @__PURE__ */ new Map();
      filteredFiles.forEach((file) => {
        var _a;
        const date = new Date(file.stat.mtime).toLocaleDateString();
        if (!notesByDate.has(date)) {
          notesByDate.set(date, []);
        }
        (_a = notesByDate.get(date)) == null ? void 0 : _a.push(file);
      });
      const sortedDates = Array.from(notesByDate.keys()).sort((a, b) => new Date(b).getTime() - new Date(a).getTime());
      const start = (this.timelineCurrentPage - 1) * this.timelinePageSize;
      const end = start + this.timelinePageSize;
      const pageDates = sortedDates.slice(start, end);
      this.timelineHasMore = end < sortedDates.length;
      this.updateLoadingStatus(`\u65F6\u95F4\u8F74\u89C6\u56FE - \u52A0\u8F7D\u7B2C ${this.timelineCurrentPage} \u9875 (${start + 1}-${end} / ${sortedDates.length} \u5929)`);
      const fragment = document.createDocumentFragment();
      const batchSize = 3;
      const batches = Math.ceil(pageDates.length / batchSize);
      for (let i = 0; i < batches; i++) {
        await new Promise((resolve) => {
          window.requestAnimationFrame(async () => {
            const batchDates = pageDates.slice(i * batchSize, (i + 1) * batchSize);
            for (const date of batchDates) {
              const dateGroup = document.createElement("div");
              dateGroup.className = "timeline-date-group";
              if (this.cardSettings.timeline.showDate) {
                dateGroup.innerHTML = `
                                    <div class="timeline-date-node">
                                        <div class="timeline-node-circle"></div>
                                        <div class="timeline-date-label">${date}</div>
                                    </div>
                                `;
              }
              const notesList = dateGroup.createDiv("timeline-notes-list");
              const notes = notesByDate.get(date) || [];
              const cardPromises = notes.map(async (file) => {
                const placeholder = document.createElement("div");
                placeholder.className = "note-card-placeholder";
                placeholder.style.width = "100%";
                placeholder.style.height = "200px";
                placeholder.style.backgroundColor = "var(--background-secondary)";
                placeholder.style.borderRadius = "8px";
                placeholder.style.marginBottom = "1rem";
                notesList.appendChild(placeholder);
                const card = await this.createNoteCard(file);
                if (card instanceof HTMLElement) {
                  card.style.width = "100%";
                  if (this.currentView === "timeline") {
                    notesList.replaceChild(card, placeholder);
                  }
                }
              });
              fragment.appendChild(dateGroup);
              Promise.all(cardPromises).catch((error) => {
                console.error("\u521B\u5EFA\u5361\u7247\u5931\u8D25:", error);
              });
            }
            resolve();
          });
        });
      }
      container.appendChild(fragment);
      this.timelineCurrentPage++;
    } catch (error) {
      console.error("\u52A0\u8F7D\u65F6\u95F4\u8F74\u9875\u9762\u5931\u8D25:", error);
      this.updateLoadingStatus("\u52A0\u8F7D\u5931\u8D25");
    } finally {
      this.timelineIsLoading = false;
      if (this.currentLoadingView === "timeline") {
        this.currentLoadingView = null;
      }
    }
  }
  // 时间轴-滚动听
  setupTimelineScroll(container) {
    try {
      console.log("\u8BBE\u7F6E\u65F6\u95F4\u8F74\u6EDA\u76D1\u542C...");
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting && !this.timelineIsLoading && this.timelineHasMore) {
              console.log("\u89E6\u53D1\u65F6\u95F4\u8F74\u52A0\u8F7D\u66F4\u591A");
              this.loadTimelinePage(container);
            }
          });
        },
        {
          root: container,
          rootMargin: "100px",
          threshold: 0.1
        }
      );
      observer.observe(this.timelineLoadingIndicator);
      console.log("\u5DF2\u6DFB\u52A0\u65F6\u95F4\u8F74 Intersection Observer");
      container.addEventListener("scroll", () => {
        const { scrollTop, scrollHeight, clientHeight } = container;
        if (scrollHeight - scrollTop - clientHeight < 100 && !this.timelineIsLoading && this.timelineHasMore) {
          console.log("\u6EDA\u52A8\u89E6\u53D1\u65F6\u8F74\u52A0\u8F7D\u66F4\u591A");
          this.loadTimelinePage(container);
        }
      });
      console.log("\u5DF2\u6DFB\u52A0\u65F6\u8F74\u6EDA\u52A8\u4E8B\u4EF6\u76D1\u542C");
    } catch (error) {
      console.error("\u8BBE\u7F6E\u65F6\u95F4\u8F74\u6EDA\u52A8\u76D1\u542C\u5931\u8D25:", error);
    }
  }
  // 刷新视图
  async refreshView() {
    this.currentPage = 1;
    this.hasMoreNotes = true;
    this.loadedNotes.clear();
    if (this.intersectionObserver) {
      this.intersectionObserver.disconnect();
    }
    this.container.empty();
    this.loadingIndicator.innerHTML = `
            <div class="loading-spinner"></div>
            <div class="loading-text">\u52A0\u8F7D\u4E2D...</div>
        `;
    this.loadingIndicator.style.display = "none";
    await this.loadNextPage();
    this.setupInfiniteScroll();
    this.updateLoadingStatus("\u5237\u89C6\u56FE...");
  }
  // 卡片-选择
  handleCardSelection(path, event) {
    const card = this.container.querySelector(`[data-path="${path}"]`);
    if (!card) {
      this.clearSelection();
      return;
    }
    if (event.ctrlKey) {
      if (this.selectedNotes.has(path)) {
        this.selectedNotes.delete(path);
        card.removeClass("selected");
      } else {
        this.selectedNotes.add(path);
        card.addClass("selected");
      }
    } else if (event.shiftKey && this.lastSelectedNote) {
      const cards = Array.from(this.container.querySelectorAll(".note-card"));
      const lastIndex = cards.findIndex((c) => c.getAttribute("data-path") === this.lastSelectedNote);
      const currentIndex = cards.findIndex((c) => c.getAttribute("data-path") === path);
      const start = Math.min(lastIndex, currentIndex);
      const end = Math.max(lastIndex, currentIndex);
      cards.forEach((c, i) => {
        const cardPath = c.getAttribute("data-path");
        if (i >= start && i <= end && cardPath) {
          this.selectedNotes.add(cardPath);
          c.addClass("selected");
        }
      });
    } else {
      this.clearSelection();
      this.selectedNotes.add(path);
      card.addClass("selected");
    }
    this.lastSelectedNote = path;
  }
  // 清除择
  clearSelection() {
    this.selectedNotes.clear();
    this.container.querySelectorAll(".note-card.selected").forEach((card) => {
      card.removeClass("selected");
    });
  }
  // 获取选中的文件
  getSelectedFiles() {
    return Array.from(this.selectedNotes).map((path) => this.app.vault.getAbstractFileByPath(path)).filter((file) => file instanceof import_obsidian2.TFile);
  }
  // 右键菜单
  showContextMenu(event, files) {
    console.log("\u663E\u793A\u53F3\u952E\u83DC\u5355:", event, files);
    const menu = new import_obsidian2.Menu();
    if (files.length > 0) {
      menu.addItem((item) => {
        item.setTitle(`\u5728\u65B0\u6807\u7B7E\u9875\u6253\u5F00`).setIcon("link").onClick(async () => {
          for (const file of files) {
            await openInAppropriateLeaf(this.app, file);
          }
        });
      });
      menu.addItem((item) => {
        item.setTitle(`\u6587\u4EF6\u5217\u8868\u4E2D\u663E\u793A`).setIcon("folder").onClick(async () => {
          const file = files[0];
          await openInAppropriateLeaf(this.app, file, false);
        });
      });
      menu.addItem((item) => {
        item.setTitle(`\u79FB\u52A8 ${files.length} \u4E2A\u6587`).setIcon("move").onClick(() => {
          const modal = new EnhancedFileSelectionModal(
            this.app,
            files,
            this.recentFolders,
            (folders) => {
              this.recentFolders = folders;
            }
          );
          modal.open();
        });
      });
      menu.addItem((item) => {
        item.setTitle(`\u5220\u9664 ${files.length} \u4E2A\u6587\u4EF6`).setIcon("trash").onClick(async () => {
          const confirm = await new ConfirmModal(
            this.app,
            "\u786E\u8BA4\u5220\u9664",
            `\u662F\u5426\u786E\u5B9A\u8981\u5220\u9664\u9009\u4E2D\u7684 ${files.length} \u4E2A\u4EF6\uFF1F`
          ).show();
          if (confirm) {
            try {
              for (const file of files) {
                await this.app.vault.trash(file, true);
              }
              files.forEach((file) => {
                const card = this.container.querySelector(`[data-path="${file.path}"]`);
                if (card instanceof HTMLElement) {
                  card.addClass("removing");
                  setTimeout(() => {
                    card.remove();
                    this.selectedNotes.delete(file.path);
                  }, 300);
                }
              });
              console.error(`\u5DF2\u5220\u9664 ${files.length} \u4E2A\u6587\u4EF6`);
            } catch (error) {
              console.error("\u5220\u9664\u6587\u4EF6\u5931\u8D25:", error);
            }
          }
        });
      });
    }
    menu.showAtMouseEvent(event);
  }
  // 卡片-调整大
  adjustCardSize(delta) {
    const adjustment = delta > 0 ? -10 : 10;
    const newSize = Math.max(
      this.plugin.settings.minCardWidth,
      this.cardSize + adjustment
    );
    if (newSize !== this.cardSize) {
      this.cardSize = newSize;
      this.updateCardSize(newSize);
      this.plugin.saveCardWidth(newSize);
    }
  }
  // 卡-调整高度
  adjustCardHeight(delta) {
    var _a, _b;
    const adjustment = delta > 0 ? -10 : 10;
    const newHeight = Math.max(
      (_a = this.plugin.settings.minCardHeight) != null ? _a : 0,
      Math.min((_b = this.plugin.settings.maxCardHeight) != null ? _b : Infinity, this.cardHeight + adjustment)
    );
    if (newHeight !== this.cardHeight) {
      this.cardHeight = newHeight;
      this.updateCardHeight(newHeight);
      this.plugin.saveCardHeight(newHeight);
    }
  }
  // 卡片-更新大小
  updateCardSize(width) {
    this.cardSize = width;
    this.container.querySelectorAll(".note-card").forEach((card) => {
      if (card instanceof HTMLElement) {
        card.style.width = `${width}px`;
      }
    });
  }
  // 片-新高度
  updateCardHeight(height) {
    this.cardHeight = height;
    this.container.querySelectorAll(".note-card").forEach((card) => {
      if (card instanceof HTMLElement) {
        card.style.height = `${height}px`;
      }
    });
  }
  // 日历-显示
  showCalendar() {
    if (!this.calendarContainer) return;
    this.calendarContainer.empty();
    this.calendarContainer.style.display = "block";
    const header = this.calendarContainer.createDiv("calendar-header");
    const prevBtn = header.createEl("button", { cls: "calendar-nav-btn" });
    prevBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="15 18 9 12 15 6"></polyline></svg>';
    const titleEl = header.createDiv("calendar-title scrollable");
    titleEl.setText(`${this.currentDate.getFullYear()}\u5E74${this.currentDate.getMonth() + 1}\u6708`);
    const nextBtn = header.createEl("button", { cls: "calendar-nav-btn" });
    nextBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="9 18 15 12 9 6"></polyline></svg>';
    titleEl.addEventListener("wheel", (e) => {
      e.preventDefault();
      if (e.deltaY < 0) {
        this.currentDate.setMonth(this.currentDate.getMonth() + 1);
      } else {
        this.currentDate.setMonth(this.currentDate.getMonth() - 1);
      }
      titleEl.setText(`${this.currentDate.getFullYear()}\u5E74${this.currentDate.getMonth() + 1}`);
      const existingContent = this.calendarContainer.querySelector(".calendar-weekdays, .calendar-grid");
      if (existingContent) {
        existingContent.remove();
      }
      const weekdays = ["\u65E5", "\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D"];
      const weekHeader = this.calendarContainer.createDiv("calendar-weekdays");
      weekdays.forEach((day) => {
        weekHeader.createDiv("weekday").setText(day);
      });
      const grid = this.calendarContainer.createDiv("calendar-grid");
      const notesByDate = this.getNotesByDate(
        this.currentDate.getFullYear(),
        this.currentDate.getMonth()
      );
      const notesSection = this.calendarContainer.createDiv("notes-section");
      this.renderCalendarDays(grid, notesByDate, notesSection);
    });
    titleEl.setAttribute("title", "\u6EDA\u52A8\u9F20\u6807\u6EDA\u8F6E\u5207\u6362\u6708\u4EFD");
    prevBtn.addEventListener("click", () => {
      this.currentDate.setMonth(this.currentDate.getMonth() - 1);
      titleEl.setText(`${this.currentDate.getFullYear()}\u5E74${this.currentDate.getMonth() + 1}\u6708`);
      this.renderCalendarContent(this.calendarContainer);
    });
    nextBtn.addEventListener("click", () => {
      this.currentDate.setMonth(this.currentDate.getMonth() + 1);
      titleEl.setText(`${this.currentDate.getFullYear()}\u5E74${this.currentDate.getMonth() + 1}\u6708`);
      this.renderCalendarContent(this.calendarContainer);
    });
    this.renderCalendarContent(this.calendarContainer);
  }
  // 日历-隐藏
  hideCalendar() {
    if (!this.calendarContainer) return;
    this.calendarContainer.style.display = "none";
  }
  // 添加渲染日历内容的方法
  renderCalendarContent(container) {
    const weekdays = ["\u65E5", "\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D"];
    const weekHeader = container.createDiv("calendar-weekdays");
    weekdays.forEach((day) => {
      weekHeader.createDiv("weekday").setText(day);
    });
    const grid = container.createDiv("calendar-grid");
    const notesByDate = this.getNotesByDate(
      this.currentDate.getFullYear(),
      this.currentDate.getMonth()
    );
    const notesSection = container.createDiv("notes-section");
    this.renderCalendarDays(grid, notesByDate, notesSection);
  }
  // 高亮文本
  highlightText(text, searchTerm) {
    if (!searchTerm || searchTerm.trim() === "") {
      return text;
    }
    const escapedSearchTerm = searchTerm.replace(/[.*+?^${}()|[\]\\]/g, "\\$&").trim();
    const regex = new RegExp(`(${escapedSearchTerm})`, "gi");
    return text.replace(regex, '<span class="search-highlight">$1</span>');
  }
  // 搜索=文件内
  async fileContentContainsSearch(file) {
    if (!this.currentSearchTerm || this.currentSearchTerm.trim() === "") {
      return true;
    }
    try {
      const content = await this.app.vault.cachedRead(file);
      const searchTerm = this.currentSearchTerm.trim().toLowerCase();
      const fileContent = content.toLowerCase();
      return fileContent.includes(searchTerm);
    } catch (error) {
      console.error("\u8BFB\u53D6\u6587\u4EF6\u5185\u5BB9\u5931\u8D25:", error);
      return false;
    }
  }
  // 搜索-设置
  setupSearch() {
    const debounce = (fn, delay) => {
      let timeoutId;
      return (...args) => {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => fn.apply(this, args), delay);
      };
    };
    this.searchInput.addEventListener("input", debounce(() => {
      this.currentSearchTerm = this.searchInput.value.trim();
      this.refreshView();
    }, 200));
  }
  // 令-创建按钮
  createCommandButton(toolbar) {
    const commandContainer = toolbar.createDiv("command-container");
    const commandBtn = commandContainer.createEl("button", {
      cls: "command-button"
    });
    commandBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="1"></circle><circle cx="12" cy="5" r="1"></circle><circle cx="12" cy="19" r="1"></circle></svg>
        `;
    commandBtn.setAttribute("title", "\u547D\u4EE4\u83DC\u5355");
    const menu = commandContainer.createDiv("command-menu");
    menu.style.display = "none";
    const deleteEmptyNotesItem = menu.createDiv("command-menu-item");
    deleteEmptyNotesItem.setText("\u5220\u9664\u6240\u9009\u7A7A\u767D\u7B14\u8BB0");
    deleteEmptyNotesItem.addEventListener("click", () => {
      menu.style.display = "none";
      this.deleteEmptyNotes();
    });
    const batchRenameItem = menu.createDiv("command-menu-item");
    batchRenameItem.setText("\u6279\u91CF\u91CD\u540D");
    batchRenameItem.addEventListener("click", () => {
      menu.style.display = "none";
      console.log("\u6279\u91CF\u91CD\u547D\u540D\u529F\u80FD\u5B9E\u73B0");
    });
    let isMenuVisible = false;
    commandBtn.addEventListener("click", (e) => {
      e.stopPropagation();
      isMenuVisible = !isMenuVisible;
      menu.style.display = isMenuVisible ? "block" : "none";
    });
    document.addEventListener("click", (e) => {
      if (!commandContainer.contains(e.target)) {
        isMenuVisible = false;
        menu.style.display = "none";
      }
    });
  }
  // 命令-删除空白笔记
  async deleteEmptyNotes() {
    const selectedFiles = this.getSelectedFiles();
    if (selectedFiles.length === 0) {
      new import_obsidian2.Notice("\u8BF7\u5148\u9009\u62E9\u68C0\u67E5\u7684\u7B14\u8BB0");
      return;
    }
    const emptyNotes = [];
    for (const file of selectedFiles) {
      const content = await this.app.vault.read(file);
      if (!content.trim()) {
        emptyNotes.push(file);
      }
    }
    if (emptyNotes.length === 0) {
      new import_obsidian2.Notice("\u6240\u9009\u7B14\u8BB0\u4E2D\u6CA1\u6709\u7A7A\u767D\u7B14\u8BB0");
      return;
    }
    const confirmModal = new ConfirmModal(
      this.app,
      "\u786E\u8BA4\u5220\u9664\u7A7A\u767D\u7B14\u8BB0",
      `\u662F\u5426\u5220\u9664\u4EE5\u4E0B ${emptyNotes.length} \u4E2A\u7A7A\u767D\u7B14\u8BB0\uFF1F
${emptyNotes.map((file) => file.basename).join("\n")}`
    );
    if (await confirmModal.show()) {
      for (const file of emptyNotes) {
        await this.app.vault.trash(file, true);
      }
      this.refreshView();
      new import_obsidian2.Notice(`\u5220\u9664 ${emptyNotes.length} \u4E2A\u7A7A\u767D\u7B14\u8BB0`);
    }
  }
  // 月历-创建月视图
  async createMonthView() {
    if (this.currentLoadingView !== "month") {
      console.log("\u4E2D\u65AD\u6708\u5386\u89C6\u56FE\u8F7D\uFF1A\u89C6\u56FE\u5DF2\u5207\u6362");
      return;
    }
    try {
      if (!this.container.querySelector(".month-view")) {
        const monthContainer = this.container.createDiv("month-view");
        const header = monthContainer.createDiv("month-header");
        const yearGroup = header.createDiv("year-group");
        const prevYearBtn = yearGroup.createEl("button", { cls: "year-nav-btn" });
        prevYearBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="15 18 9 12 15 6"></polyline></svg>';
        const yearDisplay = yearGroup.createDiv("year-display");
        yearDisplay.setText(this.currentDate.getFullYear().toString());
        const nextYearBtn = yearGroup.createEl("button", { cls: "year-nav-btn" });
        nextYearBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="9 18 15 12 9 6"></polyline></svg>';
        prevYearBtn.addEventListener("click", () => this.navigateYear(-1));
        nextYearBtn.addEventListener("click", () => this.navigateYear(1));
        const monthSelector = header.createDiv("month-selector");
        for (let i = 1; i <= 12; i++) {
          const monthBtn = monthSelector.createDiv({
            cls: `month-btn ${i === this.currentDate.getMonth() + 1 ? "active" : ""}`,
            text: i.toString()
          });
          monthBtn.addEventListener("click", () => {
            this.selectMonth(i - 1);
          });
        }
        const todayBtn = header.createEl("button", {
          cls: "today-btn",
          text: "\u4ECA\u5929"
        });
        todayBtn.addEventListener("click", () => this.goToToday());
        monthSelector.addEventListener("wheel", (e) => {
          e.preventDefault();
          this.navigateMonth(e.deltaY > 0 ? 1 : -1);
        });
        const weekdays = ["", "\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D"];
        const weekHeader = monthContainer.createDiv("month-weekdays");
        weekdays.forEach((day) => {
          weekHeader.createDiv("weekday").setText(day);
        });
        monthContainer.createDiv("month-grid");
      }
      this.updateMonthView();
    } finally {
      if (this.currentLoadingView === "month") {
        this.currentLoadingView = null;
      }
    }
  }
  // 月历-选择月份
  selectMonth(month) {
    this.currentDate = new Date(this.currentDate.getFullYear(), month);
    this.updateMonthView();
  }
  // 月历-更新月视图
  updateMonthView() {
    const monthView = this.container.querySelector(".month-view");
    if (!monthView) return;
    const yearDisplay = monthView.querySelector(".year-display");
    if (yearDisplay) {
      yearDisplay.setText(this.currentDate.getFullYear().toString());
    }
    const monthBtns = monthView.querySelectorAll(".month-btn");
    monthBtns.forEach((btn, index) => {
      btn.toggleClass("active", index === this.currentDate.getMonth());
    });
    const grid = monthView.querySelector(".month-grid");
    if (grid) {
      grid.empty();
      this.renderMonthGrid(grid);
    }
  }
  // 月历-月份导航
  navigateMonth(delta) {
    const newDate = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth() + delta);
    if (newDate.getFullYear() !== this.currentDate.getFullYear()) {
      const yearDisplay = this.container.querySelector(".year-display");
      if (yearDisplay) {
        yearDisplay.setText(newDate.getFullYear().toString());
      }
    }
    this.currentDate = newDate;
    this.updateMonthView();
  }
  // 月历-跳转到今天
  goToToday() {
    this.currentDate = /* @__PURE__ */ new Date();
    this.updateMonthView();
  }
  // 月历-渲染视图格
  renderMonthGrid(grid) {
    const year = this.currentDate.getFullYear();
    const month = this.currentDate.getMonth();
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const today = /* @__PURE__ */ new Date();
    const isCurrentMonth = today.getFullYear() === year && today.getMonth() === month;
    const notesByDate = this.getNotesByDate(year, month);
    for (let i = 0; i < firstDay.getDay(); i++) {
      grid.createDiv("month-day empty");
    }
    for (let day = 1; day <= lastDay.getDate(); day++) {
      const dateCell = grid.createDiv("month-day");
      const dateStr = `${year}-${String(month + 1).padStart(2, "0")}-${String(day).padStart(2, "0")}`;
      if (isCurrentMonth && today.getDate() === day) {
        dateCell.addClass("today");
      }
      dateCell.createDiv("day-number").setText(String(day));
      const dayNotes = notesByDate[dateStr] || [];
      if (dayNotes.length > 0) {
        const notesList = dateCell.createDiv("day-notes");
        dayNotes.forEach((note) => {
          const noteItem = notesList.createDiv("day-note-item");
          noteItem.setText(note.basename);
          noteItem.addEventListener("click", async (e) => {
            e.stopPropagation();
            await openInAppropriateLeaf(this.app, note);
          });
          noteItem.addEventListener("mouseenter", async () => {
            try {
              this.previewContainer.empty();
              const content = await this.app.vault.read(note);
              await import_obsidian2.MarkdownRenderer.render(
                this.app,
                content,
                this.previewContainer,
                note.path,
                this
              );
            } catch (error) {
              console.error("\u9884\u89C8\u52A0\u8F7D\u5931\u8D25:", error);
            }
          });
        });
      }
    }
  }
  // 月历-获取每日笔记数量
  getNotesByDate(year, month) {
    const notesByDate = {};
    const files = this.app.vault.getMarkdownFiles();
    files.forEach((file) => {
      const fileDate = new Date(file.stat.mtime);
      if (fileDate.getFullYear() === year && fileDate.getMonth() === month) {
        const dateStr = fileDate.toISOString().split("T")[0];
        if (!notesByDate[dateStr]) {
          notesByDate[dateStr] = [];
        }
        notesByDate[dateStr].push(file);
      }
    });
    return notesByDate;
  }
  // 年份导航
  navigateYear(delta) {
    this.currentDate = new Date(this.currentDate.getFullYear() + delta, this.currentDate.getMonth());
    this.updateMonthView();
  }
  // 列表-创建视图
  async createListView() {
    if (this.currentLoadingView !== "list") {
      console.log("\u4E2D\u5217\u8868\u89C6\u56FE\u52A0\u8F7D\uFF1A\u89C6\u56FE\u5DF2\u6362");
      return;
    }
    try {
      const files = this.app.vault.getMarkdownFiles();
      const folderStructure = /* @__PURE__ */ new Map();
      files.forEach((file) => {
        var _a;
        const pathParts = file.path.split("/");
        const rootFolder = pathParts.length > 1 ? pathParts[0] : "\u6839\u5F55";
        const subFolder = pathParts.length > 2 ? pathParts[1] : "";
        if (!folderStructure.has(rootFolder)) {
          folderStructure.set(rootFolder, /* @__PURE__ */ new Map());
        }
        const subFolders = folderStructure.get(rootFolder);
        if (subFolders) {
          if (!subFolders.has(subFolder)) {
            subFolders.set(subFolder, []);
          }
          (_a = subFolders.get(subFolder)) == null ? void 0 : _a.push(file);
        }
      });
      for (const [rootFolder, subFolders] of folderStructure) {
        const folderGroup = this.container.createDiv("folder-group");
        const folderHeader = folderGroup.createDiv("folder-header");
        const folderIcon = folderHeader.createDiv("folder-icon");
        folderIcon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path></svg>`;
        const folderName = folderHeader.createDiv("folder-name");
        folderName.setText(rootFolder);
        const contentArea = folderGroup.createDiv("folder-content-area");
        const sideNav = contentArea.createDiv("folder-sidebar");
        const rootNotes = subFolders.get("") || [];
        if (rootNotes.length > 0) {
          const rootTitle = sideNav.createDiv("folder-title");
          rootTitle.setText("...");
          rootTitle.addEventListener("click", () => {
            this.showFolderContent(notesArea, rootNotes);
            sideNav.querySelectorAll(".folder-title").forEach((el) => el.removeClass("active"));
            rootTitle.addClass("active");
          });
        }
        for (const [subFolder, notes] of subFolders) {
          if (subFolder !== "") {
            const subTitle = sideNav.createDiv("folder-title sub");
            subTitle.setText(subFolder);
            subTitle.addEventListener("mouseenter", () => {
              this.showFolderContent(notesArea, notes);
              sideNav.querySelectorAll(".folder-title").forEach((el) => el.removeClass("active"));
              subTitle.addClass("active");
            });
          }
        }
        const notesArea = contentArea.createDiv("folder-content");
        this.showFolderContent(notesArea, rootNotes);
      }
      this.updateCardLayout();
    } finally {
      if (this.currentLoadingView === "list") {
        this.currentLoadingView = null;
      }
    }
  }
  // 列表-显文件夹内容
  showFolderContent(container, notes) {
    container.empty();
    notes.sort((a, b) => b.stat.mtime - a.stat.mtime);
    const notesList = container.createDiv("notes-list");
    notes.forEach((note) => {
      const noteItem = notesList.createDiv("note-item");
      noteItem.setAttribute("data-path", note.path);
      const noteTitle = noteItem.createDiv("note-title");
      noteTitle.setText(note.basename);
      const noteDate = noteItem.createDiv("note-date");
      noteDate.setText(new Date(note.stat.mtime).toLocaleString());
      this.addNoteItemEvents(noteItem, note);
    });
  }
  // 列表-添加笔记项事件
  addNoteItemEvents(noteItem, note) {
    noteItem.addEventListener("click", (e) => {
      this.handleCardSelection(note.path, e);
    });
    noteItem.addEventListener("dblclick", async () => {
      await openInAppropriateLeaf(this.app, note);
    });
    noteItem.addEventListener("contextmenu", (e) => {
      console.log("\u83DC\u5355");
      e.preventDefault();
      this.showContextMenu(e, this.getSelectedFiles());
    });
    noteItem.addEventListener("mouseenter", async () => {
      try {
        this.previewContainer.empty();
        const content = await this.app.vault.read(note);
        await import_obsidian2.MarkdownRenderer.render(
          this.app,
          content,
          this.previewContainer,
          note.path,
          this
        );
      } catch (error) {
        console.error("\u9884\u89C8\u52A0\u8F7D\u5931\u8D25:", error);
      }
    });
  }
  // 标签-刷新
  refreshTags() {
    this.loadTags();
  }
  // 滚动同步
  setupScrollSync() {
    const cardContainer = this.container;
    const previewContainer = this.previewContainer;
    cardContainer.addEventListener("wheel", (e) => {
      if (e.ctrlKey || e.shiftKey) {
        return;
      }
      cardContainer.style.cursor = "ns-resize";
      setTimeout(() => {
        cardContainer.style.cursor = "default";
      }, 150);
      previewContainer.scrollTop += e.deltaY;
    });
    previewContainer.addEventListener("wheel", (e) => {
      previewContainer.style.cursor = "ns-resize";
      setTimeout(() => {
        previewContainer.style.cursor = "default";
      }, 150);
    });
  }
  // 快速记-设置事件
  setupQuickNoteEvents(input, toolbar, tagSuggestions) {
    var _a, _b, _c;
    const titleInput = (_a = input.parentElement) == null ? void 0 : _a.querySelector(".quick-note-title");
    const tagsContainer = (_b = input.parentElement) == null ? void 0 : _b.querySelector(".tags-container");
    const tagInput = tagsContainer == null ? void 0 : tagsContainer.querySelector(".tag-input");
    if (titleInput && input.parentElement) {
      input.parentElement.insertBefore(titleInput, input.parentElement.firstChild);
    }
    const recentTags = new Set(this.loadRecentTags());
    const tags = /* @__PURE__ */ new Set();
    recentTags.forEach((tag) => {
      const tagItem = tagsContainer == null ? void 0 : tagsContainer.createDiv("tag-item");
      tagItem == null ? void 0 : tagItem.addClass("recent-tag");
      tagItem == null ? void 0 : tagItem.setText(tag);
      const removeBtn = tagItem == null ? void 0 : tagItem.createDiv("remove-tag");
      removeBtn == null ? void 0 : removeBtn.setText("\xD7");
      removeBtn == null ? void 0 : removeBtn.addEventListener("click", (e) => {
        e.stopPropagation();
        recentTags.delete(tag);
        tagItem == null ? void 0 : tagItem.remove();
        this.saveRecentTags(Array.from(recentTags));
      });
      tags.add(tag);
      if (tagInput) tagInput.value = "";
    });
    const addTag = (tagText) => {
      if (!tagText || tags.has(tagText)) return;
      const tagItem = tagsContainer == null ? void 0 : tagsContainer.createDiv("tag-item");
      tagItem == null ? void 0 : tagItem.setText(tagText);
      const removeBtn = tagItem == null ? void 0 : tagItem.createDiv("remove-tag");
      removeBtn == null ? void 0 : removeBtn.setText("\xD7");
      removeBtn == null ? void 0 : removeBtn.addEventListener("click", (e) => {
        e.stopPropagation();
        tags.delete(tagText);
        tagItem == null ? void 0 : tagItem.remove();
        recentTags.add(tagText);
        this.saveRecentTags(Array.from(recentTags));
      });
      tags.add(tagText);
      if (tagInput) tagInput.value = "";
    };
    recentTags.forEach((tag) => {
      const tagItem = tagsContainer == null ? void 0 : tagsContainer.createDiv("tag-item");
      tagItem == null ? void 0 : tagItem.addClass("recent-tag");
      tagItem == null ? void 0 : tagItem.setText(tag);
      const removeBtn = tagItem == null ? void 0 : tagItem.createDiv("remove-tag");
      removeBtn == null ? void 0 : removeBtn.setText("\xD7");
      removeBtn == null ? void 0 : removeBtn.addEventListener("click", (e) => {
        e.stopPropagation();
        recentTags.delete(tag);
        tagItem == null ? void 0 : tagItem.remove();
        this.saveRecentTags(Array.from(recentTags));
      });
      tagItem == null ? void 0 : tagItem.addEventListener("click", () => {
        if (tagItem.hasClass("recent-tag")) {
          tagItem.remove();
          addTag(tag);
          recentTags.delete(tag);
          this.saveRecentTags(Array.from(recentTags));
        }
      });
    });
    input.addEventListener("input", () => {
      const content = input.value;
      if (content.includes("```")) {
        input.addClass("has-code");
      } else {
        input.removeClass("has-code");
      }
    });
    const handleSendNote = async () => {
      var _a2, _b2;
      const title = (_a2 = titleInput == null ? void 0 : titleInput.value) == null ? void 0 : _a2.trim();
      const content = input.value.trim();
      if (!content) {
        new import_obsidian2.Notice("\u8BF7\u8F93\u5165\u7B14\u8BB0\u5185\u5BB9");
        return;
      }
      try {
        const tagItems = (_b2 = tagsContainer == null ? void 0 : tagsContainer.querySelectorAll(".tag-item.active")) != null ? _b2 : [];
        const tagTexts = Array.from(tagItems).map((item) => {
          var _a3, _b3;
          return (_b3 = (_a3 = item.textContent) == null ? void 0 : _a3.replace("\xD7", "").trim()) != null ? _b3 : "";
        });
        const tagsContent = tagTexts.map((tag) => `#${tag}`).join(" ");
        const finalContent = tagsContent ? `${tagsContent}

${content}` : content;
        const fileName = title || (/* @__PURE__ */ new Date()).toLocaleDateString("zh-CN", {
          year: "numeric",
          month: "2-digit",
          day: "2-digit"
        }).replace(/\//g, "-");
        const file = await this.createQuickNote(finalContent, [], fileName);
        if (file) {
          this.clearQuickNoteInputs(titleInput != null ? titleInput : null, input, tags, tagsContainer != null ? tagsContainer : null, tagInput != null ? tagInput : null);
          tagsContainer == null ? void 0 : tagsContainer.querySelectorAll(".tag-item").forEach((item) => {
            item.removeClass("active");
            item.addClass("inactive");
          });
          await this.refreshView();
          new import_obsidian2.Notice("\u7B14\u521B\u5EFA\u6210\u529F");
        }
      } catch (error) {
        console.error("\u521B\u5EFA\u7B14\u8BB0\u5931\u8D25:", error);
        new import_obsidian2.Notice("\u521B\u5EFA\u7B14\u8BB0\u5931\u8D25");
      }
    };
    const sendButton = (_c = input.parentElement) == null ? void 0 : _c.querySelector(".quick-note-send");
    if (sendButton) {
      sendButton.addEventListener("click", async (e) => {
        e.preventDefault();
        e.stopPropagation();
        await handleSendNote();
      });
    }
    input.addEventListener("keydown", async (e) => {
      if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault();
        await handleSendNote();
      }
    });
    if (tagInput) {
      tagInput.addEventListener("keydown", (e) => {
        if (e.key === " " && tagInput.value.trim()) {
          e.preventDefault();
          const tagText = tagInput.value.trim();
          if (tagText && !tags.has(tagText)) {
            const tagItem = tagsContainer == null ? void 0 : tagsContainer.createDiv("tag-item");
            tagItem == null ? void 0 : tagItem.addClass("active");
            tagItem == null ? void 0 : tagItem.setText(tagText);
            const removeBtn = tagItem == null ? void 0 : tagItem.createDiv("remove-tag");
            removeBtn == null ? void 0 : removeBtn.setText("\xD7");
            removeBtn == null ? void 0 : removeBtn.addEventListener("click", (e2) => {
              e2.stopPropagation();
              tags.delete(tagText);
              tagItem == null ? void 0 : tagItem.remove();
            });
            tagItem == null ? void 0 : tagItem.addEventListener("click", (e2) => {
              if (e2.target !== removeBtn) {
                tagItem.toggleClass("active", !tagItem.hasClass("active"));
                tagItem.toggleClass("inactive", tagItem.hasClass("active"));
              }
            });
            tags.add(tagText);
            tagInput.value = "";
          }
        }
      });
    }
  }
  // 速笔记-清理入
  clearQuickNoteInputs(titleInput, contentInput, tags, tagsContainer, tagInput) {
    var _a;
    if (titleInput) {
      titleInput.value = "";
    }
    contentInput.value = "";
    contentInput.style.height = "24px";
    contentInput.style.overflowY = "hidden";
    const toolbar = (_a = contentInput.closest(".quick-note-bar")) == null ? void 0 : _a.querySelector(".quick-note-toolbar");
    if (toolbar) {
      toolbar.querySelectorAll(".quick-note-btn").forEach((btn) => {
        btn.removeClass("active");
      });
    }
  }
  // 拖拽
  setupDraggable(element) {
    let isDragging = false;
    let offsetX;
    let offsetY;
    let startX;
    let startY;
    let isClick = true;
    const dragStart = (e) => {
      const target = e.target;
      if (!element.hasClass("minimized") && (target.closest(".quick-note-input") || target.closest(".quick-note-btn") || target.closest(".control-button") || target.closest(".quick-note-send") || target.closest(".tag-input") || target.closest(".quick-note-title"))) {
        return;
      }
      isDragging = true;
      isClick = true;
      startX = e.clientX;
      startY = e.clientY;
      const elementRect = element.getBoundingClientRect();
      const workspaceLeafContent2 = this.containerEl.closest(".workspace-leaf-content");
      offsetX = e.clientX - elementRect.left;
      offsetY = e.clientY - elementRect.top;
      element.style.transition = "none";
      element.style.cursor = "grabbing";
      element.addClass("dragging");
      e.preventDefault();
      e.stopPropagation();
    };
    const drag = (e) => {
      if (!isDragging) return;
      const moveX = Math.abs(e.clientX - startX);
      const moveY = Math.abs(e.clientY - startY);
      if (moveX > 5 || moveY > 5) {
        isClick = false;
      }
      e.preventDefault();
      e.stopPropagation();
      const workspaceLeafContent2 = this.containerEl.closest(".workspace-leaf-content");
      if (!workspaceLeafContent2) return;
      const leafRect = workspaceLeafContent2.getBoundingClientRect();
      const newX = e.clientX - leafRect.left - offsetX;
      const newY = e.clientY - leafRect.top - offsetY;
      const maxX = workspaceLeafContent2.offsetWidth - element.offsetWidth;
      const maxY = workspaceLeafContent2.offsetHeight - element.offsetHeight;
      const boundedX = Math.max(0, Math.min(newX, maxX));
      const boundedY = Math.max(0, Math.min(newY, maxY));
      element.style.left = `${boundedX}px`;
      element.style.top = `${boundedY}px`;
      element.style.transform = "none";
    };
    const dragEnd = (e) => {
      if (!isDragging) return;
      isDragging = false;
      element.style.transition = "all 0.2s ease";
      element.style.cursor = element.hasClass("minimized") ? "grab" : "default";
      element.removeClass("dragging");
      if (element.hasClass("minimized") && isClick) {
        this.restoreQuickNote(element);
      }
      e.stopPropagation();
    };
    element.addEventListener("mousedown", dragStart);
    document.addEventListener("mousemove", drag);
    document.addEventListener("mouseup", dragEnd);
    const resizeObserver = new ResizeObserver(() => {
      if (!isDragging && !element.hasClass("minimized")) {
        element.style.left = "50%";
        element.style.top = "20px";
        element.style.transform = "translateX(-50%)";
      }
    });
    const workspaceLeafContent = this.containerEl.closest(".workspace-leaf-content");
    if (workspaceLeafContent) {
      resizeObserver.observe(workspaceLeafContent);
    }
    element.addEventListener("selectstart", (e) => {
      if (isDragging) {
        e.preventDefault();
      }
    });
  }
  // 保存最近标签
  saveRecentTags(tags) {
    localStorage.setItem("recent-tags", JSON.stringify(tags));
  }
  // 加载最近标签
  loadRecentTags() {
    const saved = localStorage.getItem("recent-tags");
    return saved ? JSON.parse(saved) : [];
  }
  // 快速笔-最小化
  minimizeQuickNote(element) {
    const workspaceLeafContent = this.containerEl.closest(".workspace-leaf-content");
    if (!workspaceLeafContent) return;
    const leafRect = workspaceLeafContent.getBoundingClientRect();
    const elementRect = element.getBoundingClientRect();
    const position = this.getQuickNotePosition(element);
    const relativeLeft = elementRect.left - leafRect.left;
    const relativeTop = elementRect.top - leafRect.top;
    const minimizedSize = 40;
    element.style.width = `${minimizedSize}px`;
    element.style.height = `${minimizedSize}px`;
    switch (position) {
      case "top-right":
        element.style.left = `${relativeLeft + (element.offsetWidth - minimizedSize)}px`;
        element.style.top = `${relativeTop}px`;
        break;
      case "top-left":
        element.style.left = `${relativeLeft}px`;
        element.style.top = `${relativeTop}px`;
        break;
      case "bottom-right":
        element.style.left = `${relativeLeft + (element.offsetWidth - minimizedSize)}px`;
        element.style.top = `${relativeTop}px`;
        break;
      case "bottom-left":
        element.style.left = `${relativeLeft}px`;
        element.style.top = `${relativeTop}px`;
        break;
      default:
        element.style.left = "50%";
        element.style.transform = "translateX(-50%)";
    }
    element.addClass("minimized");
    const backdrop = this.containerEl.querySelector(".quick-note-backdrop");
    backdrop == null ? void 0 : backdrop.removeClass("active");
  }
  // 快速笔记-恢复
  restoreQuickNote(element) {
    if (!element.hasClass("minimized")) return;
    const workspaceLeafContent = this.containerEl.closest(".workspace-leaf-content");
    if (!workspaceLeafContent) return;
    const leafRect = workspaceLeafContent.getBoundingClientRect();
    const elementRect = element.getBoundingClientRect();
    const position = this.getQuickNotePosition(element);
    element.removeClass("minimized");
    element.style.width = "800px";
    element.style.removeProperty("height");
    const relativeLeft = elementRect.left - leafRect.left;
    const relativeTop = elementRect.top - leafRect.top;
    switch (position) {
      case "top-right":
        element.style.left = `${relativeLeft - (800 - 40)}px`;
        element.style.top = `${relativeTop}px`;
        break;
      case "top-left":
        element.style.left = `${relativeLeft}px`;
        element.style.top = `${relativeTop}px`;
        break;
      case "bottom-right":
        element.style.left = `${relativeLeft - (800 - 40)}px`;
        element.style.top = `${relativeTop}px`;
        break;
      case "bottom-left":
        element.style.left = `${relativeLeft}px`;
        element.style.top = `${relativeTop}px`;
        break;
      default:
        element.style.left = "50%";
        element.style.top = "20px";
        element.style.transform = "translateX(-50%)";
    }
    const backdrop = this.containerEl.querySelector(".quick-note-backdrop");
    backdrop == null ? void 0 : backdrop.addClass("active");
  }
  // 获取快速笔记位置
  getQuickNotePosition(element) {
    const workspaceLeafContent = this.containerEl.closest(".workspace-leaf-content");
    if (!workspaceLeafContent) return "center";
    const leafRect = workspaceLeafContent.getBoundingClientRect();
    const elementRect = element.getBoundingClientRect();
    const centerX = elementRect.left + elementRect.width / 2;
    const centerY = elementRect.top + elementRect.height / 2;
    const isRight = centerX > leafRect.left + leafRect.width / 2;
    const isBottom = centerY > leafRect.top + leafRect.height / 2;
    if (isRight && !isBottom) return "top-right";
    if (!isRight && !isBottom) return "top-left";
    if (isRight && isBottom) return "bottom-right";
    if (!isRight && isBottom) return "bottom-left";
    return "center";
  }
  // 笔记内容-观察
  observeNoteContent(element, file) {
    if (this.intersectionObserver) {
      this.intersectionObserver.observe(element);
    }
  }
  // 笔记内容-载
  async loadNoteContent(container, file) {
    if (this.loadedNotes.has(file.path)) return;
    try {
      container.empty();
      const content = await this.app.vault.read(file);
      await import_obsidian2.MarkdownRenderer.render(
        this.app,
        content,
        container,
        file.path,
        this
      );
      if (this.currentSearchTerm) {
        const contentElements = container.querySelectorAll("p, li, h1, h2, h3, h4, h5, h6");
        contentElements.forEach((element) => {
          const originalText = element.textContent || "";
          if (originalText.toLowerCase().includes(this.currentSearchTerm.toLowerCase())) {
            element.innerHTML = this.highlightText(originalText, this.currentSearchTerm);
          }
        });
      }
      this.loadedNotes.add(file.path);
      console.log("\u52A0\u8F7D\u7B14\u8BB0\u5185\u5BB9\u6210\u529F:", file.path);
    } catch (error) {
      console.error("\u52A0\u8F7D\u7B14\u8BB0\u5185\u5BB9\u5931\u8D25:", error);
      container.setText("\u52A0\u8F7D\u5931\u8D25");
    }
  }
  // 关闭
  async onClose() {
    if (this.intersectionObserver) {
      this.intersectionObserver.disconnect();
    }
    this.loadedNotes.clear();
  }
  // 状态栏-更新加载状态
  updateLoadingStatus(message) {
    if (!this.loadingStatus) return;
    const loadingIndicator = this.loadingStatus.querySelector(".loading-indicator");
    if (this.isLoading) {
      loadingIndicator == null ? void 0 : loadingIndicator.addClass("loading");
      this.loadingStatus.innerHTML = `
                <div class="loading-indicator loading">
                    <div class="loading-spinner"></div>
                    <span>${message}</span>
                </div>
            `;
    } else {
      loadingIndicator == null ? void 0 : loadingIndicator.removeClass("loading");
      this.loadingStatus.innerHTML = `
                <div class="loading-indicator">
                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                        <polyline points="22 4 12 14.01 9 11.01"></polyline>
                    </svg>
                    <span>${message}</span>
                </div>
            `;
    }
  }
  // 创建时间轴视图
  async createTimelineView() {
    try {
      this.container.empty();
      console.log("\u5F00\u59CB\u521B\u5EFA\u65F6\u95F4\u8F74\u89C6\u56FE...");
      const timelineContainer = this.container.createDiv("timeline-container");
      this.timelineLoadingIndicator.innerHTML = `
                <div class="loading-spinner"></div>
                <div class="loading-text">\u52A0\u8F7D\u4E2D...</div>
            `;
      this.timelineLoadingIndicator.style.display = "none";
      timelineContainer.appendChild(this.timelineLoadingIndicator);
      this.timelineCurrentPage = 1;
      this.timelineHasMore = true;
      this.timelineIsLoading = false;
      await this.loadTimelinePage(timelineContainer);
      this.setupTimelineScroll(timelineContainer);
      this.updateCardLayout();
    } catch (error) {
      console.error("\u521B\u5EFA\u65F6\u8F74\u89C6\u56FE\u5931\u8D25:", error);
      new import_obsidian2.Notice("\u521B\u5EFA\u65F6\u95F4\u8F74\u89C6\u56FE\u5931\u8D25");
      this.updateLoadingStatus("\u521B\u5EFA\u65F6\u95F4\u89C6\u56FE\u5931\u8D25");
    }
  }
  // 创建卡片设置面板
  createCardSettings(toolbar) {
    const settingsContainer = toolbar.createDiv("card-settings-container");
    const settingsBtn = settingsContainer.createEl("button", {
      cls: "card-settings-button"
    });
    settingsBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="3"></circle><path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path></svg>
            <span>\u5361\u7247\u8BBE\u7F6E</span>
        `;
    const settingsPanel = settingsContainer.createDiv("card-settings-panel");
    settingsPanel.style.display = "none";
    settingsBtn.addEventListener("click", (e) => {
      e.stopPropagation();
      const isVisible = settingsPanel.style.display === "block";
      if (!isVisible) {
        this.updateSettingsPanel(settingsPanel);
      }
      settingsPanel.style.display = isVisible ? "none" : "block";
    });
    document.addEventListener("click", (e) => {
      if (!settingsContainer.contains(e.target)) {
        settingsPanel.style.display = "none";
      }
    });
  }
  // 更新设置面板状态
  updateSettingsPanel(settingsPanel) {
    settingsPanel.empty();
    const currentSettings = this.cardSettings[this.currentView];
    const basicSettings = settingsPanel.createDiv("settings-section");
    basicSettings.createEl("h3", { text: "\u57FA\u672C\u8BBE\u7F6E" });
    const showDateOption = this.createCheckboxOption(basicSettings, "\u663E\u793A\u671F", currentSettings.showDate);
    showDateOption.addEventListener("change", (e) => {
      currentSettings.showDate = e.target.checked;
      const dateElements = this.container.querySelectorAll(".note-date");
      dateElements.forEach((element) => {
        if (currentSettings.showDate) {
          element.removeClass("hide");
          element.addClass("show");
        } else {
          element.removeClass("show");
          element.addClass("hide");
        }
      });
    });
    const showContentOption = this.createCheckboxOption(basicSettings, "\u663E\u793A\u7B14\u8BB0\u5185\u5BB9", currentSettings.showContent);
    showContentOption.addEventListener("change", (e) => {
      currentSettings.showContent = e.target.checked;
      const contentElements = this.container.querySelectorAll(".note-content");
      contentElements.forEach((element) => {
        if (currentSettings.showContent) {
          element.addClass("show");
        } else {
          element.removeClass("show");
        }
      });
    });
    const layoutSettings = settingsPanel.createDiv("settings-section");
    layoutSettings.createEl("h3", { text: "\u5E03\u5C40\u8BBE\u7F6E" });
    this.createSliderOption(layoutSettings, "\u5361\u7247\u9AD8", currentSettings.cardHeight, 200, 500, 10, (value) => {
      currentSettings.cardHeight = value;
      this.container.querySelectorAll(".note-card").forEach((card) => {
        if (card instanceof HTMLElement) {
          card.style.height = `${value}px`;
        }
      });
    });
    this.createSliderOption(layoutSettings, "\u5361\u7247\u95F4\u8DDD", currentSettings.cardGap, 0, 40, 4, (value) => {
      currentSettings.cardGap = value;
      if (this.currentView === "card") {
        this.container.style.gap = `${value}px`;
      } else if (this.currentView === "timeline") {
        const notesLists = this.container.querySelectorAll(".timeline-notes-list");
        notesLists.forEach((list) => {
          if (list instanceof HTMLElement) {
            list.style.gap = `${value}px`;
          }
        });
      }
    });
    const updateCardsPerRow = (value) => {
      cardsPerRowInput.value = value.toString();
      currentSettings.cardsPerRow = value;
      if (this.currentView === "card") {
        const containerWidth = this.container.offsetWidth;
        const totalGap = value >= 0 ? currentSettings.cardGap : 0;
        const maxColumns = Math.floor(containerWidth / (180 + totalGap));
        console.log("containerWidth", containerWidth);
        console.log("totalGap", totalGap);
        console.log("maxColumns", maxColumns);
        const repeatValue = value > maxColumns ? maxColumns : value;
        this.container.style.gridTemplateColumns = `repeat(${repeatValue}, minmax(150px, 1fr))`;
      } else if (this.currentView === "timeline") {
        const notesLists = this.container.querySelectorAll(".timeline-notes-list");
        notesLists.forEach((list) => {
          if (list instanceof HTMLElement) {
            list.style.gridTemplateColumns = `repeat(${value}, 1fr)`;
          }
        });
      }
    };
    const cardsPerRowContainer = layoutSettings.createDiv("setting-item");
    cardsPerRowContainer.createEl("label", { text: "\u6BCF\u884C\u5361\u7247\u6570\u91CF" });
    const controlGroup = cardsPerRowContainer.createDiv("setting-control-group");
    const decreaseBtn = controlGroup.createEl("button", {
      cls: "cards-per-row-btn decrease",
      text: "-"
    });
    const cardsPerRowInput = controlGroup.createEl("input", {
      type: "number",
      value: currentSettings.cardsPerRow.toString(),
      placeholder: "\u81EA\u52A8"
    });
    const increaseBtn = controlGroup.createEl("button", {
      cls: "cards-per-row-btn increase",
      text: "+"
    });
    decreaseBtn.addEventListener("click", () => {
      const currentValue = parseInt(cardsPerRowInput.value) || 4;
      if (currentValue > 0) {
        updateCardsPerRow(Math.max(1, currentValue - 1));
      }
    });
    increaseBtn.addEventListener("click", () => {
      const currentValue = parseInt(cardsPerRowInput.value) || 4;
      updateCardsPerRow(currentValue + 1);
    });
    cardsPerRowInput.addEventListener("change", (e) => {
      const value = parseInt(e.target.value);
      updateCardsPerRow(isNaN(value) ? 4 : value);
    });
    cardsPerRowInput.addEventListener("wheel", (e) => {
      e.preventDefault();
      if (document.activeElement === cardsPerRowInput) {
        const delta = e.deltaY > 0 ? -1 : 1;
        const currentValue = parseInt(cardsPerRowInput.value) || 4;
        updateCardsPerRow(currentValue + delta);
      }
    });
  }
  // 创建选框选项
  createCheckboxOption(container, label, defaultChecked) {
    const settingItem = container.createDiv("setting-item");
    const checkbox = document.createElement("input");
    checkbox.type = "checkbox";
    checkbox.checked = defaultChecked;
    settingItem.appendChild(checkbox);
    const labelEl = document.createElement("label");
    labelEl.textContent = label;
    settingItem.appendChild(labelEl);
    return checkbox;
  }
  // 新卡片布局
  updateCardLayout() {
    const container = this.container;
    if (!container) return;
    const currentSettings = this.cardSettings[this.currentView];
    container.style.gap = `${currentSettings.cardGap}px`;
    container.querySelectorAll(".note-card").forEach((card) => {
      if (card instanceof HTMLElement) {
        card.style.height = `${currentSettings.cardHeight}px`;
      }
    });
    const minCardWidth = 150;
    const containerWidth = container.offsetWidth;
    const maxPossibleCards = Math.floor((containerWidth + currentSettings.cardGap) / (minCardWidth + currentSettings.cardGap));
    if (currentSettings.cardsPerRow > 0) {
      const columns = Math.min(currentSettings.cardsPerRow, maxPossibleCards);
      const totalGap = currentSettings.cardGap * (columns - 1);
      const cardWidth = (containerWidth - totalGap) / columns;
      container.style.gridTemplateColumns = `repeat(${columns}, ${cardWidth}px)`;
    } else {
      const defaultColumns = this.cardSettings[this.currentView].cardsPerRow;
      const columns = Math.min(defaultColumns, maxPossibleCards);
      const totalGap = currentSettings.cardGap * (columns - 1);
      const cardWidth = (containerWidth - totalGap) / columns;
      container.style.gridTemplateColumns = `repeat(${columns}, ${cardWidth}px)`;
    }
  }
  // 设置观察器
  setupIntersectionObserver() {
    this.intersectionObserver = new IntersectionObserver(
      (entries) => {
        entries.forEach(async (entry) => {
          if (entry.isIntersecting) {
            const noteContent = entry.target;
            const filePath = noteContent.getAttribute("data-path");
            if (filePath && !this.loadedNotes.has(filePath)) {
              const file = this.app.vault.getAbstractFileByPath(filePath);
              if (file instanceof import_obsidian2.TFile) {
                await this.loadNoteContent(noteContent, file);
              }
            }
          }
        });
      },
      {
        rootMargin: "100px",
        threshold: 0.1
      }
    );
  }
  // 创建滑块选
  createSliderOption(container, label, defaultValue, min, max, step, onChange) {
    const settingItem = container.createDiv("setting-item");
    settingItem.createEl("label", { text: label });
    const controlGroup = settingItem.createDiv("setting-control-group");
    const decreaseBtn = controlGroup.createEl("button", {
      cls: "setting-control-btn decrease",
      text: "-"
    });
    const numberInput = controlGroup.createEl("input", {
      type: "number",
      value: defaultValue.toString(),
      attr: {
        min: min.toString(),
        max: max.toString(),
        step: step.toString()
      }
    });
    const increaseBtn = controlGroup.createEl("button", {
      cls: "setting-control-btn increase",
      text: "+"
    });
    const updateValue = (value) => {
      value = Math.max(min, Math.min(max, value));
      numberInput.value = value.toString();
      onChange(value);
    };
    decreaseBtn.addEventListener("click", () => {
      const currentValue = parseInt(numberInput.value) || defaultValue;
      updateValue(currentValue - step);
    });
    increaseBtn.addEventListener("click", () => {
      const currentValue = parseInt(numberInput.value) || defaultValue;
      updateValue(currentValue + step);
    });
    numberInput.addEventListener("change", (e) => {
      const value = parseInt(e.target.value);
      updateValue(isNaN(value) ? defaultValue : value);
    });
    numberInput.addEventListener("wheel", (e) => {
      e.preventDefault();
      if (document.activeElement === numberInput) {
        const delta = e.deltaY > 0 ? -step : step;
        const currentValue = parseInt(numberInput.value) || defaultValue;
        updateValue(currentValue + delta);
      }
    });
  }
  // 添加获取周数的方法
  getWeekNumber(date) {
    const target = new Date(date.valueOf());
    const dayNr = (date.getDay() + 6) % 7;
    target.setDate(target.getDate() - dayNr + 3);
    const firstThursday = target.valueOf();
    target.setMonth(0, 1);
    if (target.getDay() !== 4) {
      target.setMonth(0, 1 + (4 - target.getDay() + 7) % 7);
    }
    const weekNum = 1 + Math.ceil((firstThursday - target.valueOf()) / 6048e5);
    console.log(`\u8BA1\u7B97\u5468\u6570 - \u671F:${date.toISOString()}, \u5468\u6570:${weekNum}`);
    return weekNum;
  }
  // 创建周视图
  async createWeekView() {
    if (this.currentLoadingView !== "week") {
      return;
    }
    try {
      console.log("\u5F00\u59CB\u521B\u5EFA\u5468\u56FE");
      this.container.empty();
      const weekContainer = this.container.createDiv("week-view");
      const header = weekContainer.createDiv("week-header");
      const navGroup = header.createDiv("week-nav-group");
      const prevWeekBtn = navGroup.createEl("button", {
        cls: "week-nav-btn",
        attr: { title: "\u4E0A\u4E00\u5468" }
      });
      prevWeekBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="15 18 9 12 15 6"></polyline></svg>';
      const weekInfo = navGroup.createDiv("week-info");
      const currentMonth = this.getMonthForWeek(this.currentYear, this.currentWeek);
      weekInfo.setText(`${this.currentYear}\u5E74${currentMonth}\u6708 \u7B2C${this.currentWeek}\u5468`);
      const currentWeekBtn = navGroup.createEl("button", {
        cls: "week-nav-btn current-week",
        attr: { title: "\u8FD4\u56DE\u672C\u5468" }
      });
      currentWeekBtn.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="12" cy="12" r="10"></circle>
                    <polyline points="12 6 12 12 16 14"></polyline>
                </svg>
            `;
      const nextWeekBtn = navGroup.createEl("button", {
        cls: "week-nav-btn",
        attr: { title: "\u4E0B\u4E00\u5468" }
      });
      nextWeekBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="9 18 15 12 9 6"></polyline></svg>';
      prevWeekBtn.addEventListener("click", (e) => {
        e.stopPropagation();
        this.navigateWeek(-1);
      });
      currentWeekBtn.addEventListener("click", (e) => {
        e.stopPropagation();
        this.goToCurrentWeek();
      });
      nextWeekBtn.addEventListener("click", (e) => {
        e.stopPropagation();
        this.navigateWeek(1);
      });
      const weekContent = weekContainer.createDiv("week-content");
      const weekDates = getWeekDates(this.currentYear, this.currentWeek);
      const daysHeader = weekContent.createDiv("week-days-header");
      const weekdays = ["\u5468\u4E00", "\u5468\u4E8C", "\u5468\u4E09", "\u5468\u56DB", "\u5468\u4E94", "\u5468\u516D", "\u5468\u65E5"];
      weekdays.forEach((day, index) => {
        const dayHeader = daysHeader.createDiv("week-day-header");
        const dateIndex = index === 6 ? 0 : index + 1;
        const date = weekDates[dateIndex];
        dayHeader.innerHTML = `
                    <div class="weekday-name">${day}</div>
                    <div class="date-number">${date.getDate()}</div>
                `;
      });
      const notesContainer = weekContent.createDiv("week-notes-container");
      const reorderedDates = [
        ...weekDates.slice(1),
        // 周一到周六
        weekDates[0]
        // 周
      ];
      reorderedDates.forEach(async (date) => {
        const dayNotes = notesContainer.createDiv("day-notes-column");
        const notes = await this.getNotesForDate(date);
        notes.forEach((note) => {
          const noteCard = this.createWeekNoteCard(note);
          dayNotes.appendChild(noteCard);
        });
      });
    } catch (error) {
      console.error("\u521B\u5EFA\u5468\u89C6\u56FE\u5931\u8D25:", error);
      new import_obsidian2.Notice("\u521B\u5EFA\u5468\u89C6\u56FE\u5931\u8D25");
    } finally {
      if (this.currentLoadingView === "week") {
        this.currentLoadingView = null;
      }
    }
  }
  // 添加返回本周的方法
  goToCurrentWeek() {
    const today = /* @__PURE__ */ new Date();
    this.currentYear = today.getFullYear();
    this.currentWeek = this.getWeekNumber(today);
    this.createWeekView();
  }
  // 修改获取指定日期的笔记方法加日期范围查
  async getNotesForDate(date) {
    const files = this.app.vault.getMarkdownFiles();
    return files.filter((file) => {
      const fileDate = new Date(file.stat.ctime);
      return this.isSameDay(fileDate, date);
    }).sort((a, b) => b.stat.mtime - a.stat.mtime);
  }
  // 添加日期比较方法
  isSameDay(date1, date2) {
    return date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate();
  }
  // 创建周视图的笔记卡片
  createWeekNoteCard(file) {
    const card = createDiv("week-note-card");
    const title = card.createDiv("week-note-title");
    title.setText(file.basename);
    const time = card.createDiv("week-note-time");
    time.setText(new Date(file.stat.mtime).toLocaleTimeString("zh-CN", {
      hour: "2-digit",
      minute: "2-digit"
    }));
    card.addEventListener("click", async () => {
      await openInAppropriateLeaf(this.app, file);
    });
    card.addEventListener("mouseenter", async () => {
      try {
        this.previewContainer.empty();
        const content = await this.app.vault.read(file);
        await import_obsidian2.MarkdownRenderer.render(
          this.app,
          content,
          this.previewContainer,
          file.path,
          this
        );
      } catch (error) {
        console.error("\u9884\u89C8\u52A0\u8F7D\u5931\u8D25:", error);
      }
    });
    return card;
  }
  // 周视图导航
  navigateWeek(delta) {
    console.log("\u5BFC\u822A\u524D - \u5E74\u4EFD:", this.currentYear, ":", this.currentWeek, "\u589E\u91CF:", delta);
    let newWeek = this.currentWeek;
    let newYear = this.currentYear;
    newWeek += delta;
    const getWeeksInYear = (year) => {
      const lastDay = new Date(year, 11, 31);
      const weekNum = this.getWeekNumber(lastDay);
      console.log(`${year}\u5E74\u7684\u603B\u5468\u6570:`, weekNum);
      return weekNum;
    };
    if (newWeek < 1) {
      newYear--;
      newWeek = getWeeksInYear(newYear);
      console.log("\u5207\u6362\u5230\u4E0A\u4E00\u5E74\u7684\u6700\u540E\u4E00\u5468");
    } else {
      const weeksInYear = getWeeksInYear(newYear);
      if (newWeek > weeksInYear) {
        newYear++;
        newWeek = 1;
        console.log("\u5207\u6362\u5230\u4E0B\u4E00\u5E74\u7684\u7B2C\u4E00\u5468");
      }
    }
    this.currentYear = newYear;
    this.currentWeek = newWeek;
    console.log("\u5BFC\u822A\u540E - \u5E74\u4EFD:", this.currentYear, "\u5468\u6570:", this.currentWeek);
    const weekInfo = this.containerEl.querySelector(".week-info");
    if (weekInfo) {
      const currentMonth = this.getMonthForWeek(this.currentYear, this.currentWeek);
      weekInfo.setText(`${this.currentYear}\u5E74${currentMonth}\u6708 \u7B2C${this.currentWeek}\u5468`);
    }
    const notesContainer = this.containerEl.querySelector(".week-notes-container");
    if (notesContainer) {
      notesContainer.empty();
      const weekDates = getWeekDates(this.currentYear, this.currentWeek);
      const reorderedDates = [
        ...weekDates.slice(1),
        // 周一到周六
        weekDates[0]
        // 周日
      ];
      reorderedDates.forEach(async (date) => {
        const dayNotes = notesContainer.createDiv("day-notes-column");
        const notes = await this.getNotesForDate(date);
        notes.forEach((note) => {
          const noteCard = this.createWeekNoteCard(note);
          dayNotes.appendChild(noteCard);
        });
      });
    }
  }
  // 获取指定周所在的月份
  getMonthForWeek(year, week) {
    try {
      const weekDates = getWeekDates(year, week);
      const middleDate = weekDates[3];
      console.log("\u5468\u4E2D\u95F4\u65E5\u671F:", middleDate);
      return middleDate.getMonth() + 1;
    } catch (error) {
      console.error("\u83B7\u53D6\u6708\u4EFD\u5931:", error);
      return 1;
    }
  }
  // 创建主页视图
  async createHomeView() {
    if (this.currentLoadingView !== "home") {
      return;
    }
    try {
      this.container.empty();
      const homeContainer = this.container.createDiv("home-container");
      const moduleGrid = homeContainer.createDiv("module-grid");
      const leftColumn = moduleGrid.createDiv("left-column");
      const centerColumn = moduleGrid.createDiv("center-column");
      const rightColumn = moduleGrid.createDiv("right-column");
      const visibleModules = this.homeModules.filter((m) => m.visible);
      console.log("Visible modules:", visibleModules);
      if (visibleModules.length === 0) {
        console.log("No visible modules found, using default modules");
        this.homeModules = DEFAULT_HOME_MODULES;
        await this.plugin.saveSettings();
      }
      const leftModules = visibleModules.filter((m) => m.position === "left").sort((a, b) => a.order - b.order);
      const centerModules = visibleModules.filter((m) => m.position === "center").sort((a, b) => a.order - b.order);
      const rightModules = visibleModules.filter((m) => m.position === "right").sort((a, b) => a.order - b.order);
      console.log("Left modules:", leftModules);
      console.log("Center modules:", centerModules);
      console.log("Right modules:", rightModules);
      for (const module2 of leftModules) {
        console.log("Creating left module:", module2.id);
        const moduleEl = await this.createModule(leftColumn, module2);
        moduleEl.setAttribute("data-position", "left");
        this.setupModuleDragging(moduleEl);
      }
      for (const module2 of centerModules) {
        console.log("Creating center module:", module2.id);
        const moduleEl = await this.createModule(centerColumn, module2);
        moduleEl.setAttribute("data-position", "center");
        this.setupModuleDragging(moduleEl);
      }
      for (const module2 of rightModules) {
        console.log("Creating right module:", module2.id);
        const moduleEl = await this.createModule(rightColumn, module2);
        moduleEl.setAttribute("data-position", "right");
        this.setupModuleDragging(moduleEl);
      }
    } catch (error) {
      console.error("\u521B\u5EFA\u4E3B\u9875\u89C6\u56FE\u5931\u8D25:", error);
      console.error(error.stack);
      new import_obsidian2.Notice("\u521B\u5EFA\u4E3B\u9875\u89C6\u56FE\u5931\u8D25");
    }
  }
  // 创建单个模块
  async createModule(container, module2) {
    const moduleEl = container.createDiv(`module-container ${module2.type}-module`);
    moduleEl.setAttribute("data-module-id", module2.id);
    moduleEl.style.gridColumn = `span ${module2.columns || 4}`;
    const header = moduleEl.createDiv("module-header");
    header.createEl("h3", { text: module2.name });
    const resizeControls = moduleEl.createDiv("module-resize");
    const decreaseBtn = resizeControls.createEl("button");
    decreaseBtn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="5" y1="12" x2="19" y2="12"></line></svg>`;
    const increaseBtn = resizeControls.createEl("button");
    increaseBtn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>`;
    const content = moduleEl.createDiv("module-content");
    await this.renderModuleContent(content, module2);
    return moduleEl;
  }
  // 显示模块管理器
  showModuleManager() {
    const modal = new ModuleManagerModal(this.app, this.homeModules, async (modules) => {
      this.homeModules = modules;
      this.createHomeView();
    });
    modal.open();
  }
  // 模块-热力图
  async renderHeatmap(container) {
    console.log("\u6E32\u67D3\u70ED\u529B\u56FE...");
    const heatmapContainer = container.createDiv("heatmap-container");
    const endDate = /* @__PURE__ */ new Date();
    const startDate = /* @__PURE__ */ new Date();
    startDate.setFullYear(endDate.getFullYear() - 1);
    const dateCountMap = /* @__PURE__ */ new Map();
    for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {
      const dateStr = d.toISOString().split("T")[0];
      dateCountMap.set(dateStr, 0);
    }
    const files = this.app.vault.getMarkdownFiles();
    files.forEach((file) => {
      const date = new Date(file.stat.mtime);
      if (date >= startDate && date <= endDate) {
        const dateStr = date.toISOString().split("T")[0];
        dateCountMap.set(dateStr, (dateCountMap.get(dateStr) || 0) + 1);
      }
    });
    const heatmapGrid = heatmapContainer.createDiv("heatmap-grid");
    const weekLabels = heatmapGrid.createDiv("week-labels");
    ["", "\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D", "\u65E5"].forEach((label) => {
      weekLabels.createDiv("week-label").setText(label);
    });
    const monthLabels = heatmapGrid.createDiv("month-labels");
    const daysContainer = heatmapGrid.createDiv("days-container");
    let iterDate = new Date(startDate);
    const dayOfWeek = iterDate.getDay();
    const diff = dayOfWeek === 0 ? 6 : dayOfWeek - 1;
    iterDate.setDate(iterDate.getDate() - diff);
    let currentMonth = iterDate.getMonth();
    const months = ["\u4E00\u6708", "\u4E8C\u6708", "\u4E09\u6708", "\u56DB\u6708", "\u4E94\u6708", "\u516D\u6708", "\u4E03\u6708", "\u516B\u6708", "\u4E5D\u6708", "\u5341\u6708", "\u5341\u4E00\u6708", "\u5341\u4E8C\u6708"];
    let monthDiv = monthLabels.createDiv("month-label");
    monthDiv.setText(months[currentMonth]);
    let monthLabelsMap = /* @__PURE__ */ new Map();
    let currentMonthStartCol = 0;
    let currentCol = 0;
    const allDayCells = [];
    let currentYear = iterDate.getFullYear();
    while (iterDate <= endDate) {
      const dateStr = iterDate.toISOString().split("T")[0];
      const count = dateCountMap.get(dateStr) || 0;
      const dayCell = document.createElement("div");
      dayCell.className = "day-cell";
      dayCell.setAttribute("data-date", dateStr);
      dayCell.setAttribute("data-count", count.toString());
      let colorClass = "level-0";
      if (count > 0) {
        if (count >= 5) colorClass = "level-4";
        else if (count >= 3) colorClass = "level-3";
        else if (count >= 2) colorClass = "level-2";
        else colorClass = "level-1";
      }
      dayCell.classList.add(colorClass);
      dayCell.setAttribute("title", `${dateStr}: ${count} \u6761\u7B14\u8BB0`);
      allDayCells.push(dayCell);
      const newMonth = iterDate.getMonth();
      const newYear = iterDate.getFullYear();
      if (newMonth !== currentMonth || newYear !== currentYear) {
        const monthLabel = monthLabels.createDiv("month-label");
        monthLabel.setText(months[currentMonth]);
        monthLabelsMap.set(currentMonth + currentYear * 12, monthLabel);
        currentMonth = newMonth;
        currentYear = newYear;
        currentMonthStartCol = currentCol;
      }
      currentCol++;
      iterDate.setDate(iterDate.getDate() + 1);
    }
    const lastMonthLabel = monthLabels.createDiv("month-label");
    lastMonthLabel.setText(months[currentMonth]);
    monthLabelsMap.set(currentMonth + currentYear * 12, lastMonthLabel);
    allDayCells.forEach((cell) => daysContainer.appendChild(cell));
    daysContainer.querySelectorAll(".day-cell").forEach((cell) => {
      cell.addEventListener("mouseenter", () => {
        const dateStr = cell.getAttribute("data-date");
        if (!dateStr) return;
        const date = new Date(dateStr);
        const monthKey = date.getMonth() + date.getFullYear() * 12;
        monthLabelsMap.forEach((label) => label.removeClass("highlight"));
        const monthLabel = monthLabelsMap.get(monthKey);
        if (monthLabel) {
          monthLabel.addClass("highlight");
        }
        const weekDay = date.getDay();
        weekLabels.querySelectorAll(".week-label").forEach((label, index) => {
          label.toggleClass("highlight", index === weekDay);
        });
        daysContainer.querySelectorAll(".day-cell").forEach((otherCell) => {
          const otherDateStr = otherCell.getAttribute("data-date");
          if (!otherDateStr) return;
          const otherDate = new Date(otherDateStr);
          if (otherDate.getMonth() === date.getMonth() && otherDate.getFullYear() === date.getFullYear()) {
            otherCell.addClass("month-hover");
          }
        });
      });
      cell.addEventListener("mouseleave", () => {
        monthLabelsMap.forEach((label) => label.removeClass("highlight"));
        weekLabels.querySelectorAll(".week-label").forEach((label) => {
          label.removeClass("highlight");
        });
        daysContainer.querySelectorAll(".day-cell").forEach((cell2) => {
          cell2.removeClass("month-hover");
        });
      });
    });
  }
  // 模块-本周笔记
  async renderWeeklyNotes(container) {
    console.log("Rendering weekly notes module...");
    const weeklyContainer = container.createDiv("weekly-notes");
    const weekStart = getStartOfWeek();
    const weekEnd = getEndOfWeek();
    const notes = this.app.vault.getMarkdownFiles().filter((file) => {
      const mtime = new Date(file.stat.mtime);
      return mtime >= weekStart && mtime <= weekEnd;
    }).sort((a, b) => b.stat.mtime - a.stat.mtime).slice(0, 10);
    for (const note of notes) {
      const noteItem = weeklyContainer.createDiv("note-item");
      noteItem.createEl("span", { text: note.basename, cls: "note-title" });
      noteItem.createEl("span", {
        text: new Date(note.stat.mtime).toLocaleDateString(),
        cls: "note-date"
      });
      noteItem.addEventListener("click", () => {
        openInAppropriateLeaf(this.app, note);
      });
    }
  }
  // 模块-日历
  async renderCalendarModule(container) {
    container.empty();
    const moduleContainer = container.createDiv("calendar-module");
    const calendarSection = moduleContainer.createDiv("calendar-section");
    const notesSection = moduleContainer.createDiv("notes-section");
    const calendarContainer = calendarSection.createDiv("calendar-container");
    const header = calendarContainer.createDiv("calendar-header");
    const prevBtn = header.createEl("button", { cls: "calendar-nav-btn" });
    prevBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="15 18 9 12 15 6"></polyline></svg>';
    const titleEl = header.createDiv("calendar-title");
    titleEl.setText(`${this.currentDate.getFullYear()}\u5E74${this.currentDate.getMonth() + 1}\u6708`);
    const nextBtn = header.createEl("button", { cls: "calendar-nav-btn" });
    nextBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="9 18 15 12 9 6"></polyline></svg>';
    const todayBtn = header.createEl("button", { cls: "calendar-today-btn" });
    todayBtn.innerText = "\u4ECA\u5929";
    todayBtn.addEventListener("click", () => {
      this.currentDate.setFullYear((/* @__PURE__ */ new Date()).getFullYear());
      this.currentDate.setMonth((/* @__PURE__ */ new Date()).getMonth());
      this.renderCalendarModule(container);
      const today = (/* @__PURE__ */ new Date()).getDate();
      const dayElements = document.querySelectorAll(".calendar-grid .day");
      dayElements.forEach((day) => {
        if (day.textContent === today.toString()) {
          day.classList.add("today");
        }
      });
    });
    titleEl.addEventListener("wheel", (e) => {
      e.preventDefault();
      if (e.deltaY < 0) {
        this.currentDate.setMonth(this.currentDate.getMonth() + 1);
      } else {
        this.currentDate.setMonth(this.currentDate.getMonth() - 1);
      }
      this.renderCalendarModule(container);
    });
    titleEl.setAttribute("title", "\u6EDA\u52A8\u9F20\u6807\u6EDA\u8F6E\u5207\u6362\u6708\u4EFD");
    titleEl.addClass("scrollable");
    const weekdays = ["\u65E5", "\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D"];
    const weekHeader = calendarContainer.createDiv("calendar-weekdays");
    weekdays.forEach((day) => {
      weekHeader.createDiv("weekday").setText(day);
    });
    const grid = calendarContainer.createDiv("calendar-grid");
    const notesByDate = this.getNotesByDate(
      this.currentDate.getFullYear(),
      this.currentDate.getMonth()
    );
    this.renderCalendarDays(grid, notesByDate, notesSection);
    prevBtn.addEventListener("click", () => {
      this.currentDate.setMonth(this.currentDate.getMonth() - 1);
      this.renderCalendarModule(container);
    });
    nextBtn.addEventListener("click", () => {
      this.currentDate.setMonth(this.currentDate.getMonth() + 1);
      this.renderCalendarModule(container);
    });
    notesSection.addEventListener("mouseleave", (event) => {
      console.log("mouseleave", event);
      notesSection.classList.remove("active");
    });
  }
  // 渲染日历天数
  renderCalendarDays(grid, notesByDate, notesSection) {
    const year = this.currentDate.getFullYear();
    const month = this.currentDate.getMonth();
    const firstDay = new Date(year, month, 1).getDay();
    const lastDay = new Date(year, month + 1, 0).getDate();
    for (let i = 0; i < firstDay; i++) {
      grid.createDiv("calendar-day empty");
    }
    for (let day = 1; day <= lastDay; day++) {
      const dateCell = grid.createDiv("calendar-day");
      const dateStr = `${year}-${String(month + 1).padStart(2, "0")}-${String(day).padStart(2, "0")}`;
      const today = /* @__PURE__ */ new Date();
      if (today.getFullYear() === year && today.getMonth() === month && today.getDate() === day) {
        dateCell.addClass("today");
      }
      dateCell.createDiv("day-number").setText(String(day));
      const dayNotes = notesByDate[dateStr] || [];
      if (dayNotes.length > 0) {
        dateCell.createDiv("note-count").setText(dayNotes.length.toString());
      }
      const displayNotesForDate = (dateStr2, dayNotes2) => {
        notesSection.empty();
        if (dayNotes2.length > 0) {
          const dateTitle = notesSection.createDiv("date-title");
          dateTitle.setText(`${dateStr2} \u7684\u7B14\u8BB0`);
          const notesList = notesSection.createDiv("notes-list");
          dayNotes2.forEach((note) => {
            const noteItem = notesList.createDiv("note-item");
            noteItem.setText(`${note.basename}`);
            noteItem.title = `${note.parent ? note.parent.path : "\u672A\u77E5\u8DEF\u5F84"}`;
            noteItem.addEventListener("click", () => {
              openInAppropriateLeaf(this.app, note);
            });
          });
        } else {
          notesSection.createDiv("empty-message").setText("\u5F53\u5929\u6CA1\u6709\u7B14\u8BB0");
        }
      };
      dateCell.addEventListener("mouseenter", () => {
        if (!notesSection.classList.contains("active")) {
          displayNotesForDate(dateStr, dayNotes);
        }
      });
      dateCell.addEventListener("click", () => {
        displayNotesForDate(dateStr, dayNotes);
        if (dateCell.classList.contains("selected")) {
          dateCell.classList.remove("selected");
          notesSection.classList.remove("active");
        } else {
          document.querySelectorAll(".calendar-module .calendar-grid .calendar-day.selected").forEach((el) => {
            el.classList.remove("selected");
            notesSection.classList.remove("active");
          });
          dateCell.classList.add("selected");
          notesSection.classList.add("active");
        }
      });
    }
  }
  // 保存模块设置
  async saveModuleSettings() {
    await this.plugin.saveHomeModules(this.homeModules);
  }
  // 渲染模块内容
  async renderModuleContent(container, module2) {
    console.log("Rendering module:", module2.type);
    try {
      switch (module2.type) {
        case "heatmap":
          await this.renderHeatmap(container);
          break;
        case "weekly":
          await this.renderWeeklyNotes(container);
          break;
        case "stats":
          await renderStats(this.app, container);
          break;
        case "calendar":
          await this.renderCalendarModule(container);
          break;
        case "quicknote":
          await this.renderQuickNoteModule(container);
          break;
        case "todo":
          await this.renderTodoModule(container);
          break;
        default:
          console.warn("Unknown module type:", module2.type);
          container.createDiv("module-error").setText(`Unknown module type: ${module2.type}`);
      }
    } catch (error) {
      console.error("Error rendering module:", module2.type, error);
      console.error(error.stack);
      container.createDiv("module-error").setText(`Error loading ${module2.type} module: ${error.message}`);
    }
  }
  // 切换模块
  toggleModuleEditing(enable) {
    console.log("\u5207\u6362\u6A21\u5757\u7F16\u8F91:", enable);
    const modules = this.container.querySelectorAll(".module-container");
    const columns = this.container.querySelectorAll(".left-column, .center-column, .right-column");
    if (enable) {
      modules.forEach((module2) => {
        if (module2 instanceof HTMLElement) {
          module2.querySelectorAll(".module-drag-handle, .module-controls").forEach((el) => el.remove());
          module2.classList.add("editable");
          this.setupModuleDragging(module2);
        }
      });
      columns.forEach((column) => {
        column.classList.add("editable");
      });
    } else {
      modules.forEach((module2) => {
        if (module2 instanceof HTMLElement) {
          module2.classList.remove("editable");
          module2.querySelectorAll(".module-drag-handle, .module-controls").forEach((el) => el.remove());
          module2.style.position = "";
          module2.style.zIndex = "";
          module2.style.width = "";
          module2.style.left = "";
          module2.style.top = "";
          module2.style.transform = "";
          module2.style.cursor = "";
          module2.classList.remove("dragging");
          const newModule = module2.cloneNode(true);
          if (module2.parentNode) {
            const content = module2.querySelector(".module-content");
            const newContent = newModule.querySelector(".module-content");
            if (content && newContent) {
              newContent.replaceWith(content);
            }
            module2.parentNode.replaceChild(newModule, module2);
          }
        }
      });
      columns.forEach((column) => {
        column.classList.remove("editable");
        column.classList.remove("drop-target");
        column.querySelectorAll(".drop-marker").forEach((marker) => marker.remove());
      });
      this.container.querySelectorAll(".module-placeholder, .drop-marker").forEach((el) => el.remove());
      this.createHomeView();
    }
    console.log("\u6A21\u5757\u7F16\u8F91\u5207\u6362\u5B8C\u6210");
  }
  // 设置模块拖拽
  setupModuleDragging(module2) {
    console.log("\u8BBE\u7F6E\u6A21\u5757\u62D6\u62FD:", module2);
    if (!module2.classList.contains("editable")) {
      console.log("\u6A21\u5757\u4E0D\u662F\u53EF\u7F16\u8F91\u7684,\u8DF3\u8FC7\u62D6\u62FD\u8BBE\u7F6E");
      return;
    }
    let isDragging = false;
    let startX;
    let startY;
    let startPosition;
    let startIndex;
    let placeholder = null;
    let dropTarget = null;
    const dragHandle = document.createElement("div");
    dragHandle.className = "module-drag-handle visible";
    dragHandle.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M3 12h18M3 6h18M3 18h18"></path>
            </svg>
        `;
    module2.appendChild(dragHandle);
    const moduleControls = document.createElement("div");
    moduleControls.className = "module-controls visible";
    const moveUpBtn = document.createElement("button");
    moveUpBtn.className = "move-up-btn";
    moveUpBtn.innerHTML = "\u2191";
    moveUpBtn.title = "\u5411\u4E0A\u79FB\u52A8";
    moveUpBtn.addEventListener("click", (e) => {
      e.stopPropagation();
      console.log("\u70B9\u51FB\u5411\u4E0A\u79FB\u52A8\u6309\u94AE");
      this.moveModule(module2, "up");
    });
    const moveDownBtn = document.createElement("button");
    moveDownBtn.className = "move-down-btn";
    moveDownBtn.innerHTML = "\u2193";
    moveDownBtn.title = "\u5411\u4E0B\u79FB\u52A8";
    moveDownBtn.addEventListener("click", (e) => {
      e.stopPropagation();
      console.log("\u70B9\u51FB\u5411\u4E0B\u79FB\u52A8\u6309\u94AE");
      this.moveModule(module2, "down");
    });
    moduleControls.appendChild(moveUpBtn);
    moduleControls.appendChild(moveDownBtn);
    module2.appendChild(moduleControls);
    const startDrag = (e) => {
      var _a, _b;
      console.log("\u5F00\u59CB\u62D6\u62FD", e.target);
      if (e.target instanceof HTMLElement && (e.target.closest(".module-controls") || e.target.closest("input") || e.target.closest("textarea") || e.target.closest("button"))) {
        console.log("\u70B9\u51FB\u4E86\u4EA4\u4E92\u5143\u7D20,\u5FFD\u7565\u62D6\u62FD");
        return;
      }
      isDragging = true;
      startX = e.pageX;
      startY = e.pageY;
      startPosition = module2.getAttribute("data-position") || "";
      startIndex = Array.from(((_a = module2.parentElement) == null ? void 0 : _a.children) || []).indexOf(module2);
      const rect = module2.getBoundingClientRect();
      const originalWidth = rect.width;
      const originalHeight = rect.height;
      console.log("\u62D6\u62FD\u5F00\u59CB:", {
        startX,
        startY,
        startPosition,
        startIndex,
        originalWidth,
        originalHeight
      });
      placeholder = document.createElement("div");
      placeholder.className = "module-placeholder";
      placeholder.style.height = `${originalHeight}px`;
      placeholder.style.width = `${originalWidth}px`;
      (_b = module2.parentElement) == null ? void 0 : _b.insertBefore(placeholder, module2);
      console.log("\u521B\u5EFA\u5360\u4F4D\u7B26");
      module2.style.position = "fixed";
      module2.style.zIndex = "1000";
      module2.style.width = `${originalWidth}px`;
      module2.style.height = `${originalHeight}px`;
      module2.style.left = `${rect.left}px`;
      module2.style.top = `${rect.top}px`;
      module2.classList.add("dragging");
      console.log("\u5E94\u7528\u62D6\u62FD\u6837\u5F0F");
      document.addEventListener("mousemove", handleDrag);
      document.addEventListener("mouseup", stopDrag);
      e.preventDefault();
      e.stopPropagation();
    };
    const handleDrag = (e) => {
      if (!isDragging) return;
      console.log("\u62D6\u62FD\u4E2D:", e.pageX, e.pageY);
      const dx = e.pageX - startX;
      const dy = e.pageY - startY;
      module2.style.transform = `translate(${dx}px, ${dy}px)`;
      const columns = [
        this.container.querySelector(".left-column"),
        this.container.querySelector(".center-column"),
        this.container.querySelector(".right-column")
      ].filter((col) => col instanceof HTMLElement);
      this.container.querySelectorAll(".drop-marker").forEach((marker) => marker.remove());
      columns.forEach((col) => col.classList.remove("drop-target"));
      for (const column of columns) {
        const rect = column.getBoundingClientRect();
        if (e.clientX >= rect.left && e.clientX <= rect.right && e.clientY >= rect.top && e.clientY <= rect.bottom) {
          dropTarget = column;
          column.classList.add("drop-target");
          const modules = Array.from(column.children).filter(
            (child) => child.classList.contains("module-container") && child !== module2 && child !== placeholder
          );
          let insertBefore = null;
          let insertPosition = "before";
          for (const targetModule of modules) {
            const targetRect = targetModule.getBoundingClientRect();
            const targetMiddle = targetRect.top + targetRect.height / 2;
            if (e.clientY < targetMiddle) {
              insertBefore = targetModule;
              insertPosition = "before";
              break;
            } else {
              insertBefore = targetModule.nextElementSibling;
              insertPosition = "after";
            }
          }
          const marker = document.createElement("div");
          marker.className = "drop-marker";
          if (modules.length === 0) {
            marker.style.width = "100%";
            marker.style.height = "2px";
            column.appendChild(marker);
          } else {
            marker.style.width = "100%";
            marker.style.height = "2px";
            if (insertBefore) {
              column.insertBefore(marker, insertBefore);
            } else {
              column.appendChild(marker);
            }
          }
          if (placeholder) {
            if (insertBefore) {
              column.insertBefore(placeholder, insertBefore);
            } else {
              column.appendChild(placeholder);
            }
          }
          break;
        }
      }
    };
    const stopDrag = async () => {
      if (!isDragging) return;
      console.log("\u505C\u6B62\u62D6\u62FD");
      isDragging = false;
      try {
        if (placeholder && placeholder.parentElement) {
          const targetColumn = placeholder.parentElement;
          const newPosition = targetColumn.classList.contains("left-column") ? "left" : targetColumn.classList.contains("right-column") ? "right" : "center";
          const moduleId = module2.getAttribute("data-module-id");
          const moduleConfig = this.homeModules.find((m) => m.id === moduleId);
          if (moduleConfig) {
            module2.style.position = "";
            module2.style.zIndex = "";
            module2.style.left = "";
            module2.style.top = "";
            module2.style.transform = "";
            module2.style.width = "";
            module2.style.height = "";
            module2.classList.remove("dragging");
            targetColumn.insertBefore(module2, placeholder);
            moduleConfig.position = newPosition;
            moduleConfig.columns = newPosition === "center" ? 2 : 1;
            const sameColumnModules = this.homeModules.filter((m) => m.position === newPosition);
            const newIndex = Array.from(targetColumn.children).filter((child) => child.classList.contains("module-container")).indexOf(module2);
            moduleConfig.order = newIndex;
            sameColumnModules.forEach((m, i) => {
              if (i >= newIndex && m.id !== moduleConfig.id) {
                m.order = i + 1;
              }
            });
            await this.saveModuleSettings();
          }
        }
        placeholder == null ? void 0 : placeholder.remove();
        this.container.querySelectorAll(".drop-marker").forEach((marker) => marker.remove());
        this.container.querySelectorAll(".drop-target").forEach((el) => el.classList.remove("drop-target"));
      } catch (error) {
        console.error("\u62D6\u62FD\u7ED3\u675F\u5904\u7406\u9519\u8BEF:", error);
        module2.style.position = "";
        module2.style.zIndex = "";
        module2.style.left = "";
        module2.style.top = "";
        module2.style.transform = "";
        module2.style.width = "";
        module2.style.height = "";
        module2.classList.remove("dragging");
        placeholder == null ? void 0 : placeholder.remove();
      }
    };
    console.log("\u6DFB\u52A0\u62D6\u62FD\u4E8B\u4EF6\u76D1\u542C");
    dragHandle.addEventListener("mousedown", (e) => {
      console.log("\u62D6\u62FD\u624B\u67C4mousedown");
      if (e instanceof MouseEvent) {
        startDrag(e);
      }
    });
    module2.addEventListener("mousedown", (e) => {
      console.log("Module mousedown");
      if (e instanceof MouseEvent) {
        startDrag(e);
      }
    });
    console.log("\u6A21\u5757\u62D6\u62FD\u8BBE\u7F6E\u5B8C\u6210");
  }
  // 添加移动模块的方法
  moveModule(module2, direction) {
    console.log("\u79FB\u52A8\u6A21\u5757:", direction);
    const moduleId = module2.getAttribute("data-module-id");
    const moduleConfig = this.homeModules.find((m) => m.id === moduleId);
    if (!moduleConfig) {
      console.log("\u672A\u627E\u5230\u6A21\u5757\u914D\u7F6E");
      return;
    }
    const currentPosition = moduleConfig.position;
    const sameColumnModules = this.homeModules.filter((m) => m.position === currentPosition).sort((a, b) => a.order - b.order);
    console.log("\u540C\u5217\u6A21\u5757:", sameColumnModules);
    const currentIndex = sameColumnModules.indexOf(moduleConfig);
    if (currentIndex === -1) {
      console.log("\u672A\u627E\u5230\u5F53\u524D\u6A21\u5757\u7D22\u5F15");
      return;
    }
    const newIndex = direction === "up" ? currentIndex - 1 : currentIndex + 1;
    if (newIndex < 0 || newIndex >= sameColumnModules.length) {
      console.log("\u65B0\u7D22\u5F15\u8D85\u51FA\u8303\u56F4:", newIndex);
      return;
    }
    const targetModule = sameColumnModules[newIndex];
    console.log("\u4EA4\u6362\u987A\u5E8F:", {
      current: moduleConfig.order,
      target: targetModule.order
    });
    const tempOrder = moduleConfig.order;
    moduleConfig.order = targetModule.order;
    targetModule.order = tempOrder;
    this.saveModuleSettings();
    this.createHomeView().then(() => {
      const modules = this.container.querySelectorAll(".module-container");
      modules.forEach((m) => {
        if (m instanceof HTMLElement) {
          m.classList.add("editable");
          this.setupModuleDragging(m);
        }
      });
    });
  }
  // 更新模块位置
  updateModulePosition(module2, newPosition) {
    const moduleId = module2.getAttribute("data-module-id");
    const moduleConfig = this.homeModules.find((m) => m.id === moduleId);
    if (moduleConfig) {
      console.log("\u66F4\u65B0\u6A21\u5757\u4F4D\u7F6E:", {
        from: moduleConfig.position,
        to: newPosition
      });
      moduleConfig.position = newPosition;
      moduleConfig.columns = newPosition === "center" ? 2 : 1;
      const sameColumnModules = this.homeModules.filter((m) => m.position === newPosition).sort((a, b) => a.order - b.order);
      moduleConfig.order = sameColumnModules.length;
      this.saveModuleSettings();
      this.createHomeView().then(() => {
        const modules = this.container.querySelectorAll(".module-container");
        modules.forEach((m) => {
          if (m instanceof HTMLElement) {
            m.classList.add("editable");
            this.setupModuleDragging(m);
          }
        });
      });
    }
  }
  // 清理模块编辑
  cleanupModuleEditing(module2) {
    module2.querySelectorAll(".resize-handle").forEach((handle) => handle.remove());
    module2.style.transform = "";
    module2.style.zIndex = "";
    module2.style.opacity = "";
    module2.classList.remove("module-dragging");
    module2.style.border = "1px solid var(--background-modifier-border)";
  }
  // 模块-快速笔记
  async renderQuickNoteModule(container) {
    const quickNoteContainer = container.createDiv("quicknote-module");
    const inputContainer = quickNoteContainer.createDiv("quick-note-input-container");
    const titleInput = inputContainer.createEl("input", {
      cls: "quick-note-title",
      attr: {
        placeholder: "\u8F93\u5165\u7B14\u6807\u9898...",
        type: "text"
      }
    });
    const noteInput = inputContainer.createEl("textarea", {
      cls: "quick-note-input",
      attr: {
        placeholder: "\u8F93\u5165\u7B14\u8BB0\u5185\u5BB9\uFF0C\u6309 Enter \u53D1\u9001..."
      }
    });
    const tagsContainer = inputContainer.createDiv("tags-container");
    const tags = /* @__PURE__ */ new Set();
    const tagInput = tagsContainer.createEl("input", {
      cls: "tag-input",
      attr: {
        placeholder: "\u6DFB\u52A0\u6807\u7B7E..."
      }
    });
    const quickNoteToolbar = inputContainer.createDiv("quick-note-toolbar");
    const codeBtn = quickNoteToolbar.createEl("button", {
      cls: "quick-note-btn",
      attr: { "data-type": "code" }
    });
    codeBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="16 18 22 12 16 6"></polyline><polyline points="8 6 2 12 8 18"></polyline></svg>
            \u7801
        `;
    const imageBtn = quickNoteToolbar.createEl("button", {
      cls: "quick-note-btn",
      attr: { "data-type": "image" }
    });
    imageBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><circle cx="8.5" cy="8.5" r="1.5"></circle><polyline points="21 15 16 10 5 21"></polyline></svg>
            \u56FE\u7247
        `;
    const ideaBtn = quickNoteToolbar.createEl("button", {
      cls: "quick-note-btn",
      attr: { "data-type": "idea" }
    });
    ideaBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>
            \u7075\u611F
        `;
    const tagSuggestions = inputContainer.createDiv("tag-suggestions");
    this.setupQuickNoteEvents(noteInput, quickNoteToolbar, tagSuggestions);
    const sendButton = inputContainer.createEl("button", {
      cls: "quick-note-send",
      attr: {
        "title": "\u9001\u8BB0"
      }
    });
    sendButton.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="22" y1="2" x2="11" y2="13"></line><polygon points="22 2 15 22 11 13 2 9 22 2"></polygon></svg>
        `;
    sendButton.addEventListener("click", async (e) => {
      e.preventDefault();
      e.stopPropagation();
      const title = titleInput.value.trim();
      const content = noteInput.value.trim();
      if (!content) {
        new import_obsidian2.Notice("\u8BF7\u8F93\u5165\u7B14\u8BB0\u5185\u5BB9");
        return;
      }
      try {
        const tagItems = tagsContainer.querySelectorAll(".tag-item");
        const tagTexts = Array.from(tagItems).map((item) => {
          var _a, _b;
          return (_b = (_a = item.textContent) == null ? void 0 : _a.replace("\xD7", "").trim()) != null ? _b : "";
        });
        const tagsContent = tagTexts.map((tag) => `#${tag}`).join(" ");
        const finalContent = tagsContent ? `${tagsContent}

${content}` : content;
        const fileName = title || (/* @__PURE__ */ new Date()).toLocaleDateString("zh-CN", {
          year: "numeric",
          month: "2-digit",
          day: "2-digit"
        }).replace(/\//g, "-");
        const file = await this.createQuickNote(finalContent, [], fileName);
        if (file) {
          this.clearQuickNoteInputs(titleInput, noteInput, tags, tagsContainer, tagInput);
          new import_obsidian2.Notice("\u7B14\u8BB0\u521B\u5EFA\u6210\u529F");
        }
      } catch (error) {
        console.error("\u521B\u5EFA\u7B14\u8BB0\u5931\u8D25:", error);
        new import_obsidian2.Notice("\u521B\u5EFA\u7B14\u8BB0\u5931\u8D25");
      }
    });
  }
  // 模块-待办事项
  async renderTodoModule(container) {
    const todoContainer = container.createDiv("todo-module");
    const tabs = todoContainer.createDiv("todo-tabs");
    const allTab = tabs.createDiv("todo-tab active");
    allTab.setText("\u5168\u90E8");
    const pendingTab = tabs.createDiv("todo-tab");
    pendingTab.setText("\u5F85\u5B8C\u6210");
    const completedTab = tabs.createDiv("todo-tab");
    completedTab.setText("\u5DF2\u5B8C\u6210");
    const inputArea = todoContainer.createDiv("todo-input-area");
    const input = inputArea.createEl("input", {
      type: "text",
      placeholder: "\u6DFB\u52A0\u65B0\u7684\u5F85\u529E\u4E8B\u9879...",
      cls: "todo-input"
    });
    const dateInput = inputArea.createEl("input", {
      type: "date",
      cls: "todo-date-input"
    });
    const addButton = inputArea.createEl("button", {
      text: "\u6DFB\u52A0",
      cls: "todo-add-btn"
    });
    const todoList = todoContainer.createDiv("todo-list");
    const todos = await this.loadTodos();
    this.renderTodoList(todoList, todos, "all");
    addButton.addEventListener("click", async () => {
      const content = input.value.trim();
      const dueDate = dateInput.value;
      if (content) {
        const newTodo = {
          id: Date.now().toString(),
          content,
          completed: false,
          dueDate: dueDate || void 0,
          createdAt: (/* @__PURE__ */ new Date()).toISOString()
        };
        todos.push(newTodo);
        await this.saveTodos(todos);
        this.renderTodoList(todoList, todos, "all");
        input.value = "";
        dateInput.value = "";
      }
    });
    input.addEventListener("keypress", (e) => {
      if (e.key === "Enter") {
        addButton.click();
      }
    });
    allTab.addEventListener("click", () => {
      tabs.querySelectorAll(".todo-tab").forEach((tab) => tab.removeClass("active"));
      allTab.addClass("active");
      this.renderTodoList(todoList, todos, "all");
    });
    pendingTab.addEventListener("click", () => {
      tabs.querySelectorAll(".todo-tab").forEach((tab) => tab.removeClass("active"));
      pendingTab.addClass("active");
      this.renderTodoList(todoList, todos, "pending");
    });
    completedTab.addEventListener("click", () => {
      tabs.querySelectorAll(".todo-tab").forEach((tab) => tab.removeClass("active"));
      completedTab.addClass("active");
      this.renderTodoList(todoList, todos, "completed");
    });
  }
  // 加载待办事项
  async loadTodos() {
    try {
      const data = await this.plugin.loadData();
      return (data == null ? void 0 : data.todos) || [];
    } catch (error) {
      console.error("\u52A0\u8F7D\u5F85\u529E\u4E8B\u9879\u5931\u8D25:", error);
      return [];
    }
  }
  // 保存待办事项
  async saveTodos(todos) {
    try {
      const data = await this.plugin.loadData() || {};
      data.todos = todos;
      await this.plugin.saveData(data);
    } catch (error) {
      console.error("\u4FDD\u5B58\u5F85\u529E\u4E8B\u9879\u5931\u8D25:", error);
    }
  }
  // 渲染待办事项列表
  renderTodoList(container, todos, filter) {
    container.empty();
    const filteredTodos = todos.filter((todo) => {
      if (filter === "all") return true;
      if (filter === "pending") return !todo.completed;
      if (filter === "completed") return todo.completed;
      return true;
    });
    filteredTodos.forEach((todo) => {
      const todoItem = container.createDiv("todo-item");
      const checkbox = todoItem.createEl("input", {
        type: "checkbox",
        cls: "todo-checkbox"
      });
      checkbox.checked = todo.completed;
      const content = todoItem.createDiv("todo-content");
      content.setText(todo.content);
      if (todo.completed) {
        content.addClass("completed");
      }
      if (todo.dueDate) {
        const dueDate = todoItem.createDiv("todo-due-date");
        const date = new Date(todo.dueDate);
        dueDate.setText(date.toLocaleDateString());
        if (!todo.completed && date < /* @__PURE__ */ new Date()) {
          dueDate.addClass("overdue");
        }
      }
      const deleteBtn = todoItem.createDiv("todo-delete-btn");
      deleteBtn.setText("\xD7");
      checkbox.addEventListener("change", async () => {
        todo.completed = checkbox.checked;
        content.toggleClass("completed", todo.completed);
        await this.saveTodos(todos);
      });
      deleteBtn.addEventListener("click", async () => {
        const index = todos.findIndex((t) => t.id === todo.id);
        if (index !== -1) {
          todos.splice(index, 1);
          await this.saveTodos(todos);
          this.renderTodoList(container, todos, filter);
        }
      });
    });
  }
  // 在 CardView 类中添以下方法
  // 显示网格对齐指示器
  showGridSnapIndicator(module2, width) {
    let indicator = this.container.querySelector(".grid-snap-indicator");
    if (!indicator) {
      indicator = this.container.createDiv("grid-snap-indicator");
    }
    const rect = module2.getBoundingClientRect();
    if (indicator instanceof HTMLElement) {
      indicator.style.top = `${rect.top}px`;
      indicator.style.left = `${rect.left}px`;
      indicator.style.width = `${width}px`;
      indicator.style.height = `${rect.height}px`;
      indicator.style.display = "block";
    }
  }
  // 隐藏网格对齐指示器
  hideGridSnapIndicator() {
    const indicator = this.container.querySelector(".grid-snap-indicator");
    if (indicator instanceof HTMLElement) {
      indicator.style.display = "none";
    }
  }
};
var ModuleManagerModal = class extends import_obsidian2.Modal {
  constructor(app, modules, onSave) {
    super(app);
    this.modules = [...modules];
    this.onSave = onSave;
    this.previewContainer = createDiv();
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "\u7BA1\u7406\u4E3B\u9875\u6A21\u5757" });
    this.previewContainer = contentEl.createDiv("preview-container");
    this.updatePreview();
    const moduleList = contentEl.createDiv("module-list");
    this.modules.forEach((module2, index) => {
      const moduleItem = moduleList.createDiv("module-item");
      moduleItem.createDiv("drag-handle").innerHTML = "\u22EE\u22EE";
      const visibilityToggle = moduleItem.createEl("input", {
        type: "checkbox",
        attr: { checked: module2.visible }
      });
      visibilityToggle.addEventListener("change", () => {
        this.modules[index].visible = visibilityToggle.checked;
      });
      moduleItem.createEl("span", { text: module2.name });
      const moveUp = moduleItem.createEl("button", { text: "\u2191" });
      const moveDown = moduleItem.createEl("button", { text: "\u2193" });
      moveUp.addEventListener("click", () => this.moveModule(index, -1));
      moveDown.addEventListener("click", () => this.moveModule(index, 1));
    });
    const saveBtn = contentEl.createEl("button", {
      text: "\u4FDD\u5B58",
      cls: "mod-cta"
    });
    saveBtn.addEventListener("click", () => {
      this.onSave(this.modules);
      this.close();
    });
  }
  // 移动模块
  moveModule(index, direction) {
    const newIndex = index + direction;
    if (newIndex >= 0 && newIndex < this.modules.length) {
      const temp = this.modules[index];
      this.modules[index] = this.modules[newIndex];
      this.modules[newIndex] = temp;
      this.modules.forEach((m, i) => m.order = i);
      this.onOpen();
    }
  }
  // 添加预览更新方法
  updatePreview() {
    this.previewContainer.empty();
    const previewGrid = this.previewContainer.createDiv("module-grid");
    this.modules.filter((m) => m.visible).sort((a, b) => a.order - b.order).forEach((module2) => {
      const modulePreview = previewGrid.createDiv("module-preview");
      modulePreview.style.gridColumn = `span ${module2.columns || 4}`;
      modulePreview.createEl("h4", { text: module2.name });
    });
  }
};
var DEFAULT_HOME_MODULES = [
  {
    id: "quicknote",
    name: "\u5FEB\u901F\u7B14\u8BB0",
    type: "quicknote",
    visible: true,
    order: 0,
    columns: 2,
    position: "center"
  },
  {
    id: "heatmap",
    name: "\u6D3B\u52A8\u70ED\u529B\u56FE",
    type: "heatmap",
    visible: true,
    order: 1,
    columns: 1,
    position: "left"
  },
  {
    id: "stats",
    name: "\u7B14\u8BB0\u7EDF\u8BA1",
    type: "stats",
    visible: true,
    order: 2,
    columns: 1,
    position: "right"
  },
  {
    id: "weekly",
    name: "\u672C\u5468\u7B14\u8BB0",
    type: "weekly",
    visible: true,
    order: 3,
    columns: 1,
    position: "left"
  },
  {
    id: "calendar",
    name: "\u65E5\u5386",
    type: "calendar",
    visible: true,
    order: 4,
    columns: 2,
    position: "center"
  },
  {
    id: "todo",
    name: "\u5F85\u529E\u4E8B\u9879",
    type: "todo",
    visible: true,
    order: 5,
    columns: 1,
    position: "right"
  }
];

// main.ts
var DEFAULT_SETTINGS = {
  defaultView: "home",
  cardWidth: 280,
  minCardWidth: 280,
  maxCardWidth: 600,
  showTagCount: false,
  cardHeight: 280,
  minCardHeight: 200,
  maxCardHeight: 800,
  homeModules: []
};
var CardViewSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian3.Setting(containerEl).setName("\u9ED8\u8BA4\u89C6\u56FE").setDesc("\u9009\u62E9\u9ED8\u8BA4\u7684\u89C6\u56FE\u6A21\u5F0F").addDropdown((dropdown) => {
      dropdown.addOption("home", "\u4E3B\u9875\u89C6\u56FE").addOption("card", "\u5361\u7247\u89C6\u56FE").addOption("list", "\u5217\u8868\u89C6\u56FE").addOption("timeline", "\u65F6\u95F4\u8F74\u89C6\u56FE").addOption("month", "\u6708\u89C6\u56FE").addOption("week", "\u5468\u89C6\u56FE").setValue(this.plugin.settings.defaultView);
      dropdown.onChange(async (value) => {
        if (value === "home" || value === "card" || value === "list" || value === "timeline" || value === "month" || value === "week") {
          this.plugin.settings.defaultView = value;
          await this.plugin.saveSettings();
        }
      });
    });
    new import_obsidian3.Setting(containerEl).setName("\u5361\u7247\u5BBD\u5EA6").setDesc("\u8BBE\u7F6E\u5361\u7247\u7684\u5BBD\u5EA6\uFF08280-600\u50CF\u7D20\uFF09").addText((text) => text.setPlaceholder("280").setValue(this.plugin.settings.cardWidth.toString()).onChange(async (value) => {
      const width = Number(value);
      if (!isNaN(width) && width >= 280 && width <= 600) {
        this.plugin.settings.cardWidth = width;
        await this.plugin.saveSettings();
        this.plugin.updateAllCardViews();
      }
    }));
    new import_obsidian3.Setting(containerEl).setName("\u6700\u5C0F\u5BBD\u5EA6").setDesc("\u8BBE\u7F6E\u5361\u7247\u7684\u6700\u5C0F\u5BBD\u5EA6\uFF08\u50CF\u7D20\uFF09").addText((text) => text.setPlaceholder("280").setValue(this.plugin.settings.minCardWidth.toString()).onChange(async (value) => {
      const width = Number(value);
      if (!isNaN(width) && width >= 200) {
        this.plugin.settings.minCardWidth = width;
        await this.plugin.saveSettings();
      }
    }));
    new import_obsidian3.Setting(containerEl).setName("\u6700\u5927\u5BBD\u5EA6").setDesc("\u8BBE\u7F6E\u5361\u7247\u7684\u6700\u5927\u5BBD\u5EA6\uFF08\u50CF\u7D20\uFF09").addText((text) => text.setPlaceholder("600").setValue(this.plugin.settings.maxCardWidth.toString()).onChange(async (value) => {
      const width = Number(value);
      if (!isNaN(width) && width <= 800) {
        this.plugin.settings.maxCardWidth = width;
        await this.plugin.saveSettings();
      }
    }));
    new import_obsidian3.Setting(containerEl).setName("\u663E\u793A\u6807\u7B7E\u5F15\u7528\u6570\u91CF").setDesc("\u5728\u6807\u7B7E\u540E\u663E\u793A\u4F7F\u7528\u8BE5\u6807\u7B7E\u7684\u7B14\u8BB0\u6570\u91CF").addToggle((toggle) => toggle.setValue(this.plugin.settings.showTagCount).onChange(async (value) => {
      this.plugin.settings.showTagCount = value;
      await this.plugin.saveSettings();
      this.plugin.refreshAllTags();
    }));
    new import_obsidian3.Setting(containerEl).setName("\u5361\u7247\u9AD8\u5EA6").setDesc("\u8BBE\u7F6E\u5361\u7247\u7684\u9AD8\u5EA6\uFF08200-800\u50CF\u7D20\uFF09").addText((text) => text.setPlaceholder("280").setValue(this.plugin.settings.cardHeight.toString()).onChange(async (value) => {
      const height = Number(value);
      if (!isNaN(height) && height >= 200 && height <= 800) {
        this.plugin.settings.cardHeight = height;
        await this.plugin.saveSettings();
        this.plugin.updateAllCardViews();
      }
    }));
    new import_obsidian3.Setting(containerEl).setName("\u6700\u5C0F\u9AD8\u5EA6").setDesc("\u8BBE\u7F6E\u5361\u7247\u7684\u6700\u5C0F\u9AD8\u5EA6\uFF08\u50CF\u7D20\uFF09").addText((text) => text.setPlaceholder("200").setValue(this.plugin.settings.minCardHeight.toString()).onChange(async (value) => {
      const height = Number(value);
      if (!isNaN(height) && height >= 200) {
        this.plugin.settings.minCardHeight = height;
        await this.plugin.saveSettings();
      }
    }));
    new import_obsidian3.Setting(containerEl).setName("\u6700\u5927\u9AD8\u5EA6").setDesc("\u8BBE\u7F6E\u5361\u7247\u7684\u6700\u5927\u9AD8\u5EA6\uFF08\u50CF\u7D20\uFF09").addText((text) => text.setPlaceholder("800").setValue(this.plugin.settings.maxCardHeight.toString()).onChange(async (value) => {
      const height = Number(value);
      if (!isNaN(height) && height <= 800) {
        this.plugin.settings.maxCardHeight = height;
        await this.plugin.saveSettings();
      }
    }));
  }
};
var CardViewPlugin = class extends import_obsidian3.Plugin {
  constructor(app, manifest) {
    super(app, manifest);
    this.settings = DEFAULT_SETTINGS;
  }
  async onload() {
    await this.loadSettings();
    this.registerView(
      VIEW_TYPE_CARD,
      (leaf) => new CardView(leaf, this)
    );
    this.addRibbonIcon("layout-grid", "\u5361\u7247\u89C6\u56FE", () => {
      this.activateView();
    });
    this.addSettingTab(new CardViewSettingTab(this.app, this));
    this.app.workspace.on("file-open", (file) => {
      if (file) {
        this.handleFileOpen(file);
      }
    });
  }
  handleFileOpen(file) {
    console.log(`\u6587\u4EF6 ${file.path} \u88AB1\u6253\u5F00`);
  }
  handleFolderOpen(folder) {
    console.log(`\u6587\u4EF6\u5939 ${folder} \u88AB\u6253\u5F00`);
  }
  async loadSettings() {
    var _a;
    const savedData = await this.loadData();
    this.settings = {
      ...DEFAULT_SETTINGS,
      ...savedData,
      // 确保 homeModules 有正确的默认值
      homeModules: ((_a = savedData == null ? void 0 : savedData.homeModules) == null ? void 0 : _a.length) > 0 ? savedData.homeModules : DEFAULT_HOME_MODULES.map((module2) => ({
        ...module2,
        visible: true,
        // 确保所有模块默认可见
        position: module2.position || "left"
        // 确保有位置属性
      }))
    };
    if (this.settings.homeModules.length > 0) {
      const existingModuleIds = new Set(this.settings.homeModules.map((m) => m.id));
      const newModules = DEFAULT_HOME_MODULES.filter((m) => !existingModuleIds.has(m.id));
      if (newModules.length > 0) {
        this.settings.homeModules = [
          ...this.settings.homeModules,
          ...newModules.map((m) => ({
            ...m,
            visible: true,
            position: m.position || "left",
            order: this.settings.homeModules.length + m.order
          }))
        ];
      }
    }
    await this.saveSettings();
    console.log("Loaded settings:", this.settings);
    console.log("Home modules:", this.settings.homeModules);
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf = workspace.getLeavesOfType(VIEW_TYPE_CARD)[0];
    if (!leaf) {
      leaf = workspace.getLeaf("tab");
      await leaf.setViewState({
        type: VIEW_TYPE_CARD,
        active: true
      });
    }
    workspace.revealLeaf(leaf);
    if (leaf.view instanceof CardView) {
      leaf.view.switchView(this.settings.defaultView);
    }
  }
  updateAllCardViews() {
    this.app.workspace.getLeavesOfType(VIEW_TYPE_CARD).forEach((leaf) => {
      const view = leaf.view;
      if (view) {
        view.updateCardSize(this.settings.cardWidth);
      }
    });
  }
  async saveCardWidth(width) {
    this.settings.cardWidth = width;
    await this.saveSettings();
  }
  refreshAllTags() {
    this.app.workspace.getLeavesOfType(VIEW_TYPE_CARD).forEach((leaf) => {
      const view = leaf.view;
      if (view) {
        view.refreshTags();
      }
    });
  }
  async saveCardHeight(height) {
    this.settings.cardHeight = height;
    await this.saveSettings();
  }
  async saveHomeModules(modules) {
    this.settings.homeModules = modules;
    await this.saveSettings();
  }
};
//# sourceMappingURL=main.js.map
