/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// main.ts
__export(exports, {
  default: () => CardViewPlugin
});
var import_obsidian2 = __toModule(require("obsidian"));

// cardView.ts
var import_obsidian = __toModule(require("obsidian"));
var VIEW_TYPE_CARD = "card-view";
var CardView = class extends import_obsidian.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.isPreviewCollapsed = false;
    this.currentFolder = null;
    this.plugin = plugin;
    this.currentView = plugin.settings.defaultView;
  }
  getViewType() {
    return VIEW_TYPE_CARD;
  }
  getDisplayText() {
    return "\u5361\u7247\u89C6\u56FE";
  }
  async onOpen() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.addClass("card-view-container");
    const toolbar = containerEl.createDiv("card-view-toolbar");
    const leftTools = toolbar.createDiv("toolbar-left");
    const newNoteBtn = leftTools.createEl("button", {
      cls: "new-note-button"
    });
    newNoteBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-plus"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>
            <span>\u65B0\u5EFA\u7B14\u8BB0</span>
        `;
    newNoteBtn.addEventListener("click", () => this.createNewNote());
    const viewSwitcher = leftTools.createDiv("view-switcher");
    this.createViewSwitcher(viewSwitcher);
    this.tagContainer = toolbar.createDiv("tag-filter");
    await this.loadTags();
    const contentArea = containerEl.createDiv("card-view-content");
    this.container = contentArea.createDiv("card-container");
    const previewWrapper = containerEl.createDiv("preview-wrapper");
    this.previewContainer = previewWrapper.createDiv("preview-container");
    const previewControls = previewWrapper.createDiv("preview-controls");
    const toggleButton = previewControls.createEl("button", {
      cls: "preview-toggle",
      attr: { "aria-label": "\u6298\u53E0\u9884\u89C8" }
    });
    toggleButton.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-right"><polyline points="9 18 15 12 9 6"></polyline></svg>`;
    toggleButton.addEventListener("click", () => this.togglePreview());
    this.previewResizer = previewWrapper.createDiv("preview-resizer");
    this.setupResizer();
    await this.loadNotes();
  }
  async loadTags() {
    const tags = this.getAllTags();
    tags.forEach((tag) => {
      const tagEl = this.tagContainer.createEl("button", { text: tag });
      tagEl.addEventListener("click", () => this.filterByTag(tag));
    });
  }
  getAllTags() {
    const tags = new Set();
    this.app.vault.getMarkdownFiles().forEach((file) => {
      const cache = this.app.metadataCache.getFileCache(file);
      if (cache == null ? void 0 : cache.tags) {
        cache.tags.forEach((tag) => tags.add(tag.tag));
      }
    });
    return Array.from(tags);
  }
  createViewSwitcher(container) {
    const views = [
      { id: "card", icon: "grid-2x2", text: "\u5361\u7247\u89C6\u56FE" },
      { id: "list", icon: "list", text: "\u5217\u8868\u89C6\u56FE" },
      { id: "timeline", icon: "clock", text: "\u65F6\u95F4\u8F74\u89C6\u56FE" }
    ];
    views.forEach((view) => {
      const btn = container.createEl("button", {
        cls: `view-switch-btn ${view.id === this.currentView ? "active" : ""}`,
        attr: { "aria-label": view.text }
      });
      btn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide ${view.icon}"></svg>`;
      btn.addEventListener("click", () => {
        container.querySelectorAll(".view-switch-btn").forEach((b) => b.removeClass("active"));
        btn.addClass("active");
        this.switchView(view.id);
      });
    });
  }
  async loadNotes() {
    const files = this.app.vault.getMarkdownFiles();
    this.container.empty();
    files.forEach((file) => {
      const card = this.createNoteCard(file);
      this.container.appendChild(card);
    });
  }
  createNoteCard(file) {
    const card = document.createElement("div");
    card.addClass("note-card");
    const title = card.createDiv("note-title");
    title.setText(file.basename);
    const lastModified = card.createDiv("note-date");
    lastModified.setText(new Date(file.stat.mtime).toLocaleDateString());
    const folderPath = card.createDiv("note-folder");
    const folder = file.parent.path === "/" ? "\u6839\u76EE\u5F55" : file.parent.path;
    folderPath.setText(folder);
    folderPath.setAttribute("title", folder);
    folderPath.addEventListener("click", (e) => {
      e.stopPropagation();
      this.highlightFolder(folder);
      this.revealFolderInExplorer(folder);
    });
    const cache = this.app.metadataCache.getFileCache(file);
    if (cache == null ? void 0 : cache.tags) {
      const tagContainer = card.createDiv("note-tags");
      cache.tags.forEach((tag) => {
        const tagEl = tagContainer.createEl("span", {
          text: tag.tag,
          cls: "note-tag"
        });
      });
    }
    card.addEventListener("click", async () => {
      const leaf = this.app.workspace.getLeaf("tab");
      await leaf.openFile(file);
    });
    card.addEventListener("mouseenter", async () => {
      try {
        this.previewContainer.empty();
        const content = await this.app.vault.read(file);
        await import_obsidian.MarkdownRenderer.renderMarkdown(content, this.previewContainer, file.path, this);
      } catch (error) {
        console.error("\u9884\u89C8\u52A0\u8F7D\u5931\u8D25:", error);
        this.previewContainer.setText("\u9884\u89C8\u52A0\u8F7D\u5931\u8D25");
      }
    });
    return card;
  }
  switchView(view) {
    this.currentView = view;
    this.container.setAttribute("data-view", view);
    this.loadNotes();
  }
  filterByTag(tag) {
    const files = this.app.vault.getMarkdownFiles();
    this.container.empty();
    files.forEach((file) => {
      const cache = this.app.metadataCache.getFileCache(file);
      if ((cache == null ? void 0 : cache.tags) && cache.tags.some((t) => t.tag === tag)) {
        const card = this.createNoteCard(file);
        this.container.appendChild(card);
      }
    });
    this.tagContainer.querySelectorAll("button").forEach((btn) => {
      if (btn.textContent === tag) {
        btn.addClass("active-tag");
      } else {
        btn.removeClass("active-tag");
      }
    });
  }
  setupResizer() {
    let startX;
    let startWidth;
    const startResize = (e) => {
      startX = e.pageX;
      startWidth = parseInt(getComputedStyle(this.previewContainer).width, 10);
      document.addEventListener("mousemove", resize);
      document.addEventListener("mouseup", stopResize);
    };
    const resize = (e) => {
      const width = startWidth - (e.pageX - startX);
      if (width >= 50) {
        this.previewContainer.style.width = `${width}px`;
        if (this.isPreviewCollapsed) {
          this.isPreviewCollapsed = false;
          this.previewContainer.removeClass("collapsed");
        }
      } else if (!this.isPreviewCollapsed) {
        this.isPreviewCollapsed = true;
        this.previewContainer.addClass("collapsed");
      }
    };
    const stopResize = () => {
      document.removeEventListener("mousemove", resize);
      document.removeEventListener("mouseup", stopResize);
    };
    this.previewResizer.addEventListener("mousedown", startResize);
  }
  togglePreview() {
    this.isPreviewCollapsed = !this.isPreviewCollapsed;
    this.previewContainer.toggleClass("collapsed");
  }
  highlightFolder(folder) {
    this.currentFolder = this.currentFolder === folder ? null : folder;
    this.container.querySelectorAll(".note-card").forEach((card) => {
      const cardFolder = card.querySelector(".note-folder").textContent;
      card.toggleClass("folder-highlight", cardFolder === folder);
    });
  }
  async revealFolderInExplorer(folder) {
    const fileExplorer = this.app.workspace.getLeavesOfType("file-explorer")[0];
    if (fileExplorer) {
      const fileExplorerView = fileExplorer.view;
      if (folder === "\u6839\u76EE\u5F55") {
        if (fileExplorerView.expandFolder) {
          await fileExplorerView.expandFolder("/");
        }
        return;
      }
      if (fileExplorerView.expandFolder) {
        const folderParts = folder.split("/");
        let currentPath = "";
        for (const part of folderParts) {
          currentPath += (currentPath ? "/" : "") + part;
          await fileExplorerView.expandFolder(currentPath);
        }
        if (fileExplorerView.setSelection) {
          await fileExplorerView.setSelection(folder);
        }
      }
    }
  }
  async createNewNote() {
    const date = new Date();
    const fileName = `\u672A\u547D\u540D\u7B14\u8BB0 ${date.toLocaleString().replace(/[/:]/g, "-")}`;
    try {
      const file = await this.app.vault.create(`${fileName}.md`, "# " + fileName + "\n\n");
      const leaf = this.app.workspace.getLeaf("tab");
      await leaf.openFile(file);
      this.loadNotes();
    } catch (error) {
      console.error("\u521B\u5EFA\u7B14\u8BB0\u5931\u8D25:", error);
    }
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  defaultView: "card"
};
var CardViewSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian2.Setting(containerEl).setName("\u9ED8\u8BA4\u89C6\u56FE").setDesc("\u9009\u62E9\u9ED8\u8BA4\u7684\u89C6\u56FE\u6A21\u5F0F").addDropdown((dropdown) => dropdown.addOption("card", "\u5361\u7247\u89C6\u56FE1").addOption("list", "\u5217\u8868\u89C6\u56FE").addOption("timeline", "\u65F6\u95F4\u8F74\u89C6\u56FE").setValue(this.plugin.settings.defaultView).onChange(async (value) => {
      this.plugin.settings.defaultView = value;
      await this.plugin.saveSettings();
    }));
  }
};
var CardViewPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView(VIEW_TYPE_CARD, (leaf) => new CardView(leaf, this));
    this.addRibbonIcon("layout-grid", "\u5361\u7247\u89C6\u56FE", () => {
      this.activateView();
    });
    this.addSettingTab(new CardViewSettingTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf = workspace.getLeavesOfType(VIEW_TYPE_CARD)[0];
    if (!leaf) {
      leaf = workspace.getLeaf("tab");
      await leaf.setViewState({
        type: VIEW_TYPE_CARD,
        active: true
      });
    }
    workspace.revealLeaf(leaf);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJjYXJkVmlldy50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBQbHVnaW4sIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcsIFRGaWxlLCBXb3Jrc3BhY2VMZWFmIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgeyBDYXJkVmlldywgVklFV19UWVBFX0NBUkQgfSBmcm9tICcuL2NhcmRWaWV3JztcclxuXHJcbmludGVyZmFjZSBDYXJkVmlld1BsdWdpblNldHRpbmdzIHtcclxuICAgIGRlZmF1bHRWaWV3OiAnY2FyZCcgfCAnbGlzdCcgfCAndGltZWxpbmUnO1xyXG59XHJcblxyXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBDYXJkVmlld1BsdWdpblNldHRpbmdzID0ge1xyXG4gICAgZGVmYXVsdFZpZXc6ICdjYXJkJ1xyXG59XHJcblxyXG4vLyBcdTZERkJcdTUyQTBcdThCQkVcdTdGNkVcdTkwMDlcdTk4NzlcdTUzNjFcdTdDN0JcclxuY2xhc3MgQ2FyZFZpZXdTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XHJcbiAgICBwbHVnaW46IENhcmRWaWV3UGx1Z2luO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IENhcmRWaWV3UGx1Z2luKSB7XHJcbiAgICAgICAgc3VwZXIoYXBwLCBwbHVnaW4pO1xyXG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG4gICAgfVxyXG5cclxuICAgIGRpc3BsYXkoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgeyBjb250YWluZXJFbCB9ID0gdGhpcztcclxuICAgICAgICBjb250YWluZXJFbC5lbXB0eSgpO1xyXG5cclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoJ1x1OUVEOFx1OEJBNFx1ODlDNlx1NTZGRScpXHJcbiAgICAgICAgICAgIC5zZXREZXNjKCdcdTkwMDlcdTYyRTlcdTlFRDhcdThCQTRcdTc2ODRcdTg5QzZcdTU2RkVcdTZBMjFcdTVGMEYnKVxyXG4gICAgICAgICAgICAuYWRkRHJvcGRvd24oZHJvcGRvd24gPT4gXHJcbiAgICAgICAgICAgICAgICBkcm9wZG93blxyXG4gICAgICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oJ2NhcmQnLCAnXHU1MzYxXHU3MjQ3XHU4OUM2XHU1NkZFMScpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbignbGlzdCcsICdcdTUyMTdcdTg4NjhcdTg5QzZcdTU2RkUnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oJ3RpbWVsaW5lJywgJ1x1NjVGNlx1OTVGNFx1OEY3NFx1ODlDNlx1NTZGRScpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmRlZmF1bHRWaWV3KVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWU6ICdjYXJkJyB8ICdsaXN0JyB8ICd0aW1lbGluZScpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVmYXVsdFZpZXcgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FyZFZpZXdQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xyXG4gICAgc2V0dGluZ3M6IENhcmRWaWV3UGx1Z2luU2V0dGluZ3M7XHJcblxyXG4gICAgYXN5bmMgb25sb2FkKCkge1xyXG4gICAgICAgIGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XHJcblxyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJWaWV3KFxyXG4gICAgICAgICAgICBWSUVXX1RZUEVfQ0FSRCxcclxuICAgICAgICAgICAgKGxlYWY6IFdvcmtzcGFjZUxlYWYpID0+IG5ldyBDYXJkVmlldyhsZWFmLCB0aGlzKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkUmliYm9uSWNvbignbGF5b3V0LWdyaWQnLCAnXHU1MzYxXHU3MjQ3XHU4OUM2XHU1NkZFJywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2YXRlVmlldygpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmFkZFNldHRpbmdUYWIobmV3IENhcmRWaWV3U2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcclxuICAgICAgICB0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBzYXZlU2V0dGluZ3MoKSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBhY3RpdmF0ZVZpZXcoKSB7XHJcbiAgICAgICAgY29uc3QgeyB3b3Jrc3BhY2UgfSA9IHRoaXMuYXBwO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBsZWFmID0gd29ya3NwYWNlLmdldExlYXZlc09mVHlwZShWSUVXX1RZUEVfQ0FSRClbMF07XHJcbiAgICAgICAgaWYgKCFsZWFmKSB7XHJcbiAgICAgICAgICAgIC8vIFx1NEZFRVx1NjUzOVx1OEZEOVx1OTFDQ1x1RkYwQ1x1NEY3Rlx1NzUyOCBnZXRMZWFmIFx1NTIxQlx1NUVGQVx1NjVCMFx1NjgwN1x1N0I3RVx1OTg3NVxyXG4gICAgICAgICAgICBsZWFmID0gd29ya3NwYWNlLmdldExlYWYoJ3RhYicpO1xyXG4gICAgICAgICAgICBhd2FpdCBsZWFmLnNldFZpZXdTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBWSUVXX1RZUEVfQ0FSRCxcclxuICAgICAgICAgICAgICAgIGFjdGl2ZTogdHJ1ZSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdvcmtzcGFjZS5yZXZlYWxMZWFmKGxlYWYpO1xyXG4gICAgfVxyXG59ICIsICJpbXBvcnQgeyBJdGVtVmlldywgV29ya3NwYWNlTGVhZiwgVEZpbGUsIE1hcmtkb3duUmVuZGVyZXIgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCBDYXJkVmlld1BsdWdpbiBmcm9tICcuL21haW4nO1xyXG5cclxuZXhwb3J0IGNvbnN0IFZJRVdfVFlQRV9DQVJEID0gJ2NhcmQtdmlldyc7XHJcblxyXG5leHBvcnQgY2xhc3MgQ2FyZFZpZXcgZXh0ZW5kcyBJdGVtVmlldyB7XHJcbiAgICBwcml2YXRlIHBsdWdpbjogQ2FyZFZpZXdQbHVnaW47XHJcbiAgICBwcml2YXRlIGN1cnJlbnRWaWV3OiAnY2FyZCcgfCAnbGlzdCcgfCAndGltZWxpbmUnO1xyXG4gICAgcHJpdmF0ZSBjb250YWluZXI6IEhUTUxFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSB0YWdDb250YWluZXI6IEhUTUxFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBjb250ZW50Q29udGFpbmVyOiBIVE1MRWxlbWVudDtcclxuICAgIHByaXZhdGUgcHJldmlld0NvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XHJcbiAgICBwcml2YXRlIHByZXZpZXdSZXNpemVyOiBIVE1MRWxlbWVudDtcclxuICAgIHByaXZhdGUgaXNQcmV2aWV3Q29sbGFwc2VkOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIGN1cnJlbnRGb2xkZXI6IHN0cmluZyB8IG51bGwgPSBudWxsO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU2Nzg0XHU5MDIwXHU1MUZEXHU2NTcwXHJcbiAgICAgKiBAcGFyYW0gbGVhZiAtIFx1NURFNVx1NEY1Q1x1NTMzQVx1NTNGNlx1NUI1MFx1ODI4Mlx1NzBCOVxyXG4gICAgICogQHBhcmFtIHBsdWdpbiAtIFx1NjNEMlx1NEVGNlx1NUI5RVx1NEY4QlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihsZWFmOiBXb3Jrc3BhY2VMZWFmLCBwbHVnaW46IENhcmRWaWV3UGx1Z2luKSB7XHJcbiAgICAgICAgc3VwZXIobGVhZik7XHJcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XHJcbiAgICAgICAgdGhpcy5jdXJyZW50VmlldyA9IHBsdWdpbi5zZXR0aW5ncy5kZWZhdWx0VmlldztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1ODNCN1x1NTNENlx1ODlDNlx1NTZGRVx1N0M3Qlx1NTc4QlxyXG4gICAgICogQHJldHVybnMgXHU4OUM2XHU1NkZFXHU3QzdCXHU1NzhCXHU2ODA3XHU4QkM2XHU3QjI2XHJcbiAgICAgKi9cclxuICAgIGdldFZpZXdUeXBlKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIFZJRVdfVFlQRV9DQVJEO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU4M0I3XHU1M0Q2XHU4OUM2XHU1NkZFXHU2NjNFXHU3OTNBXHU2NTg3XHU2NzJDXHJcbiAgICAgKiBAcmV0dXJucyBcdTY2M0VcdTc5M0FcdTU3MjhcdTY4MDdcdTdCN0VcdTk4NzVcdTRFMEFcdTc2ODRcdTY1ODdcdTY3MkNcclxuICAgICAqL1xyXG4gICAgZ2V0RGlzcGxheVRleHQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gJ1x1NTM2MVx1NzI0N1x1ODlDNlx1NTZGRSc7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTg5QzZcdTU2RkVcdTYyNTNcdTVGMDBcdTY1RjZcdTc2ODRcdTUyMURcdTU5Q0JcdTUzMTZcdTUxRkRcdTY1NzBcclxuICAgICAqIFx1NTIxQlx1NUVGQVx1NjgwN1x1N0I3RVx1OEZDN1x1NkVFNFx1NTY2OFx1MzAwMVx1ODlDNlx1NTZGRVx1NTIwN1x1NjM2Mlx1NjMwOVx1OTRBRVx1NTQ4Q1x1NUJCOVx1NTY2OFxyXG4gICAgICovXHJcbiAgICBhc3luYyBvbk9wZW4oKSB7XHJcbiAgICAgICAgY29uc3QgeyBjb250YWluZXJFbCB9ID0gdGhpcztcclxuICAgICAgICBjb250YWluZXJFbC5lbXB0eSgpO1xyXG4gICAgICAgIGNvbnRhaW5lckVsLmFkZENsYXNzKCdjYXJkLXZpZXctY29udGFpbmVyJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU1MjFCXHU1RUZBXHU1REU1XHU1MTc3XHU2ODBGXHJcbiAgICAgICAgY29uc3QgdG9vbGJhciA9IGNvbnRhaW5lckVsLmNyZWF0ZURpdignY2FyZC12aWV3LXRvb2xiYXInKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTUyMUJcdTVFRkFcdTVERTVcdTUxNzdcdTY4MEZcdTVERTZcdTRGQTdcdTUzM0FcdTU3REZcclxuICAgICAgICBjb25zdCBsZWZ0VG9vbHMgPSB0b29sYmFyLmNyZWF0ZURpdigndG9vbGJhci1sZWZ0Jyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU2NUIwXHU1RUZBXHU3QjE0XHU4QkIwXHU2MzA5XHU5NEFFXHJcbiAgICAgICAgY29uc3QgbmV3Tm90ZUJ0biA9IGxlZnRUb29scy5jcmVhdGVFbCgnYnV0dG9uJywge1xyXG4gICAgICAgICAgICBjbHM6ICduZXctbm90ZS1idXR0b24nLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIFx1NkRGQlx1NTJBMFx1NjVCMFx1NUVGQVx1N0IxNFx1OEJCMFx1NjMwOVx1OTRBRVx1NzY4NFx1NTZGRVx1NjgwN1x1NTQ4Q1x1NjU4N1x1NjcyQ1xyXG4gICAgICAgIG5ld05vdGVCdG4uaW5uZXJIVE1MID0gYFxyXG4gICAgICAgICAgICA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjE2XCIgaGVpZ2h0PVwiMTZcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgY2xhc3M9XCJsdWNpZGUgbHVjaWRlLXBsdXNcIj48bGluZSB4MT1cIjEyXCIgeTE9XCI1XCIgeDI9XCIxMlwiIHkyPVwiMTlcIj48L2xpbmU+PGxpbmUgeDE9XCI1XCIgeTE9XCIxMlwiIHgyPVwiMTlcIiB5Mj1cIjEyXCI+PC9saW5lPjwvc3ZnPlxyXG4gICAgICAgICAgICA8c3Bhbj5cdTY1QjBcdTVFRkFcdTdCMTRcdThCQjA8L3NwYW4+XHJcbiAgICAgICAgYDtcclxuICAgICAgICBuZXdOb3RlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5jcmVhdGVOZXdOb3RlKCkpO1xyXG5cclxuICAgICAgICAvLyBcdTg5QzZcdTU2RkVcdTUyMDdcdTYzNjJcdTYzMDlcdTk0QUVcdTdFQzRcclxuICAgICAgICBjb25zdCB2aWV3U3dpdGNoZXIgPSBsZWZ0VG9vbHMuY3JlYXRlRGl2KCd2aWV3LXN3aXRjaGVyJyk7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVWaWV3U3dpdGNoZXIodmlld1N3aXRjaGVyKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTUyMUJcdTVFRkFcdTVERTVcdTUxNzdcdTY4MEZcdTUzRjNcdTRGQTdcdTUzM0FcdTU3REZcdUZGMDhcdTY4MDdcdTdCN0VcdThGQzdcdTZFRTRcdTU2NjhcdUZGMDlcclxuICAgICAgICB0aGlzLnRhZ0NvbnRhaW5lciA9IHRvb2xiYXIuY3JlYXRlRGl2KCd0YWctZmlsdGVyJyk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkVGFncygpO1xyXG5cclxuICAgICAgICAvLyBcdTUyMUJcdTVFRkFcdTRFM0JcdTUxODVcdTVCQjlcdTUzM0FcdTU3REZcclxuICAgICAgICBjb25zdCBjb250ZW50QXJlYSA9IGNvbnRhaW5lckVsLmNyZWF0ZURpdignY2FyZC12aWV3LWNvbnRlbnQnKTtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRlbnRBcmVhLmNyZWF0ZURpdignY2FyZC1jb250YWluZXInKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTUyMUJcdTVFRkFcdTk4ODRcdTg5QzhcdTUzM0FcdTU3REZcclxuICAgICAgICBjb25zdCBwcmV2aWV3V3JhcHBlciA9IGNvbnRhaW5lckVsLmNyZWF0ZURpdigncHJldmlldy13cmFwcGVyJyk7XHJcbiAgICAgICAgdGhpcy5wcmV2aWV3Q29udGFpbmVyID0gcHJldmlld1dyYXBwZXIuY3JlYXRlRGl2KCdwcmV2aWV3LWNvbnRhaW5lcicpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1OTg4NFx1ODlDOFx1NjNBN1x1NTIzNlx1NjMwOVx1OTRBRVxyXG4gICAgICAgIGNvbnN0IHByZXZpZXdDb250cm9scyA9IHByZXZpZXdXcmFwcGVyLmNyZWF0ZURpdigncHJldmlldy1jb250cm9scycpO1xyXG4gICAgICAgIGNvbnN0IHRvZ2dsZUJ1dHRvbiA9IHByZXZpZXdDb250cm9scy5jcmVhdGVFbCgnYnV0dG9uJywge1xyXG4gICAgICAgICAgICBjbHM6ICdwcmV2aWV3LXRvZ2dsZScsXHJcbiAgICAgICAgICAgIGF0dHI6IHsgJ2FyaWEtbGFiZWwnOiAnXHU2Mjk4XHU1M0UwXHU5ODg0XHU4OUM4JyB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdG9nZ2xlQnV0dG9uLmlubmVySFRNTCA9IGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgY2xhc3M9XCJmZWF0aGVyIGZlYXRoZXItY2hldnJvbi1yaWdodFwiPjxwb2x5bGluZSBwb2ludHM9XCI5IDE4IDE1IDEyIDkgNlwiPjwvcG9seWxpbmU+PC9zdmc+YDtcclxuICAgICAgICBcclxuICAgICAgICB0b2dnbGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLnRvZ2dsZVByZXZpZXcoKSk7XHJcblxyXG4gICAgICAgIHRoaXMucHJldmlld1Jlc2l6ZXIgPSBwcmV2aWV3V3JhcHBlci5jcmVhdGVEaXYoJ3ByZXZpZXctcmVzaXplcicpO1xyXG4gICAgICAgIHRoaXMuc2V0dXBSZXNpemVyKCk7XHJcblxyXG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE5vdGVzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTUyQTBcdThGN0RcdTYyNDBcdTY3MDlcdTY4MDdcdTdCN0VcdTVFNzZcdTUyMUJcdTVFRkFcdTY4MDdcdTdCN0VcdThGQzdcdTZFRTRcdTU2NjhcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBhc3luYyBsb2FkVGFncygpIHtcclxuICAgICAgICBjb25zdCB0YWdzID0gdGhpcy5nZXRBbGxUYWdzKCk7XHJcbiAgICAgICAgdGFncy5mb3JFYWNoKHRhZyA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhZ0VsID0gdGhpcy50YWdDb250YWluZXIuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogdGFnIH0pO1xyXG4gICAgICAgICAgICB0YWdFbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHRoaXMuZmlsdGVyQnlUYWcodGFnKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTgzQjdcdTUzRDZcdTYyNDBcdTY3MDlcdTdCMTRcdThCQjBcdTRFMkRcdTc2ODRcdTY4MDdcdTdCN0VcclxuICAgICAqIEByZXR1cm5zIFx1NTNCQlx1OTFDRFx1NTQwRVx1NzY4NFx1NjgwN1x1N0I3RVx1NjU3MFx1N0VDNFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGdldEFsbFRhZ3MoKTogc3RyaW5nW10ge1xyXG4gICAgICAgIGNvbnN0IHRhZ3MgPSBuZXcgU2V0PHN0cmluZz4oKTtcclxuICAgICAgICB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCkuZm9yRWFjaChmaWxlID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY2FjaGUgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcclxuICAgICAgICAgICAgaWYgKGNhY2hlPy50YWdzKSB7XHJcbiAgICAgICAgICAgICAgICBjYWNoZS50YWdzLmZvckVhY2godGFnID0+IHRhZ3MuYWRkKHRhZy50YWcpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRhZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU1MjFCXHU1RUZBXHU4OUM2XHU1NkZFXHU1MjA3XHU2MzYyXHU2MzA5XHU5NEFFXHJcbiAgICAgKiBAcGFyYW0gY29udGFpbmVyIC0gXHU2MzA5XHU5NEFFXHU1QkI5XHU1NjY4XHU1MTQzXHU3RDIwXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY3JlYXRlVmlld1N3aXRjaGVyKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQpIHtcclxuICAgICAgICBjb25zdCB2aWV3cyA9IFtcclxuICAgICAgICAgICAgeyBpZDogJ2NhcmQnLCBpY29uOiAnZ3JpZC0yeDInLCB0ZXh0OiAnXHU1MzYxXHU3MjQ3XHU4OUM2XHU1NkZFJyB9LFxyXG4gICAgICAgICAgICB7IGlkOiAnbGlzdCcsIGljb246ICdsaXN0JywgdGV4dDogJ1x1NTIxN1x1ODg2OFx1ODlDNlx1NTZGRScgfSxcclxuICAgICAgICAgICAgeyBpZDogJ3RpbWVsaW5lJywgaWNvbjogJ2Nsb2NrJywgdGV4dDogJ1x1NjVGNlx1OTVGNFx1OEY3NFx1ODlDNlx1NTZGRScgfVxyXG4gICAgICAgIF07XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmlld3MuZm9yRWFjaCh2aWV3ID0+IHtcclxuICAgICAgICAgICAgY29uc3QgYnRuID0gY29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7XHJcbiAgICAgICAgICAgICAgICBjbHM6IGB2aWV3LXN3aXRjaC1idG4gJHt2aWV3LmlkID09PSB0aGlzLmN1cnJlbnRWaWV3ID8gJ2FjdGl2ZScgOiAnJ31gLFxyXG4gICAgICAgICAgICAgICAgYXR0cjogeyAnYXJpYS1sYWJlbCc6IHZpZXcudGV4dCB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU2REZCXHU1MkEwXHU1NkZFXHU2ODA3XHJcbiAgICAgICAgICAgIGJ0bi5pbm5lckhUTUwgPSBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIxOFwiIGhlaWdodD1cIjE4XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIGNsYXNzPVwibHVjaWRlICR7dmlldy5pY29ufVwiPjwvc3ZnPmA7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBcdTc5RkJcdTk2NjRcdTUxNzZcdTRFRDZcdTYzMDlcdTk0QUVcdTc2ODRcdTZEM0JcdTUyQThcdTcyQjZcdTYwMDFcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcudmlldy1zd2l0Y2gtYnRuJykuZm9yRWFjaChiID0+IGIucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpKTtcclxuICAgICAgICAgICAgICAgIGJ0bi5hZGRDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN3aXRjaFZpZXcodmlldy5pZCBhcyAnY2FyZCcgfCAnbGlzdCcgfCAndGltZWxpbmUnKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTUyQTBcdThGN0RcdTYyNDBcdTY3MDlcdTdCMTRcdThCQjBcdTVFNzZcdTUyMUJcdTVFRkFcdTUzNjFcdTcyNDdcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBhc3luYyBsb2FkTm90ZXMoKSB7XHJcbiAgICAgICAgY29uc3QgZmlsZXMgPSB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIuZW1wdHkoKTtcclxuXHJcbiAgICAgICAgZmlsZXMuZm9yRWFjaChmaWxlID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY2FyZCA9IHRoaXMuY3JlYXRlTm90ZUNhcmQoZmlsZSk7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKGNhcmQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU1MjFCXHU1RUZBXHU1MzU1XHU0RTJBXHU3QjE0XHU4QkIwXHU1MzYxXHU3MjQ3XHJcbiAgICAgKiBAcGFyYW0gZmlsZSAtIFx1N0IxNFx1OEJCMFx1NjU4N1x1NEVGNlxyXG4gICAgICogQHJldHVybnMgXHU1MzYxXHU3MjQ3SFRNTFx1NTE0M1x1N0QyMFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNyZWF0ZU5vdGVDYXJkKGZpbGU6IFRGaWxlKTogSFRNTEVsZW1lbnQge1xyXG4gICAgICAgIGNvbnN0IGNhcmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBjYXJkLmFkZENsYXNzKCdub3RlLWNhcmQnKTtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCB0aXRsZSA9IGNhcmQuY3JlYXRlRGl2KCdub3RlLXRpdGxlJyk7XHJcbiAgICAgICAgdGl0bGUuc2V0VGV4dChmaWxlLmJhc2VuYW1lKTtcclxuXHJcbiAgICAgICAgY29uc3QgbGFzdE1vZGlmaWVkID0gY2FyZC5jcmVhdGVEaXYoJ25vdGUtZGF0ZScpO1xyXG4gICAgICAgIGxhc3RNb2RpZmllZC5zZXRUZXh0KG5ldyBEYXRlKGZpbGUuc3RhdC5tdGltZSkudG9Mb2NhbGVEYXRlU3RyaW5nKCkpO1xyXG5cclxuICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTY1ODdcdTRFRjZcdTU5MzlcdThERUZcdTVGODRcclxuICAgICAgICBjb25zdCBmb2xkZXJQYXRoID0gY2FyZC5jcmVhdGVEaXYoJ25vdGUtZm9sZGVyJyk7XHJcbiAgICAgICAgY29uc3QgZm9sZGVyID0gZmlsZS5wYXJlbnQucGF0aCA9PT0gJy8nID8gJ1x1NjgzOVx1NzZFRVx1NUY1NScgOiBmaWxlLnBhcmVudC5wYXRoO1xyXG4gICAgICAgIGZvbGRlclBhdGguc2V0VGV4dChmb2xkZXIpO1xyXG4gICAgICAgIGZvbGRlclBhdGguc2V0QXR0cmlidXRlKCd0aXRsZScsIGZvbGRlcik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU3MEI5XHU1MUZCXHU2NTg3XHU0RUY2XHU1OTM5XHU4REVGXHU1Rjg0XHU5QUQ4XHU0RUFFXHU3NkY4XHU1NDBDXHU2NTg3XHU0RUY2XHU1OTM5XHU3Njg0XHU3QjE0XHU4QkIwXHJcbiAgICAgICAgZm9sZGVyUGF0aC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0Rm9sZGVyKGZvbGRlcik7XHJcbiAgICAgICAgICAgIC8vIFx1NTcyOFx1NjU4N1x1NEVGNlx1NkQ0Rlx1ODlDOFx1NTY2OFx1NEUyRFx1NUI5QVx1NEY0RFx1NUU3Nlx1NUM1NVx1NUYwMFx1NjU4N1x1NEVGNlx1NTkzOVxyXG4gICAgICAgICAgICB0aGlzLnJldmVhbEZvbGRlckluRXhwbG9yZXIoZm9sZGVyKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgY2FjaGUgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcclxuICAgICAgICBpZiAoY2FjaGU/LnRhZ3MpIHtcclxuICAgICAgICAgICAgY29uc3QgdGFnQ29udGFpbmVyID0gY2FyZC5jcmVhdGVEaXYoJ25vdGUtdGFncycpO1xyXG4gICAgICAgICAgICBjYWNoZS50YWdzLmZvckVhY2godGFnID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRhZ0VsID0gdGFnQ29udGFpbmVyLmNyZWF0ZUVsKCdzcGFuJywge1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IHRhZy50YWcsXHJcbiAgICAgICAgICAgICAgICAgICAgY2xzOiAnbm90ZS10YWcnXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBcdTRGRUVcdTY1MzlcdTUzNjFcdTcyNDdcdTcwQjlcdTUxRkJcdTRFOEJcdTRFRjZcclxuICAgICAgICBjYXJkLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBsZWFmID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYWYoJ3RhYicpO1xyXG4gICAgICAgICAgICBhd2FpdCBsZWFmLm9wZW5GaWxlKGZpbGUpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBcdTk4ODRcdTg5QzhcdTUyOUZcdTgwRkRcdTRGRERcdTYzMDFcdTRFMERcdTUzRDhcclxuICAgICAgICBjYXJkLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByZXZpZXdDb250YWluZXIuZW1wdHkoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5yZWFkKGZpbGUpO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgTWFya2Rvd25SZW5kZXJlci5yZW5kZXJNYXJrZG93bihcclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJldmlld0NvbnRhaW5lcixcclxuICAgICAgICAgICAgICAgICAgICBmaWxlLnBhdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpc1xyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1OTg4NFx1ODlDOFx1NTJBMFx1OEY3RFx1NTkzMVx1OEQyNTonLCBlcnJvcik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByZXZpZXdDb250YWluZXIuc2V0VGV4dCgnXHU5ODg0XHU4OUM4XHU1MkEwXHU4RjdEXHU1OTMxXHU4RDI1Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNhcmQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTUyMDdcdTYzNjJcdTg5QzZcdTU2RkVcdTZBMjFcdTVGMEZcclxuICAgICAqIEBwYXJhbSB2aWV3IC0gXHU3NkVFXHU2ODA3XHU4OUM2XHU1NkZFXHU2QTIxXHU1RjBGXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc3dpdGNoVmlldyh2aWV3OiAnY2FyZCcgfCAnbGlzdCcgfCAndGltZWxpbmUnKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50VmlldyA9IHZpZXc7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIuc2V0QXR0cmlidXRlKCdkYXRhLXZpZXcnLCB2aWV3KTtcclxuICAgICAgICB0aGlzLmxvYWROb3RlcygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU2ODM5XHU2MzZFXHU2ODA3XHU3QjdFXHU4RkM3XHU2RUU0XHU3QjE0XHU4QkIwXHJcbiAgICAgKiBAcGFyYW0gdGFnIC0gXHU2ODA3XHU3QjdFXHU1NDBEXHU3OUYwXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZmlsdGVyQnlUYWcodGFnOiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCBmaWxlcyA9IHRoaXMuYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lci5lbXB0eSgpO1xyXG5cclxuICAgICAgICBmaWxlcy5mb3JFYWNoKGZpbGUgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjYWNoZSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpO1xyXG4gICAgICAgICAgICBpZiAoY2FjaGU/LnRhZ3MgJiYgY2FjaGUudGFncy5zb21lKHQgPT4gdC50YWcgPT09IHRhZykpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNhcmQgPSB0aGlzLmNyZWF0ZU5vdGVDYXJkKGZpbGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQoY2FyZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gXHU5QUQ4XHU0RUFFXHU5MDA5XHU0RTJEXHU3Njg0XHU2ODA3XHU3QjdFXHJcbiAgICAgICAgdGhpcy50YWdDb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnYnV0dG9uJykuZm9yRWFjaChidG4gPT4ge1xyXG4gICAgICAgICAgICBpZiAoYnRuLnRleHRDb250ZW50ID09PSB0YWcpIHtcclxuICAgICAgICAgICAgICAgIGJ0bi5hZGRDbGFzcygnYWN0aXZlLXRhZycpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYnRuLnJlbW92ZUNsYXNzKCdhY3RpdmUtdGFnJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldHVwUmVzaXplcigpIHtcclxuICAgICAgICBsZXQgc3RhcnRYOiBudW1iZXI7XHJcbiAgICAgICAgbGV0IHN0YXJ0V2lkdGg6IG51bWJlcjtcclxuXHJcbiAgICAgICAgY29uc3Qgc3RhcnRSZXNpemUgPSAoZTogTW91c2VFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICBzdGFydFggPSBlLnBhZ2VYO1xyXG4gICAgICAgICAgICBzdGFydFdpZHRoID0gcGFyc2VJbnQoZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLnByZXZpZXdDb250YWluZXIpLndpZHRoLCAxMCk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHJlc2l6ZSk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBzdG9wUmVzaXplKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCByZXNpemUgPSAoZTogTW91c2VFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB3aWR0aCA9IHN0YXJ0V2lkdGggLSAoZS5wYWdlWCAtIHN0YXJ0WCk7XHJcbiAgICAgICAgICAgIGlmICh3aWR0aCA+PSA1MCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcmV2aWV3Q29udGFpbmVyLnN0eWxlLndpZHRoID0gYCR7d2lkdGh9cHhgO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNQcmV2aWV3Q29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1ByZXZpZXdDb2xsYXBzZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXZpZXdDb250YWluZXIucmVtb3ZlQ2xhc3MoJ2NvbGxhcHNlZCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLmlzUHJldmlld0NvbGxhcHNlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc1ByZXZpZXdDb2xsYXBzZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcmV2aWV3Q29udGFpbmVyLmFkZENsYXNzKCdjb2xsYXBzZWQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnN0IHN0b3BSZXNpemUgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHJlc2l6ZSk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBzdG9wUmVzaXplKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLnByZXZpZXdSZXNpemVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHN0YXJ0UmVzaXplKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHRvZ2dsZVByZXZpZXcoKSB7XHJcbiAgICAgICAgdGhpcy5pc1ByZXZpZXdDb2xsYXBzZWQgPSAhdGhpcy5pc1ByZXZpZXdDb2xsYXBzZWQ7XHJcbiAgICAgICAgdGhpcy5wcmV2aWV3Q29udGFpbmVyLnRvZ2dsZUNsYXNzKCdjb2xsYXBzZWQnKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGhpZ2hsaWdodEZvbGRlcihmb2xkZXI6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuY3VycmVudEZvbGRlciA9IHRoaXMuY3VycmVudEZvbGRlciA9PT0gZm9sZGVyID8gbnVsbCA6IGZvbGRlcjtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcubm90ZS1jYXJkJykuZm9yRWFjaChjYXJkID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY2FyZEZvbGRlciA9IGNhcmQucXVlcnlTZWxlY3RvcignLm5vdGUtZm9sZGVyJykudGV4dENvbnRlbnQ7XHJcbiAgICAgICAgICAgIGNhcmQudG9nZ2xlQ2xhc3MoJ2ZvbGRlci1oaWdobGlnaHQnLCBjYXJkRm9sZGVyID09PSBmb2xkZXIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgcmV2ZWFsRm9sZGVySW5FeHBsb3Jlcihmb2xkZXI6IHN0cmluZykge1xyXG4gICAgICAgIC8vIFx1ODNCN1x1NTNENlx1NjU4N1x1NEVGNlx1NkQ0Rlx1ODlDOFx1NTY2OFx1ODlDNlx1NTZGRVxyXG4gICAgICAgIGNvbnN0IGZpbGVFeHBsb3JlciA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWF2ZXNPZlR5cGUoJ2ZpbGUtZXhwbG9yZXInKVswXTtcclxuICAgICAgICBpZiAoZmlsZUV4cGxvcmVyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpbGVFeHBsb3JlclZpZXcgPSBmaWxlRXhwbG9yZXIudmlldyBhcyBhbnk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTU5ODJcdTY3OUNcdTY2MkZcdTY4MzlcdTc2RUVcdTVGNTVcdUZGMENcdTc2RjRcdTYzQTVcdTVDNTVcdTVGMDBcdTY4MzlcdTc2RUVcdTVGNTVcclxuICAgICAgICAgICAgaWYgKGZvbGRlciA9PT0gJ1x1NjgzOVx1NzZFRVx1NUY1NScpIHtcclxuICAgICAgICAgICAgICAgIGlmIChmaWxlRXhwbG9yZXJWaWV3LmV4cGFuZEZvbGRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IGZpbGVFeHBsb3JlclZpZXcuZXhwYW5kRm9sZGVyKCcvJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFx1NUM1NVx1NUYwMFx1NUU3Nlx1OTAwOVx1NEUyRFx1NjU4N1x1NEVGNlx1NTkzOVxyXG4gICAgICAgICAgICBpZiAoZmlsZUV4cGxvcmVyVmlldy5leHBhbmRGb2xkZXIpIHtcclxuICAgICAgICAgICAgICAgIC8vIFx1NUM1NVx1NUYwMFx1NzIzNlx1NjU4N1x1NEVGNlx1NTkzOVx1OERFRlxyXG4gICAgICAgICAgICAgICAgY29uc3QgZm9sZGVyUGFydHMgPSBmb2xkZXIuc3BsaXQoJy8nKTtcclxuICAgICAgICAgICAgICAgIGxldCBjdXJyZW50UGF0aCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdTkwMTBcdTdFQTdcdTVDNTVcdTVGMDBcdTY1ODdcdTRFRjZcdTU5MzlcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcGFydCBvZiBmb2xkZXJQYXJ0cykge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQYXRoICs9IChjdXJyZW50UGF0aCA/ICcvJyA6ICcnKSArIHBhcnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgZmlsZUV4cGxvcmVyVmlldy5leHBhbmRGb2xkZXIoY3VycmVudFBhdGgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIFx1OTAwOVx1NEUyRFx1NzZFRVx1NjgwN1x1NjU4N1x1NEVGNlx1NTkzOVxyXG4gICAgICAgICAgICAgICAgaWYgKGZpbGVFeHBsb3JlclZpZXcuc2V0U2VsZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgZmlsZUV4cGxvcmVyVmlldy5zZXRTZWxlY3Rpb24oZm9sZGVyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIGNyZWF0ZU5ld05vdGUoKSB7XHJcbiAgICAgICAgLy8gXHU4M0I3XHU1M0Q2XHU1RjUzXHU1MjREXHU2NUU1XHU2NzFGXHU0RjVDXHU0RTNBXHU5RUQ4XHU4QkE0XHU2NTg3XHU0RUY2XHU1NDBEXHJcbiAgICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgY29uc3QgZmlsZU5hbWUgPSBgXHU2NzJBXHU1NDdEXHU1NDBEXHU3QjE0XHU4QkIwICR7ZGF0ZS50b0xvY2FsZVN0cmluZygpLnJlcGxhY2UoL1svOl0vZywgJy0nKX1gO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIC8vIFx1NTIxQlx1NUVGQVx1NjVCMFx1N0IxNFx1OEJCMFxyXG4gICAgICAgICAgICBjb25zdCBmaWxlID0gYXdhaXQgdGhpcy5hcHAudmF1bHQuY3JlYXRlKFxyXG4gICAgICAgICAgICAgICAgYCR7ZmlsZU5hbWV9Lm1kYCxcclxuICAgICAgICAgICAgICAgICcjICcgKyBmaWxlTmFtZSArICdcXG5cXG4nXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTU3MjhcdTY1QjBcdTY4MDdcdTdCN0VcdTk4NzVcdTRFMkRcdTYyNTNcdTVGMDBcdTdCMTRcdThCQjBcclxuICAgICAgICAgICAgY29uc3QgbGVhZiA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWFmKCd0YWInKTtcclxuICAgICAgICAgICAgYXdhaXQgbGVhZi5vcGVuRmlsZShmaWxlKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NTIzN1x1NjVCMFx1NTM2MVx1NzI0N1x1ODlDNlx1NTZGRVxyXG4gICAgICAgICAgICB0aGlzLmxvYWROb3RlcygpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1NTIxQlx1NUVGQVx1N0IxNFx1OEJCMFx1NTkzMVx1OEQyNTonLCBlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59ICJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBLHVCQUE2RTs7O0FDQTdF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
