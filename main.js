/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CardViewPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// cardView.ts
var import_obsidian = require("obsidian");
var VIEW_TYPE_CARD = "card-view";
var CardView = class extends import_obsidian.ItemView {
  /**
   * 构造函数
   * @param leaf - 工作区叶子节点
   * @param plugin - 插件实例
   */
  constructor(leaf, plugin) {
    super(leaf);
    this.container = createDiv();
    this.tagContainer = createDiv();
    this.previewContainer = createDiv();
    this.previewResizer = createDiv();
    this.isPreviewCollapsed = false;
    this.searchInput = createEl("input");
    this.currentSearchTerm = "";
    this.selectedTags = /* @__PURE__ */ new Set();
    this.selectedNotes = /* @__PURE__ */ new Set();
    this.lastSelectedNote = null;
    this.recentFolders = [];
    this.cardSize = 280;
    // 默认卡片宽度
    this.cardHeight = 280;
    // 默认卡片高度
    this.calendarContainer = createDiv();
    this.isCalendarVisible = false;
    this.currentDate = /* @__PURE__ */ new Date();
    this.currentFilter = { type: "none" };
    this.monthViewContainer = createDiv();
    this.isMonthViewVisible = false;
    this.loadedNotes = /* @__PURE__ */ new Set();
    this.plugin = plugin;
    this.currentView = plugin.settings.defaultView;
    this.intersectionObserver = new IntersectionObserver(
      (entries) => {
        entries.forEach(async (entry) => {
          if (entry.isIntersecting) {
            const noteContent = entry.target;
            const filePath = noteContent.getAttribute("data-path");
            if (filePath && !this.loadedNotes.has(filePath)) {
              const file = this.app.vault.getAbstractFileByPath(filePath);
              if (file instanceof import_obsidian.TFile) {
                await this.loadNoteContent(noteContent, file);
              }
            }
          }
        });
      },
      {
        rootMargin: "100px",
        threshold: 0.1
      }
    );
  }
  /**
   * 获取视图类型
   * @returns 视图类型标识符
   */
  getViewType() {
    return VIEW_TYPE_CARD;
  }
  /**
   * 获取视图显示文本
   * @returns 显示在标签页上的文本
   */
  getDisplayText() {
    return "\u5361\u7247\u89C6\u56FE";
  }
  /**
   * 视图打开时的初始化函数
   * 创建标签过滤器、视图切换按钮和容器
   */
  async onOpen() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.addClass("card-view-container");
    const mainLayout = containerEl.createDiv("main-layout");
    const contentSection = mainLayout.createDiv("content-section");
    const toolbar = contentSection.createDiv("card-view-toolbar");
    const leftTools = toolbar.createDiv("toolbar-left");
    const newNoteBtn = leftTools.createEl("button", {
      cls: "new-note-button"
    });
    newNoteBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-plus"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>
            <span>\u65B0\u5EFA\u7B14\u8BB0</span>
        `;
    newNoteBtn.addEventListener("click", () => this.createNewNote());
    this.createCalendarButton(leftTools);
    const viewSwitcher = leftTools.createDiv("view-switcher");
    this.createViewSwitcher(viewSwitcher);
    const searchContainer = toolbar.createDiv("search-container");
    this.createCommandButton(searchContainer);
    this.searchInput = searchContainer.createEl("input", {
      type: "text",
      placeholder: "\u641C\u7D22\u7B14\u8BB0...",
      cls: "search-input"
    });
    const quickNoteBar = mainLayout.createDiv("quick-note-bar");
    const controls = quickNoteBar.createDiv("quick-note-controls");
    const minimizeBtn = controls.createEl("button", {
      cls: "control-button minimize-btn"
    });
    minimizeBtn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="5" y1="12" x2="19" y2="12"></line></svg>`;
    const minimizeIcon = quickNoteBar.createDiv("minimize-icon");
    minimizeIcon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path><path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path></svg>`;
    this.setupDraggable(quickNoteBar);
    minimizeBtn.addEventListener("click", () => {
      this.minimizeQuickNote(quickNoteBar);
    });
    minimizeIcon.addEventListener("click", () => {
      this.restoreQuickNote(quickNoteBar);
    });
    const inputContainer = quickNoteBar.createDiv("quick-note-input-container");
    const titleInput = inputContainer.createEl("input", {
      cls: "quick-note-title",
      attr: {
        placeholder: "\u8F93\u5165\u7B14\u8BB0\u6807\u9898...",
        type: "text"
      }
    });
    const noteInput = inputContainer.createEl("textarea", {
      cls: "quick-note-input",
      attr: {
        placeholder: "\u8F93\u5165\u7B14\u8BB0\u5185\u5BB9\uFF0C\u6309 Enter \u53D1\u9001..."
      }
    });
    const tagsContainer = inputContainer.createDiv("tags-container");
    const tags = /* @__PURE__ */ new Set();
    const tagInput = tagsContainer.createEl("input", {
      cls: "tag-input",
      attr: {
        placeholder: "\u6DFB\u52A0\u6807\u7B7E..."
      }
    });
    const quickNoteToolbar = inputContainer.createDiv("quick-note-toolbar");
    const codeBtn = quickNoteToolbar.createEl("button", {
      cls: "quick-note-btn",
      attr: { "data-type": "code" }
    });
    codeBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="16 18 22 12 16 6"></polyline><polyline points="8 6 2 12 8 18"></polyline></svg>
            \u4EE3\u7801
        `;
    const imageBtn = quickNoteToolbar.createEl("button", {
      cls: "quick-note-btn",
      attr: { "data-type": "image" }
    });
    imageBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><circle cx="8.5" cy="8.5" r="1.5"></circle><polyline points="21 15 16 10 5 21"></polyline></svg>
            \u56FE\u7247
        `;
    const ideaBtn = quickNoteToolbar.createEl("button", {
      cls: "quick-note-btn",
      attr: { "data-type": "idea" }
    });
    ideaBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>
            \u7075\u611F
        `;
    const tagSuggestions = inputContainer.createDiv("tag-suggestions");
    this.setupQuickNoteEvents(noteInput, quickNoteToolbar, tagSuggestions);
    this.setupSearch();
    this.tagContainer = contentSection.createDiv("tag-filter");
    await this.loadTags();
    const contentArea = contentSection.createDiv("card-view-content");
    this.container = contentArea.createDiv("card-container");
    this.cardSize = this.plugin.settings.cardWidth;
    this.container.style.gridTemplateColumns = `repeat(auto-fill, ${this.cardSize}px)`;
    this.container.addEventListener("wheel", (e) => {
      if (e.ctrlKey || e.shiftKey) {
        e.preventDefault();
        if (e.ctrlKey) {
          this.adjustCardSize(e.deltaY);
        } else if (e.shiftKey) {
          this.adjustCardHeight(e.deltaY);
        }
      }
    });
    const previewWrapper = mainLayout.createDiv("preview-wrapper");
    const previewControls = previewWrapper.createDiv("preview-controls");
    const toggleButton = previewControls.createEl("button", {
      cls: "preview-toggle",
      attr: { "aria-label": "\u6298\u53E0\u9884\u89C8" }
    });
    toggleButton.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-right"><polyline points="9 18 15 12 9 6"></polyline></svg>`;
    toggleButton.addEventListener("click", () => this.togglePreview());
    this.previewResizer = previewWrapper.createDiv("preview-resizer");
    this.previewContainer = previewWrapper.createDiv("preview-container");
    this.setupResizer();
    this.setupScrollSync();
    await this.loadNotes();
    this.calendarContainer = createDiv();
    this.calendarContainer.addClass("calendar-container");
    this.calendarContainer.style.display = "none";
    const mainLayoutElement = containerEl.querySelector(".main-layout");
    if (mainLayoutElement) {
      mainLayout.insertBefore(this.calendarContainer, mainLayout.firstChild);
    }
    const cardContainer = containerEl.querySelector(".card-container");
    if (cardContainer) {
      cardContainer.addEventListener("click", (e) => {
        if (e.target === cardContainer) {
          const cards = cardContainer.querySelectorAll(".note-card");
          cards.forEach((card) => {
            card.classList.remove("selected");
          });
        }
      });
    }
    const sendButton = inputContainer.createEl("button", {
      cls: "quick-note-send",
      attr: {
        "title": "\u53D1\u9001\u7B14\u8BB0"
      }
    });
    sendButton.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="22" y1="2" x2="11" y2="13"></line><polygon points="22 2 15 22 11 13 2 9 22 2"></polygon></svg>
        `;
    sendButton.addEventListener("click", async (e) => {
      var _a, _b;
      e.preventDefault();
      e.stopPropagation();
      const title = (_a = titleInput == null ? void 0 : titleInput.value) == null ? void 0 : _a.trim();
      const content = noteInput.value.trim();
      if (!content) {
        new import_obsidian.Notice("\u8BF7\u8F93\u5165\u7B14\u8BB0\u5185\u5BB9");
        return;
      }
      try {
        const tagItems = (_b = tagsContainer == null ? void 0 : tagsContainer.querySelectorAll(".tag-item")) != null ? _b : [];
        const tagTexts = Array.from(tagItems).map((item) => {
          var _a2, _b2;
          return (_b2 = (_a2 = item.textContent) == null ? void 0 : _a2.replace("\xD7", "").trim()) != null ? _b2 : "";
        });
        const tagsContent = tagTexts.map((tag) => `#${tag}`).join(" ");
        const finalContent = tagsContent ? `${tagsContent}

${content}` : content;
        const fileName = title || (/* @__PURE__ */ new Date()).toLocaleDateString("zh-CN", {
          year: "numeric",
          month: "2-digit",
          day: "2-digit"
        }).replace(/\//g, "-");
        const file = await this.createQuickNote(finalContent, [], fileName);
        if (file) {
          this.clearQuickNoteInputs(titleInput != null ? titleInput : null, noteInput, tags, tagsContainer != null ? tagsContainer : null, tagInput != null ? tagInput : null);
          await this.refreshView();
          new import_obsidian.Notice("\u7B14\u8BB0\u521B\u5EFA\u6210\u529F");
        }
      } catch (error) {
        console.error("\u521B\u5EFA\u7B14\u8BB0\u5931\u8D25:", error);
        new import_obsidian.Notice("\u521B\u5EFA\u7B14\u8BB0\u5931\u8D25");
      }
    });
    const quickNoteBackdrop = mainLayout.createDiv("quick-note-backdrop");
  }
  /**
   * 获取所有笔记中的标签
   * @returns 去后的标签组
   */
  getAllTags() {
    const tags = /* @__PURE__ */ new Set();
    this.app.vault.getMarkdownFiles().forEach((file) => {
      const cache = this.app.metadataCache.getFileCache(file);
      if (cache == null ? void 0 : cache.tags) {
        cache.tags.forEach((tag) => tags.add(tag.tag));
      }
    });
    return Array.from(tags);
  }
  getTagsWithCount() {
    const tagCounts = /* @__PURE__ */ new Map();
    this.app.vault.getMarkdownFiles().forEach((file) => {
      const cache = this.app.metadataCache.getFileCache(file);
      if (cache == null ? void 0 : cache.tags) {
        cache.tags.forEach((tag) => {
          const count = tagCounts.get(tag.tag) || 0;
          tagCounts.set(tag.tag, count + 1);
        });
      }
    });
    return tagCounts;
  }
  /**
   * 加载有标签并创标签过滤器
   */
  async loadTags() {
    const tagCounts = this.getTagsWithCount();
    this.tagContainer.empty();
    const allTagBtn = this.tagContainer.createEl("button", {
      text: this.plugin.settings.showTagCount ? `All ${this.app.vault.getMarkdownFiles().length}` : "All",
      cls: "tag-btn active"
    });
    allTagBtn.addEventListener("click", () => {
      this.clearTagSelection();
      allTagBtn.addClass("active");
      this.refreshView();
    });
    Array.from(tagCounts.entries()).sort(([a], [b]) => a.localeCompare(b)).forEach(([tag, count]) => {
      const tagBtn = this.tagContainer.createEl("button", {
        cls: "tag-btn"
      });
      const tagText = tagBtn.createSpan({
        text: tag
      });
      if (this.plugin.settings.showTagCount) {
        tagBtn.createSpan({
          text: count.toString(),
          cls: "tag-count"
        });
      }
      tagBtn.addEventListener("click", (e) => {
        e.stopPropagation();
        this.toggleTag(tag, tagBtn);
      });
    });
  }
  /**
   * 创建视图切换按钮
   * @param container - 按钮容器元素
   */
  createViewSwitcher(container) {
    const views = [
      { id: "card", icon: "grid", text: "\u5361\u7247\u89C6\u56FE" },
      { id: "list", icon: "list", text: "\u5217\u8868\u89C6\u56FE" },
      { id: "timeline", icon: "clock", text: "\u65F6\u95F4\u8F74\u89C6\u56FE" },
      { id: "month", icon: "calendar", text: "\u6708\u56FE" }
    ];
    views.forEach((view) => {
      const btn = container.createEl("button", {
        cls: `view-switch-btn ${view.id === this.currentView ? "active" : ""}`
      });
      const iconHtml = {
        "grid": '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="7" height="7"></rect><rect x="14" y="3" width="7" height="7"></rect><rect x="14" y="14" width="7" height="7"></rect><rect x="3" y="14" width="7" height="7"></rect></svg>',
        "list": '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="8" y1="6" x2="21" y2="6"></line><line x1="8" y1="12" x2="21" y2="12"></line><line x1="8" y1="18" x2="21" y2="18"></line><line x1="3" y1="6" x2="3.01" y2="6"></line><line x1="3" y1="12" x2="3.01" y2="12"></line><line x1="3" y1="18" x2="3.01" y2="18"></line></svg>',
        "clock": '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><polyline points="12 6 12 12 16 14"></polyline></svg>',
        "calendar": '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect><line x1="16" y1="2" x2="16" y2="6"></line><line x1="8" y1="2" x2="8" y2="6"></line><line x1="3" y1="10" x2="21" y2="10"></line></svg>'
      };
      const iconSpan = btn.createSpan({ cls: "view-switch-icon" });
      iconSpan.innerHTML = iconHtml[view.icon];
      btn.createSpan({ text: view.text, cls: "view-switch-text" });
      btn.addEventListener("click", () => {
        container.querySelectorAll(".view-switch-btn").forEach((b) => b.removeClass("active"));
        btn.addClass("active");
        this.switchView(view.id);
      });
    });
  }
  // 加载所有笔记并创建卡片
  async loadNotes() {
    const files = this.app.vault.getMarkdownFiles();
    this.container.empty();
    const cards = await Promise.all(
      files.map((file) => this.createNoteCard(file))
    );
    cards.forEach((card) => {
      if (card instanceof HTMLElement) {
        card.style.width = `${this.cardSize}px`;
        this.container.appendChild(card);
      }
    });
    this.container.style.gridTemplateColumns = `repeat(auto-fill, ${this.cardSize}px)`;
  }
  /**
   * 创建单个笔记卡片
   * @param file - 笔记文件
   * @returns 卡片HTML元素
   */
  async createNoteCard(file) {
    const card = document.createElement("div");
    card.addClass("note-card");
    card.setAttribute("data-path", file.path);
    card.style.width = `${this.cardSize}px`;
    card.style.height = `${this.cardHeight}px`;
    const header = card.createDiv("note-card-header");
    const lastModified = header.createDiv("note-date");
    lastModified.setText(new Date(file.stat.mtime).toLocaleDateString());
    const folderPath = header.createDiv("note-folder");
    const folder = file.parent ? file.parent.path : "\u6839\u76EE\u5F55";
    const pathParts = folder === "\u6839\u76EE\u5F55" ? ["\u6839\u76EE\u5F55"] : folder.split("/");
    pathParts.forEach((part, index) => {
      if (index > 0) {
        folderPath.createSpan({ text: " / ", cls: "folder-separator" });
      }
      const folderPart = folderPath.createSpan({
        text: part,
        cls: "folder-part clickable"
      });
      const currentPath = folder === "\u6839\u76EE\u5F55" ? "" : pathParts.slice(0, index + 1).join("/");
      const underline = folderPart.createSpan({ cls: "folder-underline" });
      folderPart.addEventListener("mouseenter", () => {
        underline.addClass("active");
      });
      folderPart.addEventListener("mouseleave", () => {
        underline.removeClass("active");
      });
      folderPart.addEventListener("click", async (e) => {
        e.stopPropagation();
        e.preventDefault();
        const fileExplorer = this.app.workspace.getLeavesOfType("file-explorer")[0];
        if (fileExplorer && fileExplorer.view) {
          this.app.workspace.revealLeaf(fileExplorer);
          const targetFolder = currentPath ? this.app.vault.getAbstractFileByPath(currentPath) : this.app.vault.getRoot();
          if (targetFolder && (targetFolder instanceof import_obsidian.TFolder || !currentPath)) {
            await fileExplorer.view.revealInFolder(targetFolder);
          }
        }
      });
    });
    const openButton = header.createDiv("note-open-button");
    openButton.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path><polyline points="15 3 21 3 21 9"></polyline><line x1="10" y1="14" x2="21" y2="3"></line></svg>`;
    openButton.setAttribute("title", "\u5728\u65B0\u6807\u7B7E\u9875\u4E2D\u6253\u5F00");
    openButton.style.opacity = "0";
    const cardContent = card.createDiv("note-card-content");
    const title = cardContent.createDiv("note-title");
    let displayTitle = file.basename;
    const timePattern = /^\d{4}[-./]\d{2}[-./]\d{2}/;
    if (timePattern.test(displayTitle)) {
      displayTitle = displayTitle.replace(timePattern, "").trim();
    }
    if (this.currentSearchTerm) {
      title.innerHTML = this.highlightText(displayTitle, this.currentSearchTerm);
    } else {
      title.setText(displayTitle);
    }
    try {
      const content = await this.app.vault.read(file);
      const noteContent = cardContent.createDiv("note-content");
      if (this.currentSearchTerm) {
        await import_obsidian.MarkdownRenderer.render(
          this.app,
          content,
          noteContent,
          file.path,
          this
        );
        const contentElements = noteContent.querySelectorAll("p, li, h1, h2, h3, h4, h5, h6");
        contentElements.forEach((element) => {
          const originalText = element.textContent || "";
          if (originalText.toLowerCase().includes(this.currentSearchTerm.toLowerCase())) {
            element.innerHTML = this.highlightText(originalText, this.currentSearchTerm);
          }
        });
      } else {
        await import_obsidian.MarkdownRenderer.render(
          this.app,
          content,
          noteContent,
          file.path,
          this
        );
      }
      noteContent.setAttribute("data-path", file.path);
      const loadingPlaceholder = noteContent.createDiv("content-placeholder");
      loadingPlaceholder.setText("Loading...");
      this.observeNoteContent(noteContent, file);
      card.addEventListener("mouseenter", async () => {
        openButton.style.opacity = "1";
        title.style.opacity = "0";
        title.style.display = "none";
        noteContent.style.opacity = "1";
        if (!this.loadedNotes.has(file.path)) {
          await this.loadNoteContent(noteContent, file);
        }
        try {
          this.previewContainer.empty();
          const content2 = await this.app.vault.read(file);
          await import_obsidian.MarkdownRenderer.render(
            this.app,
            content2,
            this.previewContainer,
            file.path,
            this
          );
        } catch (error) {
          console.error("\u9884\u89C8\u52A0\u8F7D\u5931\u8D25:", error);
        }
      });
      card.addEventListener("mouseleave", () => {
        openButton.style.opacity = "0";
        title.style.opacity = "1";
        title.style.display = "block";
        noteContent.style.opacity = "0.3";
      });
      openButton.addEventListener("click", async (e) => {
        e.stopPropagation();
        await this.openInAppropriateLeaf(file);
        card.addClass("selected");
        this.container.querySelectorAll(".note-card").forEach((cardElement) => {
          if (cardElement !== card) {
            cardElement.removeClass("selected");
          }
        });
      });
      card.addEventListener("click", (e) => {
        this.handleCardSelection(file.path, e);
      });
      card.addEventListener("dblclick", async () => {
        await this.openInAppropriateLeaf(file);
      });
      card.addEventListener("contextmenu", (e) => {
        e.preventDefault();
        e.stopPropagation();
        if (!card.hasClass("selected")) {
          if (!e.ctrlKey) {
            this.clearSelection();
          }
          this.selectedNotes.add(file.path);
          card.addClass("selected");
          this.lastSelectedNote = file.path;
        }
        this.showContextMenu(e, this.getSelectedFiles());
      });
    } catch (error) {
      console.error("\u7B14\u8BB0\u52A0\u8F7D\u5931\u8D25:", error);
    }
    card.addEventListener("mouseenter", async () => {
      openButton.style.opacity = "1";
    });
    card.addEventListener("mouseleave", () => {
      openButton.style.opacity = "0";
    });
    return card;
  }
  /**
   * 切换视图模式
   * @param view - 目标视图模式
   */
  switchView(view) {
    this.currentView = view;
    this.container.setAttribute("data-view", view);
    this.container.empty();
    const contentSection = this.containerEl.querySelector(".content-section");
    if (contentSection) {
      contentSection.removeClass("view-card", "view-list", "view-timeline", "view-month");
      contentSection.addClass(`view-${view}`);
    }
    if (view === "list") {
      this.createListView();
    } else if (view === "timeline") {
      this.createTimelineView();
    } else if (view === "month") {
      this.createMonthView();
    } else {
      this.loadNotes();
    }
  }
  // 切换预览栏的显示状态
  togglePreview() {
    this.isPreviewCollapsed = !this.isPreviewCollapsed;
    const previewWrapper = this.containerEl.querySelector(".preview-wrapper");
    if (this.isPreviewCollapsed) {
      this.previewContainer.addClass("collapsed");
      previewWrapper == null ? void 0 : previewWrapper.addClass("collapsed");
      if (previewWrapper instanceof HTMLElement) {
        previewWrapper.style.width = "0px";
      }
      const contentSection = this.containerEl.querySelector(".content-section");
      if (contentSection instanceof HTMLElement) {
        contentSection.style.width = "100%";
      }
    } else {
      this.previewContainer.removeClass("collapsed");
      previewWrapper == null ? void 0 : previewWrapper.removeClass("collapsed");
      const width = "300px";
      if (previewWrapper instanceof HTMLElement) {
        previewWrapper.style.width = width;
      }
      this.previewContainer.style.width = width;
      this.adjustContentWidth();
    }
    const toggleButton = this.containerEl.querySelector(".preview-toggle svg");
    if (toggleButton instanceof SVGElement) {
      toggleButton.style.transform = this.isPreviewCollapsed ? "" : "rotate(180deg)";
    }
  }
  // 修改预览栏大小调整方法
  setupResizer() {
    let startX;
    let startWidth;
    const startResize = (e) => {
      e.preventDefault();
      startX = e.pageX;
      startWidth = this.previewContainer.offsetWidth;
      document.addEventListener("mousemove", resize);
      document.addEventListener("mouseup", stopResize);
      document.body.style.cursor = "col-resize";
      this.previewResizer.addClass("resizing");
    };
    const resize = (e) => {
      if (!startWidth) return;
      const width = startWidth - (e.pageX - startX);
      if (width >= 50 && width <= 800) {
        this.previewContainer.style.width = `${width}px`;
        const previewWrapper = this.containerEl.querySelector(".preview-wrapper");
        if (previewWrapper instanceof HTMLElement) {
          previewWrapper.style.width = `${width}px`;
        }
        this.adjustContentWidth();
        if (this.isPreviewCollapsed) {
          this.isPreviewCollapsed = false;
          this.previewContainer.removeClass("collapsed");
          const previewWrapper2 = this.containerEl.querySelector(".preview-wrapper");
          previewWrapper2 == null ? void 0 : previewWrapper2.removeClass("collapsed");
        }
      }
    };
    const stopResize = () => {
      document.removeEventListener("mousemove", resize);
      document.removeEventListener("mouseup", stopResize);
      document.body.style.cursor = "";
      this.previewResizer.removeClass("resizing");
    };
    this.previewResizer.addEventListener("mousedown", startResize);
  }
  // 调整内容宽度
  adjustContentWidth() {
    const mainLayout = this.containerEl.querySelector(".main-layout");
    const previewWidth = this.previewContainer.offsetWidth;
    const contentSection = this.containerEl.querySelector(".content-section");
    if (mainLayout instanceof HTMLElement && contentSection instanceof HTMLElement) {
      const totalWidth = mainLayout.offsetWidth;
      const newContentWidth = totalWidth - previewWidth - 4;
      contentSection.style.width = `${newContentWidth}px`;
      const availableWidth = newContentWidth - 32;
      const columns = Math.floor(availableWidth / this.cardSize);
      const gap = 16;
      const actualCardWidth = (availableWidth - (columns - 1) * gap) / columns;
      this.container.style.gridTemplateColumns = `repeat(${columns}, ${actualCardWidth}px)`;
    }
  }
  // 创建新笔记
  async createNewNote(date) {
    const baseFileName = date ? date.toLocaleDateString() : "\u672A\u547D\u540D";
    let fileName = baseFileName;
    let counter = 1;
    while (this.app.vault.getAbstractFileByPath(`${fileName}.md`)) {
      const file = this.app.vault.getAbstractFileByPath(`${fileName}.md`);
      if (file instanceof import_obsidian.TFile && file.stat.size === 0) {
        await this.openInAppropriateLeaf(file);
        return;
      } else {
        fileName = date ? `${baseFileName} ${counter}` : `\u672A\u547D\u540D ${counter}`;
        counter++;
      }
    }
    try {
      const file = await this.app.vault.create(
        `${fileName}.md`,
        ""
      );
      await this.openInAppropriateLeaf(file);
      this.loadNotes();
    } catch (error) {
      console.error("\u521B\u5EFA\u7B14\u8BB0\u5931\u8D25:", error);
    }
  }
  // 修改 createQuickNote 方法
  async createQuickNote(content, types, fileName) {
    try {
      let finalFileName = fileName;
      let counter = 1;
      while (this.app.vault.getAbstractFileByPath(`${finalFileName}.md`)) {
        finalFileName = `${fileName} ${counter}`;
        counter++;
      }
      const file = await this.app.vault.create(
        `${finalFileName}.md`,
        content
      );
      if (file) {
        return file;
      }
      return null;
    } catch (error) {
      console.error("\u521B\u5EFA\u7B14\u8BB0\u5931\u8D25:", error);
      new import_obsidian.Notice("\u521B\u5EFA\u7B14\u8BB0\u5931\u8D25");
      return null;
    }
  }
  // 修改 createTimelineView 方法
  async createTimelineView() {
    const timelineContainer = this.container.createDiv("timeline-container");
    const files = this.app.vault.getMarkdownFiles();
    const notesByDate = /* @__PURE__ */ new Map();
    files.forEach((file) => {
      const date = new Date(file.stat.mtime).toLocaleDateString();
      if (!notesByDate.has(date)) {
        notesByDate.set(date, []);
      }
      const notes = notesByDate.get(date);
      if (notes) {
        notes.push(file);
      }
    });
    const sortedDates = Array.from(notesByDate.keys()).sort(
      (a, b) => new Date(b).getTime() - new Date(a).getTime()
    );
    for (const date of sortedDates) {
      const dateGroup = timelineContainer.createDiv("timeline-date-group");
      const dateNode = dateGroup.createDiv("timeline-date-node");
      dateNode.createDiv("timeline-node-circle");
      dateNode.createDiv("timeline-date-label").setText(date);
      const notesList = dateGroup.createDiv("timeline-notes-list");
      const notes = notesByDate.get(date);
      if (notes) {
        await Promise.all(notes.map(async (file) => {
          const card = await this.createNoteCard(file);
          if (card instanceof HTMLElement) {
            card.style.width = "100%";
            notesList.appendChild(card);
          }
        }));
      }
    }
  }
  // 刷新视图（用于搜索和过滤）
  async refreshView() {
    var _a;
    this.loadedNotes.clear();
    if (this.intersectionObserver) {
      this.intersectionObserver.disconnect();
    }
    const files = this.app.vault.getMarkdownFiles();
    this.container.empty();
    const searchTerm = (_a = this.currentSearchTerm) == null ? void 0 : _a.trim().toLowerCase();
    const filteredFiles = await Promise.all(files.map(async (file) => {
      var _a2, _b, _c;
      const matchesSearch = !searchTerm || file.basename.toLowerCase().includes(searchTerm) || await this.fileContentContainsSearch(file);
      let matchesTags = true;
      if (this.selectedTags.size > 0) {
        const cache = this.app.metadataCache.getFileCache(file);
        matchesTags = (_b = (_a2 = cache == null ? void 0 : cache.tags) == null ? void 0 : _a2.some((t) => this.selectedTags.has(t.tag))) != null ? _b : false;
      }
      let matchesDate = true;
      if (this.currentFilter.type === "date") {
        const fileDate = new Date(file.stat.mtime);
        const fileDateStr = fileDate.toISOString().split("T")[0];
        if (((_c = this.currentFilter.value) == null ? void 0 : _c.length) === 7) {
          matchesDate = fileDateStr.startsWith(this.currentFilter.value);
        } else {
          matchesDate = fileDateStr === this.currentFilter.value;
        }
      }
      return matchesSearch && matchesTags && matchesDate ? file : null;
    }));
    const matchedFiles = filteredFiles.filter((file) => file !== null);
    const cards = await Promise.all(
      matchedFiles.map((file) => this.createNoteCard(file))
    );
    cards.forEach((card) => {
      if (card instanceof HTMLElement) {
        card.style.width = `${this.cardSize}px`;
        this.container.appendChild(card);
      }
    });
    this.container.style.gridTemplateColumns = `repeat(auto-fill, ${this.cardSize}px)`;
  }
  // 添加标签切换方法
  toggleTag(tag, tagBtn) {
    if (this.selectedTags.has(tag)) {
      this.selectedTags.delete(tag);
      tagBtn.removeClass("active");
    } else {
      this.selectedTags.add(tag);
      tagBtn.addClass("active");
    }
    const allBtn = this.tagContainer.querySelector("button");
    if (allBtn) {
      allBtn.removeClass("active");
    }
    this.refreshView();
  }
  // 清除标签选择
  clearTagSelection() {
    this.selectedTags.clear();
    this.tagContainer.querySelectorAll(".tag-btn").forEach((btn) => {
      btn.removeClass("active");
    });
  }
  // 处理卡片择
  handleCardSelection(path, event) {
    const card = this.container.querySelector(`[data-path="${path}"]`);
    if (!card) {
      this.clearSelection();
      return;
    }
    if (event.ctrlKey) {
      if (this.selectedNotes.has(path)) {
        this.selectedNotes.delete(path);
        card.removeClass("selected");
      } else {
        this.selectedNotes.add(path);
        card.addClass("selected");
      }
    } else if (event.shiftKey && this.lastSelectedNote) {
      const cards = Array.from(this.container.querySelectorAll(".note-card"));
      const lastIndex = cards.findIndex((c) => c.getAttribute("data-path") === this.lastSelectedNote);
      const currentIndex = cards.findIndex((c) => c.getAttribute("data-path") === path);
      const start = Math.min(lastIndex, currentIndex);
      const end = Math.max(lastIndex, currentIndex);
      cards.forEach((c, i) => {
        const cardPath = c.getAttribute("data-path");
        if (i >= start && i <= end && cardPath) {
          this.selectedNotes.add(cardPath);
          c.addClass("selected");
        }
      });
    } else {
      this.clearSelection();
      this.selectedNotes.add(path);
      card.addClass("selected");
    }
    this.lastSelectedNote = path;
  }
  // 清除所有选择
  clearSelection() {
    this.selectedNotes.clear();
    this.container.querySelectorAll(".note-card.selected").forEach((card) => {
      card.removeClass("selected");
    });
  }
  // 获选中的文件
  getSelectedFiles() {
    return Array.from(this.selectedNotes).map((path) => this.app.vault.getAbstractFileByPath(path)).filter((file) => file instanceof import_obsidian.TFile);
  }
  // 显示右键菜单
  showContextMenu(event, files) {
    const menu = new import_obsidian.Menu();
    if (files.length > 0) {
      menu.addItem((item) => {
        item.setTitle(`\u5728\u65B0\u6807\u7B7E\u9875\u6253\u5F00`).setIcon("link").onClick(async () => {
          for (const file of files) {
            await this.openInAppropriateLeaf(file);
          }
        });
      });
      menu.addItem((item) => {
        item.setTitle(`\u6587\u4EF6\u5217\u8868\u4E2D\u663E\u793A`).setIcon("folder").onClick(async () => {
          const file = files[0];
          await this.openInAppropriateLeaf(file, false);
        });
      });
      menu.addItem((item) => {
        item.setTitle(`\u79FB\u52A8 ${files.length} \u4E2A\u6587`).setIcon("move").onClick(() => {
          const modal = new EnhancedFileSelectionModal(
            this.app,
            files,
            this.recentFolders,
            (folders) => {
              this.recentFolders = folders;
            }
          );
          modal.open();
        });
      });
      menu.addItem((item) => {
        item.setTitle(`\u5220\u9664 ${files.length} \u4E2A\u6587\u4EF6`).setIcon("trash").onClick(async () => {
          const confirm = await new ConfirmModal(
            this.app,
            "\u786E\u8BA4\u5220\u9664",
            `\u662F\u5426\u786E\u5B9A\u8981\u5220\u9664\u9009\u4E2D\u7684 ${files.length} \u4E2A\u6587\u4EF6\uFF1F`
          ).show();
          if (confirm) {
            try {
              for (const file of files) {
                await this.app.vault.trash(file, true);
              }
              files.forEach((file) => {
                const card = this.container.querySelector(`[data-path="${file.path}"]`);
                if (card instanceof HTMLElement) {
                  card.addClass("removing");
                  setTimeout(() => {
                    card.remove();
                    this.selectedNotes.delete(file.path);
                  }, 300);
                }
              });
              console.error(`\u5DF2\u5220\u9664 ${files.length} \u4E2A\u6587\u4EF6`);
            } catch (error) {
              console.error("\u5220\u9664\u6587\u4EF6\u5931\u8D25:", error);
            }
          }
        });
      });
    }
    menu.showAtMouseEvent(event);
  }
  // 修改调整卡片大小的方法
  adjustCardSize(delta) {
    const adjustment = delta > 0 ? -10 : 10;
    const newSize = Math.max(
      this.plugin.settings.minCardWidth,
      Math.min(this.plugin.settings.maxCardWidth, this.cardSize + adjustment)
    );
    if (newSize !== this.cardSize) {
      this.cardSize = newSize;
      this.updateCardSize(newSize);
      this.plugin.saveCardWidth(newSize);
    }
  }
  // 添调整卡片高度的法
  adjustCardHeight(delta) {
    var _a, _b;
    const adjustment = delta > 0 ? -10 : 10;
    const newHeight = Math.max(
      (_a = this.plugin.settings.minCardHeight) != null ? _a : 0,
      Math.min((_b = this.plugin.settings.maxCardHeight) != null ? _b : Infinity, this.cardHeight + adjustment)
    );
    if (newHeight !== this.cardHeight) {
      this.cardHeight = newHeight;
      this.updateCardHeight(newHeight);
      this.plugin.saveCardHeight(newHeight);
    }
  }
  // 添加更新卡片大小的方法
  updateCardSize(width) {
    this.cardSize = width;
    this.container.querySelectorAll(".note-card").forEach((card) => {
      if (card instanceof HTMLElement) {
        card.style.width = `${width}px`;
      }
    });
    this.container.style.gridTemplateColumns = `repeat(auto-fill, ${width}px)`;
  }
  // 添加更新卡片高度的方
  updateCardHeight(height) {
    this.cardHeight = height;
    this.container.querySelectorAll(".note-card").forEach((card) => {
      if (card instanceof HTMLElement) {
        card.style.height = `${height}px`;
      }
    });
  }
  // 创建日历钮
  createCalendarButton(leftTools) {
    const calendarBtn = leftTools.createEl("button", {
      cls: "calendar-toggle-button"
    });
    calendarBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect><line x1="16" y1="2" x2="16" y2="6"></line><line x1="8" y1="2" x2="8" y2="6"></line><line x1="3" y1="10" x2="21" y2="10"></line></svg>
            <span>\u65E5\u5386</span>
        `;
    calendarBtn.addEventListener("click", () => {
      this.toggleCalendar();
      calendarBtn.toggleClass("active", this.isCalendarVisible);
    });
  }
  // 切换日历的显示状态
  toggleCalendar() {
    console.log("\u5207\u6362\u65E5\u5386\u663E\u793A\u72B6\u6001, \u5F53\u524D\u72B6\u6001:", this.isCalendarVisible);
    this.isCalendarVisible = !this.isCalendarVisible;
    if (this.isCalendarVisible) {
      this.showCalendar();
      this.filterNotesByMonth(this.currentDate);
    } else {
      this.hideCalendar();
      this.clearDateFilter();
    }
    const calendarBtn = this.containerEl.querySelector(".calendar-toggle-button");
    if (calendarBtn) {
      calendarBtn.toggleClass("active", this.isCalendarVisible);
    }
  }
  // 添加按月份过滤的法
  filterNotesByMonth(date) {
    const year = date.getFullYear();
    const month = date.getMonth();
    this.currentFilter = {
      type: "date",
      value: `${year}-${(month + 1).toString().padStart(2, "0")}`
    };
    this.refreshView();
  }
  // 显示历
  showCalendar() {
    console.log("\u5F00\u59CB\u663E\u793A\u65E5\u5386");
    if (!this.calendarContainer) {
      console.log("\u521B\u5EFA\u65E5\u5386\u5BB9\u5668");
      const mainLayout2 = this.containerEl.querySelector(".main-layout");
      if (!mainLayout2) {
        console.error("\u672A\u627E\u5230 main-layout \u5143\u7D20");
        return;
      }
      this.calendarContainer = createDiv();
      this.calendarContainer.addClass("calendar-container");
      mainLayout2.insertBefore(this.calendarContainer, mainLayout2.firstChild);
      console.log("\u5386\u5BB9\u5668\u5DF2\u521B\u5EFA:", this.calendarContainer);
    }
    this.calendarContainer.empty();
    this.calendarContainer.style.display = "block";
    this.renderCalendar();
    const mainLayout = this.containerEl.querySelector(".main-layout");
    if (mainLayout) {
      mainLayout.addClass("with-calendar");
      console.log("\u5DF2\u6DFB\u52A0 with-calendar \u7C7B main-layout");
    }
    this.calendarContainer.style.opacity = "1";
    this.calendarContainer.style.visibility = "visible";
  }
  // 隐藏日历 
  hideCalendar() {
    console.log("\u9690\u85CF\u65E5\u5386");
    if (this.calendarContainer) {
      this.calendarContainer.style.display = "none";
      this.calendarContainer.empty();
      const mainLayout = this.containerEl.querySelector(".main-layout");
      if (mainLayout) {
        mainLayout.removeClass("with-calendar");
        console.log("\u5DF2\u79FB\u9664 with-calendar ");
      }
    }
  }
  // 渲染日历
  renderCalendar() {
    if (!this.calendarContainer) {
      return;
    }
    this.calendarContainer.empty();
    const year = this.currentDate.getFullYear();
    const month = this.currentDate.getMonth();
    const header = this.calendarContainer.createDiv("calendar-header");
    const prevBtn = header.createEl("button", { cls: "calendar-nav-btn" });
    prevBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="15 18 9 12 15 6"></polyline></svg>';
    prevBtn.addEventListener("click", (e) => {
      e.stopPropagation();
      this.currentDate = new Date(year, month - 1, 1);
      this.renderCalendar();
      this.filterNotesByMonth(this.currentDate);
    });
    header.createDiv("calendar-title").setText(
      `${year}\u5E74${month + 1}\u6708`
    );
    const nextBtn = header.createEl("button", { cls: "calendar-nav-btn" });
    nextBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="9 18 15 12 9 6"></polyline></svg>';
    nextBtn.addEventListener("click", (e) => {
      e.stopPropagation();
      this.currentDate = new Date(year, month + 1, 1);
      this.renderCalendar();
      this.filterNotesByMonth(this.currentDate);
    });
    const weekdays = ["\u65E5", "\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D"];
    const weekHeader = this.calendarContainer.createDiv("calendar-weekdays");
    weekdays.forEach((day) => {
      weekHeader.createDiv("weekday").setText(day);
    });
    const grid = this.calendarContainer.createDiv("calendar-grid");
    const firstDay = new Date(year, month, 1).getDay();
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    const notesCount = this.getNotesCountByDate(year, month);
    for (let i = 0; i < firstDay; i++) {
      grid.createDiv("calendar-day empty");
    }
    for (let day = 1; day <= daysInMonth; day++) {
      const dayEl = grid.createDiv("calendar-day");
      const dateStr = `${year}-${(month + 1).toString().padStart(2, "0")}-${day.toString().padStart(2, "0")}`;
      dayEl.setText(day.toString());
      dayEl.setAttribute("data-date", dateStr);
      if (this.currentFilter.type === "date" && this.currentFilter.value === dateStr) {
        dayEl.addClass("selected");
      }
      const count = notesCount[dateStr] || 0;
      if (count > 0) {
        dayEl.createDiv("note-count").setText(count.toString());
      }
      dayEl.addEventListener("click", () => {
        this.filterNotesByDate(dateStr);
      });
    }
  }
  // 获取每天的笔记数量
  getNotesCountByDate(year, month) {
    const counts = {};
    const files = this.app.vault.getMarkdownFiles();
    files.forEach((file) => {
      const date = new Date(file.stat.mtime);
      if (date.getFullYear() === year && date.getMonth() === month) {
        const dateStr = date.toISOString().split("T")[0];
        counts[dateStr] = (counts[dateStr] || 0) + 1;
      }
    });
    return counts;
  }
  // 根据日期过滤笔记
  filterNotesByDate(dateStr) {
    if (this.currentFilter.type === "date" && this.currentFilter.value === dateStr) {
      this.clearDateFilter();
      return;
    }
    this.calendarContainer.querySelectorAll(".calendar-day").forEach((day) => {
      day.removeClass("selected");
    });
    this.currentFilter = { type: "date", value: dateStr };
    const selectedDay = this.calendarContainer.querySelector(`.calendar-day[data-date="${dateStr}"]`);
    if (selectedDay) {
      selectedDay.addClass("selected");
    }
    this.refreshView();
  }
  // 清除日期过滤
  clearDateFilter() {
    this.currentFilter = { type: "none" };
    if (this.calendarContainer) {
      this.calendarContainer.querySelectorAll(".calendar-day").forEach((day) => {
        day.removeClass("selected");
      });
    }
    this.refreshView();
  }
  // 打开文件
  async openInAppropriateLeaf(file, openFile = true) {
    const fileExplorer = this.app.workspace.getLeavesOfType("file-explorer")[0];
    if (fileExplorer) {
      this.app.workspace.revealLeaf(fileExplorer);
      try {
        if (openFile) {
          const leaves = this.app.workspace.getLeavesOfType("markdown");
          const currentRoot = this.leaf.getRoot();
          const otherLeaf = leaves.find((leaf) => {
            const root = leaf.getRoot();
            return root !== currentRoot;
          });
          let targetLeaf;
          if (otherLeaf) {
            await otherLeaf.openFile(file);
            targetLeaf = otherLeaf;
          } else {
            targetLeaf = this.app.workspace.getLeaf("tab");
            await targetLeaf.openFile(file);
          }
          this.app.workspace.setActiveLeaf(targetLeaf);
        }
        const fileExplorer2 = this.app.workspace.getLeavesOfType("file-explorer")[0];
        if (fileExplorer2 && fileExplorer2.view) {
          await fileExplorer2.view.revealInFolder(file);
        }
      } catch (error) {
        console.error("\u64CD\u4F5C\u5931\u8D25:", error);
        new import_obsidian.Notice("\u64CD\u4F5C\u5931\u8D25");
      }
    }
  }
  // 高亮文本
  highlightText(text, searchTerm) {
    if (!searchTerm || searchTerm.trim() === "") {
      return text;
    }
    const escapedSearchTerm = searchTerm.replace(/[.*+?^${}()|[\]\\]/g, "\\$&").trim();
    const regex = new RegExp(`(${escapedSearchTerm})`, "gi");
    return text.replace(regex, '<span class="search-highlight">$1</span>');
  }
  // 文件内容搜索
  async fileContentContainsSearch(file) {
    if (!this.currentSearchTerm || this.currentSearchTerm.trim() === "") {
      return true;
    }
    try {
      const content = await this.app.vault.cachedRead(file);
      const searchTerm = this.currentSearchTerm.trim().toLowerCase();
      const fileContent = content.toLowerCase();
      return fileContent.includes(searchTerm);
    } catch (error) {
      console.error("\u8BFB\u53D6\u6587\u4EF6\u5185\u5BB9\u5931\u8D25:", error);
      return false;
    }
  }
  // 在 CardView 类中添加搜索处理方法
  setupSearch() {
    const debounce = (fn, delay) => {
      let timeoutId;
      return (...args) => {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => fn.apply(this, args), delay);
      };
    };
    this.searchInput.addEventListener("input", debounce(() => {
      this.currentSearchTerm = this.searchInput.value.trim();
      this.refreshView();
    }, 200));
  }
  // 创建命令按钮
  createCommandButton(toolbar) {
    const commandContainer = toolbar.createDiv("command-container");
    const commandBtn = commandContainer.createEl("button", {
      cls: "command-button"
    });
    commandBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="1"></circle><circle cx="12" cy="5" r="1"></circle><circle cx="12" cy="19" r="1"></circle></svg>
        `;
    commandBtn.setAttribute("title", "\u547D\u4EE4\u83DC\u5355");
    const menu = commandContainer.createDiv("command-menu");
    menu.style.display = "none";
    const deleteEmptyNotesItem = menu.createDiv("command-menu-item");
    deleteEmptyNotesItem.setText("\u5220\u9664\u6240\u9009\u7A7A\u767D\u7B14\u8BB0");
    deleteEmptyNotesItem.addEventListener("click", () => {
      menu.style.display = "none";
      this.deleteEmptyNotes();
    });
    const batchRenameItem = menu.createDiv("command-menu-item");
    batchRenameItem.setText("\u6279\u91CF\u91CD\u547D\u540D");
    batchRenameItem.addEventListener("click", () => {
      menu.style.display = "none";
      console.log("\u6279\u91CF\u91CD\u547D\u540D\u529F\u80FD\u5B9E\u73B0");
    });
    let isMenuVisible = false;
    commandBtn.addEventListener("click", (e) => {
      e.stopPropagation();
      isMenuVisible = !isMenuVisible;
      menu.style.display = isMenuVisible ? "block" : "none";
    });
    document.addEventListener("click", (e) => {
      if (!commandContainer.contains(e.target)) {
        isMenuVisible = false;
        menu.style.display = "none";
      }
    });
  }
  // 删除空白笔记
  async deleteEmptyNotes() {
    const selectedFiles = this.getSelectedFiles();
    if (selectedFiles.length === 0) {
      new import_obsidian.Notice("\u8BF7\u5148\u9009\u62E9\u8981\u68C0\u67E5\u7684\u7B14\u8BB0");
      return;
    }
    const emptyNotes = [];
    for (const file of selectedFiles) {
      const content = await this.app.vault.read(file);
      if (!content.trim()) {
        emptyNotes.push(file);
      }
    }
    if (emptyNotes.length === 0) {
      new import_obsidian.Notice("\u6240\u9009\u7B14\u8BB0\u4E2D\u6CA1\u6709\u7A7A\u767D\u7B14\u8BB0");
      return;
    }
    const confirmModal = new ConfirmModal(
      this.app,
      "\u786E\u8BA4\u5220\u9664\u7A7A\u767D\u7B14\u8BB0",
      `\u662F\u5426\u5220\u9664\u4EE5\u4E0B ${emptyNotes.length} \u4E2A\u7A7A\u767D\u7B14\u8BB0\uFF1F
${emptyNotes.map((file) => file.basename).join("\n")}`
    );
    if (await confirmModal.show()) {
      for (const file of emptyNotes) {
        await this.app.vault.trash(file, true);
      }
      this.refreshView();
      new import_obsidian.Notice(`\u5220\u9664 ${emptyNotes.length} \u4E2A\u7A7A\u767D\u7B14\u8BB0`);
    }
  }
  // 创建月视图
  createMonthView() {
    if (!this.container.querySelector(".month-view")) {
      const monthContainer = this.container.createDiv("month-view");
      const header = monthContainer.createDiv("month-header");
      const yearGroup = header.createDiv("year-group");
      const prevYearBtn = yearGroup.createEl("button", { cls: "year-nav-btn" });
      prevYearBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="15 18 9 12 15 6"></polyline></svg>';
      const yearDisplay = yearGroup.createDiv("year-display");
      yearDisplay.setText(this.currentDate.getFullYear().toString());
      const nextYearBtn = yearGroup.createEl("button", { cls: "year-nav-btn" });
      nextYearBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="9 18 15 12 9 6"></polyline></svg>';
      prevYearBtn.addEventListener("click", () => this.navigateYear(-1));
      nextYearBtn.addEventListener("click", () => this.navigateYear(1));
      const monthSelector = header.createDiv("month-selector");
      for (let i = 1; i <= 12; i++) {
        const monthBtn = monthSelector.createDiv({
          cls: `month-btn ${i === this.currentDate.getMonth() + 1 ? "active" : ""}`,
          text: i.toString()
        });
        monthBtn.addEventListener("click", () => {
          this.selectMonth(i - 1);
        });
      }
      const todayBtn = header.createEl("button", {
        cls: "today-btn",
        text: "\u4ECA\u5929"
      });
      todayBtn.addEventListener("click", () => this.goToToday());
      monthSelector.addEventListener("wheel", (e) => {
        e.preventDefault();
        this.navigateMonth(e.deltaY > 0 ? 1 : -1);
      });
      const weekdays = ["\u65E5", "\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D"];
      const weekHeader = monthContainer.createDiv("month-weekdays");
      weekdays.forEach((day) => {
        weekHeader.createDiv("weekday").setText(day);
      });
      monthContainer.createDiv("month-grid");
    }
    this.updateMonthView();
  }
  // 选择月份
  selectMonth(month) {
    this.currentDate = new Date(this.currentDate.getFullYear(), month);
    this.updateMonthView();
  }
  // 更新月视图
  updateMonthView() {
    const monthView = this.container.querySelector(".month-view");
    if (!monthView) return;
    const yearDisplay = monthView.querySelector(".year-display");
    if (yearDisplay) {
      yearDisplay.setText(this.currentDate.getFullYear().toString());
    }
    const monthBtns = monthView.querySelectorAll(".month-btn");
    monthBtns.forEach((btn, index) => {
      btn.toggleClass("active", index === this.currentDate.getMonth());
    });
    const grid = monthView.querySelector(".month-grid");
    if (grid) {
      grid.empty();
      this.renderMonthGrid(grid);
    }
  }
  // 月份导航
  navigateMonth(delta) {
    const newDate = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth() + delta);
    if (newDate.getFullYear() !== this.currentDate.getFullYear()) {
      const yearDisplay = this.container.querySelector(".year-display");
      if (yearDisplay) {
        yearDisplay.setText(newDate.getFullYear().toString());
      }
    }
    this.currentDate = newDate;
    this.updateMonthView();
  }
  // 跳转到今天
  goToToday() {
    this.currentDate = /* @__PURE__ */ new Date();
    this.updateMonthView();
  }
  // 渲染月视图网格
  renderMonthGrid(grid) {
    const year = this.currentDate.getFullYear();
    const month = this.currentDate.getMonth();
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const today = /* @__PURE__ */ new Date();
    const isCurrentMonth = today.getFullYear() === year && today.getMonth() === month;
    const notesByDate = this.getNotesByDate(year, month);
    for (let i = 0; i < firstDay.getDay(); i++) {
      grid.createDiv("month-day empty");
    }
    for (let day = 1; day <= lastDay.getDate(); day++) {
      const dateCell = grid.createDiv("month-day");
      const dateStr = `${year}-${String(month + 1).padStart(2, "0")}-${String(day).padStart(2, "0")}`;
      if (isCurrentMonth && today.getDate() === day) {
        dateCell.addClass("today");
      }
      dateCell.createDiv("day-number").setText(String(day));
      const dayNotes = notesByDate[dateStr] || [];
      if (dayNotes.length > 0) {
        const notesList = dateCell.createDiv("day-notes");
        dayNotes.forEach((note) => {
          const noteItem = notesList.createDiv("day-note-item");
          noteItem.setText(note.basename);
          noteItem.addEventListener("click", async (e) => {
            e.stopPropagation();
            await this.openInAppropriateLeaf(note);
          });
          noteItem.addEventListener("mouseenter", async () => {
            try {
              this.previewContainer.empty();
              const content = await this.app.vault.read(note);
              await import_obsidian.MarkdownRenderer.render(
                this.app,
                content,
                this.previewContainer,
                note.path,
                this
              );
            } catch (error) {
              console.error("\u9884\u89C8\u52A0\u8F7D\u5931\u8D25:", error);
            }
          });
        });
      }
    }
  }
  // 获取定月份笔记
  getNotesByDate(year, month) {
    const notesByDate = {};
    const files = this.app.vault.getMarkdownFiles();
    files.forEach((file) => {
      const fileDate = new Date(file.stat.mtime);
      if (fileDate.getFullYear() === year && fileDate.getMonth() === month) {
        const dateStr = fileDate.toISOString().split("T")[0];
        if (!notesByDate[dateStr]) {
          notesByDate[dateStr] = [];
        }
        notesByDate[dateStr].push(file);
      }
    });
    return notesByDate;
  }
  // 格式化月份标题
  formatMonthTitle(date) {
    return `${date.getFullYear()}${date.getMonth() + 1}\u6708`;
  }
  // 年份导航
  navigateYear(delta) {
    this.currentDate = new Date(this.currentDate.getFullYear() + delta, this.currentDate.getMonth());
    this.updateMonthView();
  }
  // 创建列表视图
  async createListView() {
    const files = this.app.vault.getMarkdownFiles();
    const folderStructure = /* @__PURE__ */ new Map();
    files.forEach((file) => {
      var _a;
      const pathParts = file.path.split("/");
      const rootFolder = pathParts.length > 1 ? pathParts[0] : "\u6839\u76EE\u5F55";
      const subFolder = pathParts.length > 2 ? pathParts[1] : "";
      if (!folderStructure.has(rootFolder)) {
        folderStructure.set(rootFolder, /* @__PURE__ */ new Map());
      }
      const subFolders = folderStructure.get(rootFolder);
      if (subFolders) {
        if (!subFolders.has(subFolder)) {
          subFolders.set(subFolder, []);
        }
        (_a = subFolders.get(subFolder)) == null ? void 0 : _a.push(file);
      }
    });
    for (const [rootFolder, subFolders] of folderStructure) {
      const folderGroup = this.container.createDiv("folder-group");
      const folderHeader = folderGroup.createDiv("folder-header");
      const folderIcon = folderHeader.createDiv("folder-icon");
      folderIcon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path></svg>`;
      const folderName = folderHeader.createDiv("folder-name");
      folderName.setText(rootFolder);
      const contentArea = folderGroup.createDiv("folder-content-area");
      const sideNav = contentArea.createDiv("folder-sidebar");
      const rootNotes = subFolders.get("") || [];
      if (rootNotes.length > 0) {
        const rootTitle = sideNav.createDiv("folder-title");
        rootTitle.setText("...");
        rootTitle.addEventListener("click", () => {
          this.showFolderContent(notesArea, rootNotes);
          sideNav.querySelectorAll(".folder-title").forEach((el) => el.removeClass("active"));
          rootTitle.addClass("active");
        });
      }
      for (const [subFolder, notes] of subFolders) {
        if (subFolder !== "") {
          const subTitle = sideNav.createDiv("folder-title sub");
          subTitle.setText(subFolder);
          subTitle.addEventListener("mouseenter", () => {
            this.showFolderContent(notesArea, notes);
            sideNav.querySelectorAll(".folder-title").forEach((el) => el.removeClass("active"));
            subTitle.addClass("active");
          });
        }
      }
      const notesArea = contentArea.createDiv("folder-content");
      this.showFolderContent(notesArea, rootNotes);
    }
  }
  // 显示文件夹内容
  showFolderContent(container, notes) {
    container.empty();
    notes.sort((a, b) => b.stat.mtime - a.stat.mtime);
    const notesList = container.createDiv("notes-list");
    notes.forEach((note) => {
      const noteItem = notesList.createDiv("note-item");
      noteItem.setAttribute("data-path", note.path);
      const noteTitle = noteItem.createDiv("note-title");
      noteTitle.setText(note.basename);
      const noteDate = noteItem.createDiv("note-date");
      noteDate.setText(new Date(note.stat.mtime).toLocaleString());
      this.addNoteItemEvents(noteItem, note);
    });
  }
  // 添加 addNoteItemEvents 方法
  addNoteItemEvents(noteItem, note) {
    noteItem.addEventListener("click", (e) => {
      this.handleCardSelection(note.path, e);
    });
    noteItem.addEventListener("dblclick", async () => {
      await this.openInAppropriateLeaf(note);
    });
    noteItem.addEventListener("contextmenu", (e) => {
      e.preventDefault();
      this.showContextMenu(e, this.getSelectedFiles());
    });
    noteItem.addEventListener("mouseenter", async () => {
      try {
        this.previewContainer.empty();
        const content = await this.app.vault.read(note);
        await import_obsidian.MarkdownRenderer.render(
          this.app,
          content,
          this.previewContainer,
          note.path,
          this
        );
      } catch (error) {
        console.error("\u9884\u89C8\u52A0\u8F7D\u5931\u8D25:", error);
      }
    });
  }
  // 添加刷新标签的方法
  refreshTags() {
    this.loadTags();
  }
  // 在 CardView 类中添加新的方法来处理滚动同步
  setupScrollSync() {
    const cardContainer = this.container;
    const previewContainer = this.previewContainer;
    cardContainer.addEventListener("wheel", (e) => {
      if (e.ctrlKey || e.shiftKey) {
        return;
      }
      cardContainer.style.cursor = "ns-resize";
      setTimeout(() => {
        cardContainer.style.cursor = "default";
      }, 150);
      previewContainer.scrollTop += e.deltaY;
    });
    previewContainer.addEventListener("wheel", (e) => {
      previewContainer.style.cursor = "ns-resize";
      setTimeout(() => {
        previewContainer.style.cursor = "default";
      }, 150);
    });
  }
  setupQuickNoteEvents(input, toolbar, tagSuggestions) {
    var _a, _b, _c;
    const titleInput = (_a = input.parentElement) == null ? void 0 : _a.querySelector(".quick-note-title");
    const tagsContainer = (_b = input.parentElement) == null ? void 0 : _b.querySelector(".tags-container");
    const tagInput = tagsContainer == null ? void 0 : tagsContainer.querySelector(".tag-input");
    if (titleInput && input.parentElement) {
      input.parentElement.insertBefore(titleInput, input.parentElement.firstChild);
    }
    const recentTags = new Set(this.loadRecentTags());
    const tags = /* @__PURE__ */ new Set();
    recentTags.forEach((tag) => {
      const tagItem = tagsContainer == null ? void 0 : tagsContainer.createDiv("tag-item");
      tagItem == null ? void 0 : tagItem.addClass("recent-tag");
      tagItem == null ? void 0 : tagItem.setText(tag);
      const removeBtn = tagItem == null ? void 0 : tagItem.createDiv("remove-tag");
      removeBtn == null ? void 0 : removeBtn.setText("\xD7");
      removeBtn == null ? void 0 : removeBtn.addEventListener("click", (e) => {
        e.stopPropagation();
        recentTags.delete(tag);
        tagItem == null ? void 0 : tagItem.remove();
        this.saveRecentTags(Array.from(recentTags));
      });
      tags.add(tag);
      if (tagInput) tagInput.value = "";
    });
    const addTag = (tagText) => {
      if (!tagText || tags.has(tagText)) return;
      const tagItem = tagsContainer == null ? void 0 : tagsContainer.createDiv("tag-item");
      tagItem == null ? void 0 : tagItem.setText(tagText);
      const removeBtn = tagItem == null ? void 0 : tagItem.createDiv("remove-tag");
      removeBtn == null ? void 0 : removeBtn.setText("\xD7");
      removeBtn == null ? void 0 : removeBtn.addEventListener("click", (e) => {
        e.stopPropagation();
        tags.delete(tagText);
        tagItem == null ? void 0 : tagItem.remove();
        recentTags.add(tagText);
        this.saveRecentTags(Array.from(recentTags));
      });
      tags.add(tagText);
      if (tagInput) tagInput.value = "";
    };
    recentTags.forEach((tag) => {
      const tagItem = tagsContainer == null ? void 0 : tagsContainer.createDiv("tag-item");
      tagItem == null ? void 0 : tagItem.addClass("recent-tag");
      tagItem == null ? void 0 : tagItem.setText(tag);
      const removeBtn = tagItem == null ? void 0 : tagItem.createDiv("remove-tag");
      removeBtn == null ? void 0 : removeBtn.setText("\xD7");
      removeBtn == null ? void 0 : removeBtn.addEventListener("click", (e) => {
        e.stopPropagation();
        recentTags.delete(tag);
        tagItem == null ? void 0 : tagItem.remove();
        this.saveRecentTags(Array.from(recentTags));
      });
      tagItem == null ? void 0 : tagItem.addEventListener("click", () => {
        if (tagItem.hasClass("recent-tag")) {
          tagItem.remove();
          addTag(tag);
          recentTags.delete(tag);
          this.saveRecentTags(Array.from(recentTags));
        }
      });
    });
    input.addEventListener("input", () => {
      const content = input.value;
      if (content.includes("```")) {
        input.addClass("has-code");
      } else {
        input.removeClass("has-code");
      }
    });
    const handleSendNote = async () => {
      var _a2, _b2;
      const title = (_a2 = titleInput == null ? void 0 : titleInput.value) == null ? void 0 : _a2.trim();
      const content = input.value.trim();
      if (!content) {
        new import_obsidian.Notice("\u8BF7\u8F93\u5165\u7B14\u8BB0\u5185\u5BB9");
        return;
      }
      try {
        const tagItems = (_b2 = tagsContainer == null ? void 0 : tagsContainer.querySelectorAll(".tag-item.active")) != null ? _b2 : [];
        const tagTexts = Array.from(tagItems).map((item) => {
          var _a3, _b3;
          return (_b3 = (_a3 = item.textContent) == null ? void 0 : _a3.replace("\xD7", "").trim()) != null ? _b3 : "";
        });
        const tagsContent = tagTexts.map((tag) => `#${tag}`).join(" ");
        const finalContent = tagsContent ? `${tagsContent}

${content}` : content;
        const fileName = title || (/* @__PURE__ */ new Date()).toLocaleDateString("zh-CN", {
          year: "numeric",
          month: "2-digit",
          day: "2-digit"
        }).replace(/\//g, "-");
        const file = await this.createQuickNote(finalContent, [], fileName);
        if (file) {
          this.clearQuickNoteInputs(titleInput != null ? titleInput : null, input, tags, tagsContainer != null ? tagsContainer : null, tagInput != null ? tagInput : null);
          tagsContainer == null ? void 0 : tagsContainer.querySelectorAll(".tag-item").forEach((item) => {
            item.removeClass("active");
            item.addClass("inactive");
          });
          await this.refreshView();
          new import_obsidian.Notice("\u7B14\u8BB0\u521B\u5EFA\u6210\u529F");
        }
      } catch (error) {
        console.error("\u521B\u5EFA\u7B14\u8BB0\u5931\u8D25:", error);
        new import_obsidian.Notice("\u521B\u5EFA\u7B14\u8BB0\u5931\u8D25");
      }
    };
    const sendButton = (_c = input.parentElement) == null ? void 0 : _c.querySelector(".quick-note-send");
    if (sendButton) {
      sendButton.addEventListener("click", async (e) => {
        e.preventDefault();
        e.stopPropagation();
        await handleSendNote();
      });
    }
    input.addEventListener("keydown", async (e) => {
      if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault();
        await handleSendNote();
      }
    });
    if (tagInput) {
      tagInput.addEventListener("keydown", (e) => {
        if (e.key === " " && tagInput.value.trim()) {
          e.preventDefault();
          const tagText = tagInput.value.trim();
          if (tagText && !tags.has(tagText)) {
            const tagItem = tagsContainer == null ? void 0 : tagsContainer.createDiv("tag-item");
            tagItem == null ? void 0 : tagItem.addClass("active");
            tagItem == null ? void 0 : tagItem.setText(tagText);
            const removeBtn = tagItem == null ? void 0 : tagItem.createDiv("remove-tag");
            removeBtn == null ? void 0 : removeBtn.setText("\xD7");
            removeBtn == null ? void 0 : removeBtn.addEventListener("click", (e2) => {
              e2.stopPropagation();
              tags.delete(tagText);
              tagItem == null ? void 0 : tagItem.remove();
            });
            tagItem == null ? void 0 : tagItem.addEventListener("click", (e2) => {
              if (e2.target !== removeBtn) {
                tagItem.toggleClass("active", !tagItem.hasClass("active"));
                tagItem.toggleClass("inactive", tagItem.hasClass("active"));
              }
            });
            tags.add(tagText);
            tagInput.value = "";
          }
        }
      });
    }
  }
  // 添加清理输入状态的辅助方法
  clearQuickNoteInputs(titleInput, contentInput, tags, tagsContainer, tagInput) {
    var _a;
    if (titleInput) {
      titleInput.value = "";
    }
    contentInput.value = "";
    contentInput.style.height = "24px";
    contentInput.style.overflowY = "hidden";
    const toolbar = (_a = contentInput.closest(".quick-note-bar")) == null ? void 0 : _a.querySelector(".quick-note-toolbar");
    if (toolbar) {
      toolbar.querySelectorAll(".quick-note-btn").forEach((btn) => {
        btn.removeClass("active");
      });
    }
  }
  // 高亮新笔记
  highlightNewNote(path) {
    const noteCard = this.container.querySelector(`[data-path="${path}"]`);
    if (noteCard) {
      noteCard.addClass("highlight");
      setTimeout(() => {
        noteCard.removeClass("highlight");
      }, 5e3);
    }
  }
  // 修改 setupDraggable 方法
  setupDraggable(element) {
    let isDragging = false;
    let offsetX;
    let offsetY;
    let startX;
    let startY;
    let isClick = true;
    const dragStart = (e) => {
      const target = e.target;
      if (!element.hasClass("minimized") && (target.closest(".quick-note-input") || target.closest(".quick-note-btn") || target.closest(".control-button") || target.closest(".quick-note-send") || target.closest(".tag-input") || target.closest(".quick-note-title"))) {
        return;
      }
      isDragging = true;
      isClick = true;
      startX = e.clientX;
      startY = e.clientY;
      const elementRect = element.getBoundingClientRect();
      const workspaceLeafContent2 = this.containerEl.closest(".workspace-leaf-content");
      offsetX = e.clientX - elementRect.left;
      offsetY = e.clientY - elementRect.top;
      element.style.transition = "none";
      element.style.cursor = "grabbing";
      element.addClass("dragging");
      e.preventDefault();
      e.stopPropagation();
    };
    const drag = (e) => {
      if (!isDragging) return;
      const moveX = Math.abs(e.clientX - startX);
      const moveY = Math.abs(e.clientY - startY);
      if (moveX > 5 || moveY > 5) {
        isClick = false;
      }
      e.preventDefault();
      e.stopPropagation();
      const workspaceLeafContent2 = this.containerEl.closest(".workspace-leaf-content");
      if (!workspaceLeafContent2) return;
      const leafRect = workspaceLeafContent2.getBoundingClientRect();
      const newX = e.clientX - leafRect.left - offsetX;
      const newY = e.clientY - leafRect.top - offsetY;
      const maxX = workspaceLeafContent2.offsetWidth - element.offsetWidth;
      const maxY = workspaceLeafContent2.offsetHeight - element.offsetHeight;
      const boundedX = Math.max(0, Math.min(newX, maxX));
      const boundedY = Math.max(0, Math.min(newY, maxY));
      element.style.left = `${boundedX}px`;
      element.style.top = `${boundedY}px`;
      element.style.transform = "none";
    };
    const dragEnd = (e) => {
      if (!isDragging) return;
      isDragging = false;
      element.style.transition = "all 0.2s ease";
      element.style.cursor = element.hasClass("minimized") ? "grab" : "default";
      element.removeClass("dragging");
      if (element.hasClass("minimized") && isClick) {
        this.restoreQuickNote(element);
      }
      e.stopPropagation();
    };
    element.addEventListener("mousedown", dragStart);
    document.addEventListener("mousemove", drag);
    document.addEventListener("mouseup", dragEnd);
    const resizeObserver = new ResizeObserver(() => {
      if (!isDragging && !element.hasClass("minimized")) {
        element.style.left = "50%";
        element.style.top = "20px";
        element.style.transform = "translateX(-50%)";
      }
    });
    const workspaceLeafContent = this.containerEl.closest(".workspace-leaf-content");
    if (workspaceLeafContent) {
      resizeObserver.observe(workspaceLeafContent);
    }
    element.addEventListener("selectstart", (e) => {
      if (isDragging) {
        e.preventDefault();
      }
    });
  }
  // 修改 toggleMinimize 方法
  toggleMinimize(element) {
    const isMinimized = element.hasClass("minimized");
    const rect = element.getBoundingClientRect();
    if (isMinimized) {
      const currentLeft = rect.left;
      const currentTop = rect.top;
      element.removeClass("minimized");
      element.style.width = "800px";
      element.style.removeProperty("height");
      element.style.left = `${currentLeft}px`;
      element.style.top = `${currentTop}px`;
      element.style.transform = "none";
    } else {
      const currentLeft = rect.left;
      const currentTop = rect.top;
      element.style.width = "40px";
      element.style.height = "40px";
      element.style.left = `${currentLeft}px`;
      element.style.top = `${currentTop}px`;
      element.style.transform = "none";
      element.addClass("minimized");
    }
  }
  // 添加保存和加载最近标签的方法
  saveRecentTags(tags) {
    localStorage.setItem("recent-tags", JSON.stringify(tags));
  }
  loadRecentTags() {
    const saved = localStorage.getItem("recent-tags");
    return saved ? JSON.parse(saved) : [];
  }
  // 修改 minimizeQuickNote 和 restoreQuickNote 方法
  minimizeQuickNote(element) {
    const workspaceLeafContent = this.containerEl.closest(".workspace-leaf-content");
    if (!workspaceLeafContent) return;
    const leafRect = workspaceLeafContent.getBoundingClientRect();
    const elementRect = element.getBoundingClientRect();
    const position = this.getQuickNotePosition(element);
    const relativeLeft = elementRect.left - leafRect.left;
    const relativeTop = elementRect.top - leafRect.top;
    const minimizedSize = 40;
    element.style.width = `${minimizedSize}px`;
    element.style.height = `${minimizedSize}px`;
    switch (position) {
      case "top-right":
        element.style.left = `${relativeLeft + (element.offsetWidth - minimizedSize)}px`;
        element.style.top = `${relativeTop}px`;
        break;
      case "top-left":
        element.style.left = `${relativeLeft}px`;
        element.style.top = `${relativeTop}px`;
        break;
      case "bottom-right":
        element.style.left = `${relativeLeft + (element.offsetWidth - minimizedSize)}px`;
        element.style.top = `${relativeTop}px`;
        break;
      case "bottom-left":
        element.style.left = `${relativeLeft}px`;
        element.style.top = `${relativeTop}px`;
        break;
      default:
        element.style.left = "50%";
        element.style.transform = "translateX(-50%)";
    }
    element.addClass("minimized");
    const backdrop = this.containerEl.querySelector(".quick-note-backdrop");
    backdrop == null ? void 0 : backdrop.removeClass("active");
  }
  // 恢复快速笔记
  restoreQuickNote(element) {
    if (!element.hasClass("minimized")) return;
    const workspaceLeafContent = this.containerEl.closest(".workspace-leaf-content");
    if (!workspaceLeafContent) return;
    const leafRect = workspaceLeafContent.getBoundingClientRect();
    const elementRect = element.getBoundingClientRect();
    const position = this.getQuickNotePosition(element);
    element.removeClass("minimized");
    element.style.width = "800px";
    element.style.removeProperty("height");
    const relativeLeft = elementRect.left - leafRect.left;
    const relativeTop = elementRect.top - leafRect.top;
    switch (position) {
      case "top-right":
        element.style.left = `${relativeLeft - (800 - 40)}px`;
        element.style.top = `${relativeTop}px`;
        break;
      case "top-left":
        element.style.left = `${relativeLeft}px`;
        element.style.top = `${relativeTop}px`;
        break;
      case "bottom-right":
        element.style.left = `${relativeLeft - (800 - 40)}px`;
        element.style.top = `${relativeTop}px`;
        break;
      case "bottom-left":
        element.style.left = `${relativeLeft}px`;
        element.style.top = `${relativeTop}px`;
        break;
      default:
        element.style.left = "50%";
        element.style.top = "20px";
        element.style.transform = "translateX(-50%)";
    }
    const backdrop = this.containerEl.querySelector(".quick-note-backdrop");
    backdrop == null ? void 0 : backdrop.addClass("active");
  }
  // 添加更新高亮标签的方法
  updateHighlightedTags() {
    const tagButtons = this.tagContainer.querySelectorAll(".tag-btn");
    tagButtons.forEach((btn) => {
      btn.removeClass("highlighted");
    });
    tagButtons.forEach((btn) => {
      var _a;
      const tagText = (_a = btn.textContent) == null ? void 0 : _a.split(" ")[0];
      if (tagText && this.selectedTags.has(tagText)) {
        btn.addClass("highlighted");
      }
    });
  }
  // 修改 addTag 方法
  addTag(tagText, tags, tagsContainer) {
    if (!tagText || tags.has(tagText)) return;
    const tagItem = tagsContainer.createDiv("tag-item");
    tagItem.setText(tagText);
    const removeBtn = tagItem.createDiv("remove-tag");
    removeBtn.setText("\xD7");
    removeBtn.addEventListener("click", (e) => {
      e.stopPropagation();
      tags.delete(tagText);
      tagItem.remove();
      this.updateHighlightedTags();
    });
    tags.add(tagText);
    this.updateHighlightedTags();
  }
  // 添加位置判断方法
  getQuickNotePosition(element) {
    const workspaceLeafContent = this.containerEl.closest(".workspace-leaf-content");
    if (!workspaceLeafContent) return "center";
    const leafRect = workspaceLeafContent.getBoundingClientRect();
    const elementRect = element.getBoundingClientRect();
    const centerX = elementRect.left + elementRect.width / 2;
    const centerY = elementRect.top + elementRect.height / 2;
    const isRight = centerX > leafRect.left + leafRect.width / 2;
    const isBottom = centerY > leafRect.top + leafRect.height / 2;
    if (isRight && !isBottom) return "top-right";
    if (!isRight && !isBottom) return "top-left";
    if (isRight && isBottom) return "bottom-right";
    if (!isRight && isBottom) return "bottom-left";
    return "center";
  }
  // 添加观察笔记内容的方法
  observeNoteContent(element, file) {
    if (this.intersectionObserver) {
      this.intersectionObserver.observe(element);
    }
  }
  // 添加加载笔记内容的方法
  async loadNoteContent(container, file) {
    if (this.loadedNotes.has(file.path)) return;
    try {
      container.empty();
      const content = await this.app.vault.read(file);
      await import_obsidian.MarkdownRenderer.render(
        this.app,
        content,
        container,
        file.path,
        this
      );
      if (this.currentSearchTerm) {
        const contentElements = container.querySelectorAll("p, li, h1, h2, h3, h4, h5, h6");
        contentElements.forEach((element) => {
          const originalText = element.textContent || "";
          if (originalText.toLowerCase().includes(this.currentSearchTerm.toLowerCase())) {
            element.innerHTML = this.highlightText(originalText, this.currentSearchTerm);
          }
        });
      }
      this.loadedNotes.add(file.path);
      console.log("\u52A0\u8F7D\u7B14\u8BB0\u5185\u5BB9\u6210\u529F:", file.path);
    } catch (error) {
      console.error("\u52A0\u8F7D\u7B14\u8BB0\u5185\u5BB9\u5931\u8D25:", error);
      container.setText("\u52A0\u8F7D\u5931\u8D25");
    }
  }
  // 修改 onClose 方法
  async onClose() {
    if (this.intersectionObserver) {
      this.intersectionObserver.disconnect();
    }
    this.loadedNotes.clear();
  }
};
var ConfirmModal = class extends import_obsidian.Modal {
  constructor(app, title, message) {
    super(app);
    this.result = false;
    this.resolvePromise = () => {
    };
    this.title = title;
    this.message = message;
  }
  async show() {
    return new Promise((resolve) => {
      this.resolvePromise = resolve;
      this.open();
    });
  }
  // 打开模态框
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h3", { text: this.title });
    contentEl.createEl("p", { text: this.message });
    const buttonContainer = contentEl.createDiv("button-container");
    const confirmButton = buttonContainer.createEl("button", { text: "\u786E\u8BA4" });
    confirmButton.addEventListener("click", () => {
      this.result = true;
      this.close();
    });
    const cancelButton = buttonContainer.createEl("button", { text: "\u53D6\u6D88" });
    cancelButton.addEventListener("click", () => {
      this.result = false;
      this.close();
    });
  }
  // 关闭模态框
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    this.resolvePromise(this.result);
  }
};
var EnhancedFileSelectionModal = class extends import_obsidian.Modal {
  constructor(app, files, recentFolders, onFoldersUpdate) {
    super(app);
    this.selectedFolder = null;
    this.files = files;
    this.recentFolders = recentFolders;
    this.onFoldersUpdate = onFoldersUpdate;
  }
  // 打开模态框
  async onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h3", {
      text: `\u79FB\u52A8 ${this.files.length} \u4E2A\u6587\u4EF6`
    });
    if (this.recentFolders.length > 0) {
      const recentSection = contentEl.createDiv("recent-folders-section");
      recentSection.createEl("h4", { text: "\u6700\u4F7F\u7528" });
      const recentList = recentSection.createDiv("recent-folders-list");
      this.recentFolders.forEach((folder) => {
        const item = recentList.createDiv("folder-item recent");
        item.setText(folder);
        item.addEventListener("click", () => this.selectFolder(item, folder));
      });
    }
    const folderList = contentEl.createDiv("folder-list");
    const folders = this.getFoldersWithHierarchy();
    this.createFolderTree(folderList, folders);
    const buttonContainer = contentEl.createDiv("modal-button-container");
    const confirmButton = buttonContainer.createEl("button", {
      text: "\u786E\u8BA4\u79FB\u52A8",
      cls: "mod-cta"
    });
    confirmButton.addEventListener("click", () => {
      if (this.selectedFolder) {
        this.moveFiles(this.selectedFolder);
      }
    });
    const cancelButton = buttonContainer.createEl("button", {
      text: "\u53D6\u6D88"
    });
    cancelButton.addEventListener("click", () => this.close());
  }
  // 获取文件夹层次结构
  getFoldersWithHierarchy() {
    const folders = [];
    const seen = /* @__PURE__ */ new Set();
    this.app.vault.getAllLoadedFiles().forEach((file) => {
      if (file instanceof import_obsidian.TFolder) {
        const parts = file.path.split("/");
        let currentPath = "";
        let level = 0;
        parts.forEach((part) => {
          if (part) {
            currentPath += (currentPath ? "/" : "") + part;
            if (!seen.has(currentPath)) {
              seen.add(currentPath);
              folders.push({
                path: currentPath,
                name: part,
                level
              });
            }
            level++;
          }
        });
      }
    });
    return folders.sort((a, b) => a.path.localeCompare(b.path));
  }
  // 创建文件夹树
  createFolderTree(container, folders) {
    folders.forEach((folder) => {
      const item = container.createDiv({
        cls: "folder-item"
      });
      item.style.paddingLeft = `${folder.level * 20 + 10}px`;
      const icon = item.createSpan({
        cls: "folder-icon"
      });
      icon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path></svg>`;
      const nameSpan = item.createSpan({
        cls: "folder-name"
      });
      nameSpan.textContent = folder.name;
      item.addEventListener("click", () => this.selectFolder(item, folder.path));
    });
  }
  // 选择文件夹
  selectFolder(element, path) {
    this.contentEl.querySelectorAll(".folder-item").forEach((item) => {
      item.removeClass("selected");
    });
    element.addClass("selected");
    this.selectedFolder = path;
  }
  // 移动文件
  async moveFiles(targetFolder) {
    const confirmModal = new ConfirmModal(
      this.app,
      "\u786E\u8BA4 \u79FB\u52A8",
      `\u662F\u5426\u5C06\u9009\u4E2D\u7684 ${this.files.length} \u4E2A\u6587\u4EF6\u79FB\u52A8\u5230 "${targetFolder}"\uFF1F`
    );
    if (await confirmModal.show()) {
      for (const file of this.files) {
        const newPath = `${targetFolder}/${file.name}`;
        await this.app.fileManager.renameFile(file, newPath);
      }
      this.recentFolders = [targetFolder, ...this.recentFolders.filter((f) => f !== targetFolder)].slice(0, 5);
      this.onFoldersUpdate(this.recentFolders);
      this.close();
    }
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  defaultView: "card",
  cardWidth: 280,
  minCardWidth: 280,
  maxCardWidth: 600,
  showTagCount: false,
  cardHeight: 280,
  minCardHeight: 200,
  maxCardHeight: 800
};
var CardViewSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian2.Setting(containerEl).setName("\u9ED8\u8BA4\u89C6\u56FE").setDesc("\u9009\u62E9\u9ED8\u8BA4\u7684\u89C6\u56FE1\u6A21\u5F0F").addDropdown((dropdown) => {
      dropdown.addOption("card", "\u5361\u7247\u89C6\u56FE").addOption("list", "\u5217\u8868\u89C6\u56FE").addOption("timeline", "\u65F6\u95F4\u8F74\u89C6\u56FE").addOption("month", "\u6708\u89C6\u56FE").setValue(this.plugin.settings.defaultView);
      dropdown.onChange(async (value) => {
        if (value === "card" || value === "list" || value === "timeline" || value === "month") {
          this.plugin.settings.defaultView = value;
          await this.plugin.saveSettings();
        }
      });
    });
    new import_obsidian2.Setting(containerEl).setName("\u5361\u7247\u5BBD\u5EA6").setDesc("\u8BBE\u7F6E\u5361\u7247\u7684\u5BBD\u5EA6\uFF08280-600\u50CF\u7D20\uFF09").addText((text) => text.setPlaceholder("280").setValue(this.plugin.settings.cardWidth.toString()).onChange(async (value) => {
      const width = Number(value);
      if (!isNaN(width) && width >= 280 && width <= 600) {
        this.plugin.settings.cardWidth = width;
        await this.plugin.saveSettings();
        this.plugin.updateAllCardViews();
      }
    }));
    new import_obsidian2.Setting(containerEl).setName("\u6700\u5C0F\u5BBD\u5EA6").setDesc("\u8BBE\u7F6E\u5361\u7247\u7684\u6700\u5C0F\u5BBD\u5EA6\uFF08\u50CF\u7D20\uFF09").addText((text) => text.setPlaceholder("280").setValue(this.plugin.settings.minCardWidth.toString()).onChange(async (value) => {
      const width = Number(value);
      if (!isNaN(width) && width >= 200) {
        this.plugin.settings.minCardWidth = width;
        await this.plugin.saveSettings();
      }
    }));
    new import_obsidian2.Setting(containerEl).setName("\u6700\u5927\u5BBD\u5EA6").setDesc("\u8BBE\u7F6E\u5361\u7247\u7684\u6700\u5927\u5BBD\u5EA6\uFF08\u50CF\u7D20\uFF09").addText((text) => text.setPlaceholder("600").setValue(this.plugin.settings.maxCardWidth.toString()).onChange(async (value) => {
      const width = Number(value);
      if (!isNaN(width) && width <= 800) {
        this.plugin.settings.maxCardWidth = width;
        await this.plugin.saveSettings();
      }
    }));
    new import_obsidian2.Setting(containerEl).setName("\u663E\u793A\u6807\u7B7E\u5F15\u7528\u6570\u91CF").setDesc("\u5728\u6807\u7B7E\u540E\u663E\u793A\u4F7F\u7528\u8BE5\u6807\u7B7E\u7684\u7B14\u8BB0\u6570\u91CF").addToggle((toggle) => toggle.setValue(this.plugin.settings.showTagCount).onChange(async (value) => {
      this.plugin.settings.showTagCount = value;
      await this.plugin.saveSettings();
      this.plugin.refreshAllTags();
    }));
    new import_obsidian2.Setting(containerEl).setName("\u5361\u7247\u9AD8\u5EA6").setDesc("\u8BBE\u7F6E\u5361\u7247\u7684\u9AD8\u5EA6\uFF08200-800\u50CF\u7D20\uFF09").addText((text) => text.setPlaceholder("280").setValue(this.plugin.settings.cardHeight.toString()).onChange(async (value) => {
      const height = Number(value);
      if (!isNaN(height) && height >= 200 && height <= 800) {
        this.plugin.settings.cardHeight = height;
        await this.plugin.saveSettings();
        this.plugin.updateAllCardViews();
      }
    }));
    new import_obsidian2.Setting(containerEl).setName("\u6700\u5C0F\u9AD8\u5EA6").setDesc("\u8BBE\u7F6E\u5361\u7247\u7684\u6700\u5C0F\u9AD8\u5EA6\uFF08\u50CF\u7D20\uFF09").addText((text) => text.setPlaceholder("200").setValue(this.plugin.settings.minCardHeight.toString()).onChange(async (value) => {
      const height = Number(value);
      if (!isNaN(height) && height >= 200) {
        this.plugin.settings.minCardHeight = height;
        await this.plugin.saveSettings();
      }
    }));
    new import_obsidian2.Setting(containerEl).setName("\u6700\u5927\u9AD8\u5EA6").setDesc("\u8BBE\u7F6E\u5361\u7247\u7684\u6700\u5927\u9AD8\u5EA6\uFF08\u50CF\u7D20\uFF09").addText((text) => text.setPlaceholder("800").setValue(this.plugin.settings.maxCardHeight.toString()).onChange(async (value) => {
      const height = Number(value);
      if (!isNaN(height) && height <= 800) {
        this.plugin.settings.maxCardHeight = height;
        await this.plugin.saveSettings();
      }
    }));
  }
};
var CardViewPlugin = class extends import_obsidian2.Plugin {
  constructor(app, manifest) {
    super(app, manifest);
    this.settings = DEFAULT_SETTINGS;
  }
  async onload() {
    await this.loadSettings();
    this.registerView(
      VIEW_TYPE_CARD,
      (leaf) => new CardView(leaf, this)
    );
    this.addRibbonIcon("layout-grid", "\u5361\u7247\u89C6\u56FE", () => {
      this.activateView();
    });
    this.addSettingTab(new CardViewSettingTab(this.app, this));
    this.app.workspace.on("file-open", (file) => {
      if (file) {
        this.handleFileOpen(file);
      }
    });
  }
  handleFileOpen(file) {
    console.log(`\u6587\u4EF6 ${file.path} \u88AB1\u6253\u5F00`);
  }
  handleFolderOpen(folder) {
    console.log(`\u6587\u4EF6\u5939 ${folder} \u88AB\u6253\u5F00`);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf = workspace.getLeavesOfType(VIEW_TYPE_CARD)[0];
    if (!leaf) {
      leaf = workspace.getLeaf("tab");
      await leaf.setViewState({
        type: VIEW_TYPE_CARD,
        active: true
      });
    }
    workspace.revealLeaf(leaf);
  }
  updateAllCardViews() {
    this.app.workspace.getLeavesOfType(VIEW_TYPE_CARD).forEach((leaf) => {
      const view = leaf.view;
      if (view) {
        view.updateCardSize(this.settings.cardWidth);
      }
    });
  }
  async saveCardWidth(width) {
    this.settings.cardWidth = width;
    await this.saveSettings();
  }
  refreshAllTags() {
    this.app.workspace.getLeavesOfType(VIEW_TYPE_CARD).forEach((leaf) => {
      const view = leaf.view;
      if (view) {
        view.refreshTags();
      }
    });
  }
  async saveCardHeight(height) {
    this.settings.cardHeight = height;
    await this.saveSettings();
  }
};
//# sourceMappingURL=main.js.map
