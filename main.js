/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// main.ts
__export(exports, {
  default: () => CardViewPlugin
});
var import_obsidian2 = __toModule(require("obsidian"));

// cardView.ts
var import_obsidian = __toModule(require("obsidian"));
var VIEW_TYPE_CARD = "card-view";
var CardView = class extends import_obsidian.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.isPreviewCollapsed = false;
    this.currentFolder = null;
    this.currentSearchTerm = "";
    this.selectedTags = new Set();
    this.selectedNotes = new Set();
    this.lastSelectedNote = null;
    this.recentFolders = [];
    this.cardSize = 280;
    this.MIN_CARD_SIZE = 280;
    this.MAX_CARD_SIZE = 600;
    this.isCalendarVisible = false;
    this.currentDate = new Date();
    this.currentFilter = { type: "none" };
    this.plugin = plugin;
    this.currentView = plugin.settings.defaultView;
  }
  getViewType() {
    return VIEW_TYPE_CARD;
  }
  getDisplayText() {
    return "\u5361\u7247\u89C6\u56FE";
  }
  async onOpen() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.addClass("card-view-container");
    const mainLayout = containerEl.createDiv("main-layout");
    const contentSection = mainLayout.createDiv("content-section");
    const toolbar = contentSection.createDiv("card-view-toolbar");
    const leftTools = toolbar.createDiv("toolbar-left");
    const newNoteBtn = leftTools.createEl("button", {
      cls: "new-note-button"
    });
    newNoteBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-plus"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>
            <span>\u65B0\u5EFA\u7B14\u8BB0</span>
        `;
    newNoteBtn.addEventListener("click", () => this.createNewNote());
    this.createCalendarButton(leftTools);
    const viewSwitcher = leftTools.createDiv("view-switcher");
    this.createViewSwitcher(viewSwitcher);
    const searchContainer = toolbar.createDiv("search-container");
    this.searchInput = searchContainer.createEl("input", {
      type: "text",
      placeholder: "\u641C\u7D22\u7B14\u8BB0...",
      cls: "search-input"
    });
    this.searchInput.addEventListener("input", () => {
      this.currentSearchTerm = this.searchInput.value;
      this.refreshView();
    });
    this.tagContainer = contentSection.createDiv("tag-filter");
    await this.loadTags();
    const contentArea = contentSection.createDiv("card-view-content");
    this.container = contentArea.createDiv("card-container");
    this.cardSize = this.plugin.settings.cardWidth;
    this.container.style.gridTemplateColumns = `repeat(auto-fill, ${this.cardSize}px)`;
    const previewWrapper = mainLayout.createDiv("preview-wrapper");
    this.previewContainer = previewWrapper.createDiv("preview-container");
    const previewControls = previewWrapper.createDiv("preview-controls");
    const toggleButton = previewControls.createEl("button", {
      cls: "preview-toggle",
      attr: { "aria-label": "\u6298\u53E0\u9884\u89C8" }
    });
    toggleButton.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-right"><polyline points="9 18 15 12 9 6"></polyline></svg>`;
    toggleButton.addEventListener("click", () => this.togglePreview());
    this.previewResizer = previewWrapper.createDiv("preview-resizer");
    this.setupResizer();
    document.addEventListener("wheel", (e) => {
      if (e.ctrlKey) {
        e.preventDefault();
        this.adjustCardSize(e.deltaY);
      }
    }, { passive: false });
    await this.loadNotes();
  }
  async loadTags() {
    const tags = this.getAllTags();
    const allTagBtn = this.tagContainer.createEl("button", {
      text: "All",
      cls: "tag-btn active"
    });
    allTagBtn.addEventListener("click", () => {
      this.clearTagSelection();
      allTagBtn.addClass("active");
      this.refreshView();
    });
    tags.forEach((tag) => {
      const tagBtn = this.tagContainer.createEl("button", {
        text: tag,
        cls: "tag-btn"
      });
      tagBtn.addEventListener("click", (e) => {
        e.stopPropagation();
        this.toggleTag(tag, tagBtn);
      });
    });
  }
  getAllTags() {
    const tags = new Set();
    this.app.vault.getMarkdownFiles().forEach((file) => {
      const cache = this.app.metadataCache.getFileCache(file);
      if (cache == null ? void 0 : cache.tags) {
        cache.tags.forEach((tag) => tags.add(tag.tag));
      }
    });
    return Array.from(tags);
  }
  createViewSwitcher(container) {
    const views = [
      { id: "card", icon: "grid", text: "\u5361\u7247\u89C6\u56FE" },
      { id: "list", icon: "list", text: "\u5217\u8868\u89C6\u56FE" },
      { id: "timeline", icon: "clock", text: "\u65F6\u95F4\u8F74\u89C6\u56FE" }
    ];
    views.forEach((view) => {
      const btn = container.createEl("button", {
        cls: `view-switch-btn ${view.id === this.currentView ? "active" : ""}`
      });
      const iconHtml = {
        "grid": '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="7" height="7"></rect><rect x="14" y="3" width="7" height="7"></rect><rect x="14" y="14" width="7" height="7"></rect><rect x="3" y="14" width="7" height="7"></rect></svg>',
        "list": '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="8" y1="6" x2="21" y2="6"></line><line x1="8" y1="12" x2="21" y2="12"></line><line x1="8" y1="18" x2="21" y2="18"></line><line x1="3" y1="6" x2="3.01" y2="6"></line><line x1="3" y1="12" x2="3.01" y2="12"></line><line x1="3" y1="18" x2="3.01" y2="18"></line></svg>',
        "clock": '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><polyline points="12 6 12 12 16 14"></polyline></svg>'
      };
      const iconSpan = btn.createSpan({ cls: "view-switch-icon" });
      iconSpan.innerHTML = iconHtml[view.icon];
      btn.createSpan({ text: view.text, cls: "view-switch-text" });
      btn.addEventListener("click", () => {
        container.querySelectorAll(".view-switch-btn").forEach((b) => b.removeClass("active"));
        btn.addClass("active");
        this.switchView(view.id);
      });
    });
  }
  async loadNotes() {
    const files = this.app.vault.getMarkdownFiles();
    this.container.empty();
    const cards = await Promise.all(files.map((file) => this.createNoteCard(file)));
    cards.forEach((card) => {
      if (card instanceof HTMLElement) {
        card.style.width = `${this.cardSize}px`;
        this.container.appendChild(card);
      }
    });
    this.container.style.gridTemplateColumns = `repeat(auto-fill, ${this.cardSize}px)`;
  }
  async createNoteCard(file) {
    const card = document.createElement("div");
    card.addClass("note-card");
    card.setAttribute("data-path", file.path);
    const header = card.createDiv("note-card-header");
    const lastModified = header.createDiv("note-date");
    lastModified.setText(new Date(file.stat.mtime).toLocaleDateString());
    const folderPath = header.createDiv("note-folder");
    const folder = file.parent ? file.parent.path === "/" ? "\u6839\u76EE\u5F55" : file.parent.path : "\u6839\u76EE\u5F55";
    folderPath.setText(folder);
    folderPath.setAttribute("title", `\u6253\u5F00\u6587\u4EF6\u5939: ${folder}`);
    folderPath.addClass("clickable");
    folderPath.addEventListener("click", async (e) => {
      e.stopPropagation();
      e.preventDefault();
      const fileExplorer = this.app.workspace.getLeavesOfType("file-explorer")[0];
      if (fileExplorer) {
        this.app.workspace.revealLeaf(fileExplorer);
        const fileExplorerView = fileExplorer.view;
        if (fileExplorerView.expandFolder) {
          await this.revealFolderInExplorer(folder);
          fileExplorer.setEphemeralState({ focus: true });
          folderPath.addClass("folder-clicked");
          setTimeout(() => {
            folderPath.removeClass("folder-clicked");
          }, 200);
        }
      }
    });
    const openButton = header.createDiv("note-open-button");
    openButton.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path><polyline points="15 3 21 3 21 9"></polyline><line x1="10" y1="14" x2="21" y2="3"></line></svg>`;
    openButton.setAttribute("title", "\u5728\u65B0\u6807\u7B7E\u9875\u4E2D\u6253\u5F00");
    openButton.style.opacity = "0";
    const cardContent = card.createDiv("note-card-content");
    const title = cardContent.createDiv("note-title");
    let displayTitle = file.basename;
    const timePattern = /^\d{4}[-./]\d{2}[-./]\d{2}/;
    if (timePattern.test(displayTitle)) {
      displayTitle = displayTitle.replace(timePattern, "").trim();
    }
    title.setText(displayTitle);
    try {
      const content = await this.app.vault.read(file);
      const noteContent = cardContent.createDiv("note-content");
      await import_obsidian.MarkdownRenderer.renderMarkdown(content, noteContent, file.path, this);
      card.addEventListener("mouseenter", async () => {
        openButton.style.opacity = "1";
        title.style.opacity = "0";
        noteContent.style.display = "block";
        try {
          this.previewContainer.empty();
          await import_obsidian.MarkdownRenderer.renderMarkdown(content, this.previewContainer, file.path, this);
        } catch (error) {
          console.error("\u9884\u89C8\u52A0\u8F7D\u5931\u8D25:", error);
        }
      });
      card.addEventListener("mouseleave", () => {
        openButton.style.opacity = "0";
        title.style.opacity = "1";
        noteContent.style.display = "none";
      });
      openButton.addEventListener("click", async (e) => {
        e.stopPropagation();
        await this.openInAppropriateLeaf(file);
      });
      card.addEventListener("click", (e) => {
        this.handleCardSelection(file.path, e);
      });
      card.addEventListener("dblclick", async () => {
        await this.openInAppropriateLeaf(file);
      });
      card.addEventListener("contextmenu", (e) => {
        e.preventDefault();
        this.showContextMenu(e, this.getSelectedFiles());
      });
    } catch (error) {
      console.error("\u7B14\u8BB0\u52A0\u8F7D\u5931\u8D25:", error);
    }
    card.addEventListener("mouseenter", async () => {
      openButton.style.opacity = "1";
    });
    card.addEventListener("mouseleave", () => {
      openButton.style.opacity = "0";
    });
    return card;
  }
  switchView(view) {
    this.currentView = view;
    this.container.setAttribute("data-view", view);
    this.container.empty();
    if (view === "timeline") {
      this.createTimelineView();
    } else {
      this.loadNotes();
    }
  }
  async filterByTag(tag) {
    const files = this.app.vault.getMarkdownFiles();
    this.container.empty();
    const filteredFiles = files.filter((file) => {
      var _a;
      const cache = this.app.metadataCache.getFileCache(file);
      return (_a = cache == null ? void 0 : cache.tags) == null ? void 0 : _a.some((t) => t.tag === tag);
    });
    const cards = await Promise.all(filteredFiles.map((file) => this.createNoteCard(file)));
    cards.forEach((card) => {
      this.container.appendChild(card);
    });
    this.tagContainer.querySelectorAll("button").forEach((btn) => {
      if (btn.textContent === tag) {
        btn.addClass("active-tag");
      } else {
        btn.removeClass("active-tag");
      }
    });
  }
  togglePreview() {
    this.isPreviewCollapsed = !this.isPreviewCollapsed;
    if (this.isPreviewCollapsed) {
      this.previewContainer.addClass("collapsed");
    } else {
      this.previewContainer.removeClass("collapsed");
    }
  }
  setupResizer() {
    let startX;
    let startWidth;
    const startResize = (e) => {
      e.preventDefault();
      startX = e.pageX;
      startWidth = parseInt(getComputedStyle(this.previewContainer).width, 10);
      document.addEventListener("mousemove", resize);
      document.addEventListener("mouseup", stopResize);
      document.body.style.cursor = "col-resize";
      this.previewResizer.addClass("resizing");
    };
    const resize = (e) => {
      const width = startWidth - (e.pageX - startX);
      if (width >= 50 && width <= 800) {
        this.previewContainer.style.width = `${width}px`;
        this.adjustContentWidth();
        if (this.isPreviewCollapsed) {
          this.isPreviewCollapsed = false;
          this.previewContainer.removeClass("collapsed");
        }
      }
    };
    const stopResize = () => {
      document.removeEventListener("mousemove", resize);
      document.removeEventListener("mouseup", stopResize);
      document.body.style.cursor = "";
      this.previewResizer.removeClass("resizing");
    };
    this.previewResizer.addEventListener("mousedown", startResize);
  }
  adjustContentWidth() {
    const mainLayout = this.containerEl.querySelector(".main-layout");
    const previewWidth = this.previewContainer.offsetWidth;
    const contentSection = this.containerEl.querySelector(".content-section");
    if (mainLayout && contentSection) {
      const totalWidth = mainLayout.offsetWidth;
      const newContentWidth = totalWidth - previewWidth - 4;
      contentSection.style.width = `${newContentWidth}px`;
      const availableWidth = newContentWidth - 32;
      const columns = Math.floor(availableWidth / this.cardSize);
      const gap = 16;
      const actualCardWidth = (availableWidth - (columns - 1) * gap) / columns;
      this.container.style.gridTemplateColumns = `repeat(${columns}, ${actualCardWidth}px)`;
    }
  }
  highlightFolder(folder) {
    this.currentFolder = this.currentFolder === folder ? null : folder;
    this.container.querySelectorAll(".note-card").forEach((card) => {
      const folderElement = card.querySelector(".note-folder");
      const cardFolder = folderElement ? folderElement.textContent : null;
      if (cardFolder) {
        card.toggleClass("folder-highlight", cardFolder === folder);
      }
    });
  }
  async revealFolderInExplorer(folder) {
    const fileExplorer = this.app.workspace.getLeavesOfType("file-explorer")[0];
    if (fileExplorer) {
      const fileExplorerView = fileExplorer.view;
      if (folder === "\u6839\u76EE\u5F55") {
        if (fileExplorerView.expandFolder) {
          await fileExplorerView.expandFolder("/");
        }
        return;
      }
      if (fileExplorerView.expandFolder) {
        const folderParts = folder.split("/");
        let currentPath = "";
        for (const part of folderParts) {
          currentPath += (currentPath ? "/" : "") + part;
          await fileExplorerView.expandFolder(currentPath);
        }
        if (fileExplorerView.setSelection) {
          await fileExplorerView.setSelection(folder);
        }
      }
    }
  }
  async createNewNote() {
    const date = new Date();
    const fileName = ` ${date.toLocaleString().replace(/[/:]/g, "-")}\u672A\u547D\u540D\u7B14\u8BB0`;
    try {
      const file = await this.app.vault.create(`${fileName}.md`, "# " + fileName + "\n\n");
      const leaf = this.app.workspace.getLeaf("tab");
      await leaf.openFile(file);
      this.loadNotes();
    } catch (error) {
      console.error("\u521B\u5EFA\u7B14\u8BB0\u5931\u8D25:", error);
    }
  }
  async createTimelineView() {
    const timelineContainer = this.container.createDiv("timeline-container");
    const files = this.app.vault.getMarkdownFiles();
    const notesByDate = new Map();
    files.forEach((file) => {
      const date = new Date(file.stat.mtime).toLocaleDateString();
      if (!notesByDate.has(date)) {
        notesByDate.set(date, []);
      }
      const notes = notesByDate.get(date);
      if (notes) {
        notes.push(file);
      }
    });
    const sortedDates = Array.from(notesByDate.keys()).sort((a, b) => new Date(b).getTime() - new Date(a).getTime());
    for (const date of sortedDates) {
      const dateGroup = timelineContainer.createDiv("timeline-date-group");
      const dateNode = dateGroup.createDiv("timeline-date-node");
      dateNode.createDiv("timeline-node-circle");
      dateNode.createDiv("timeline-date-label").setText(date);
      const notesList = dateGroup.createDiv("timeline-notes-list");
      const notes = notesByDate.get(date);
      if (notes) {
        for (const file of notes) {
          const noteItem = notesList.createDiv("timeline-note-item");
          noteItem.createDiv("timeline-note-marker");
          const noteContent = noteItem.createDiv("timeline-note-content");
          noteContent.createDiv("timeline-note-title").setText(file.basename);
          noteItem.addEventListener("click", async () => {
            const leaf = this.app.workspace.getLeaf("tab");
            await leaf.openFile(file);
          });
          noteItem.addEventListener("mouseenter", async () => {
            try {
              this.previewContainer.empty();
              const content = await this.app.vault.read(file);
              await import_obsidian.MarkdownRenderer.renderMarkdown(content, this.previewContainer, file.path, this);
            } catch (error) {
              console.error("\u9884\u89C8\u52A0\u8F7D\u5931\u8D25:", error);
            }
          });
        }
      }
    }
  }
  async refreshView() {
    const files = this.app.vault.getMarkdownFiles();
    this.container.empty();
    const filteredFiles = files.filter((file) => {
      var _a, _b;
      const matchesSearch = !this.currentSearchTerm || file.basename.toLowerCase().includes(this.currentSearchTerm.toLowerCase());
      let matchesTags = true;
      if (this.selectedTags.size > 0) {
        const cache = this.app.metadataCache.getFileCache(file);
        matchesTags = (_b = (_a = cache == null ? void 0 : cache.tags) == null ? void 0 : _a.some((t) => this.selectedTags.has(t.tag))) != null ? _b : false;
      }
      let matchesDate = true;
      if (this.currentFilter.type === "date") {
        const fileDate = new Date(file.stat.mtime);
        const fileDateStr = fileDate.toISOString().split("T")[0];
        if (this.currentFilter.value.length === 7) {
          matchesDate = fileDateStr.startsWith(this.currentFilter.value);
        } else {
          matchesDate = fileDateStr === this.currentFilter.value;
        }
      }
      return matchesSearch && matchesTags && matchesDate;
    });
    const cards = await Promise.all(filteredFiles.map((file) => this.createNoteCard(file, this.currentSearchTerm)));
    cards.forEach((card) => {
      if (card instanceof HTMLElement) {
        card.style.width = `${this.cardSize}px`;
        this.container.appendChild(card);
      }
    });
    this.container.style.gridTemplateColumns = `repeat(auto-fill, ${this.cardSize}px)`;
  }
  toggleTag(tag, tagBtn) {
    if (this.selectedTags.has(tag)) {
      this.selectedTags.delete(tag);
      tagBtn.removeClass("active");
    } else {
      this.selectedTags.add(tag);
      tagBtn.addClass("active");
    }
    const allBtn = this.tagContainer.querySelector("button");
    if (allBtn) {
      allBtn.removeClass("active");
    }
    this.refreshView();
  }
  clearTagSelection() {
    this.selectedTags.clear();
    this.tagContainer.querySelectorAll(".tag-btn").forEach((btn) => {
      btn.removeClass("active");
    });
  }
  handleCardSelection(path, event) {
    const card = this.container.querySelector(`[data-path="${path}"]`);
    if (!card) {
      this.clearSelection();
      return;
    }
    if (event.ctrlKey) {
      if (this.selectedNotes.has(path)) {
        this.selectedNotes.delete(path);
        card.removeClass("selected");
      } else {
        this.selectedNotes.add(path);
        card.addClass("selected");
      }
    } else if (event.shiftKey && this.lastSelectedNote) {
      const cards = Array.from(this.container.querySelectorAll(".note-card"));
      const lastIndex = cards.findIndex((c) => c.getAttribute("data-path") === this.lastSelectedNote);
      const currentIndex = cards.findIndex((c) => c.getAttribute("data-path") === path);
      const start = Math.min(lastIndex, currentIndex);
      const end = Math.max(lastIndex, currentIndex);
      cards.forEach((c, i) => {
        const cardPath = c.getAttribute("data-path");
        if (i >= start && i <= end && cardPath) {
          this.selectedNotes.add(cardPath);
          c.addClass("selected");
        }
      });
    } else {
      this.clearSelection();
      this.selectedNotes.add(path);
      card.addClass("selected");
    }
    this.lastSelectedNote = path;
  }
  clearSelection() {
    this.selectedNotes.clear();
    this.container.querySelectorAll(".note-card.selected").forEach((card) => {
      card.removeClass("selected");
    });
  }
  getSelectedFiles() {
    return Array.from(this.selectedNotes).map((path) => this.app.vault.getAbstractFileByPath(path)).filter((file) => file instanceof import_obsidian.TFile);
  }
  showContextMenu(event, files) {
    const menu = new import_obsidian.Menu();
    if (files.length > 0) {
      menu.addItem((item) => {
        item.setTitle(`\u5728\u65B0\u6807\u7B7E\u9875\u6253\u5F00`).setIcon("link").onClick(async () => {
          for (const file of files) {
            const leaf = this.app.workspace.getLeaf("tab");
            await leaf.openFile(file);
          }
        });
      });
      menu.addItem((item) => {
        item.setTitle(`\u5728\u4EF6\u7BA1\u7406\u5668\u4E2D\u663E\u793A`).setIcon("folder").onClick(() => {
          var _a;
          const file = files[0];
          this.revealFolderInExplorer(((_a = file.parent) == null ? void 0 : _a.path) || "/");
        });
      });
      menu.addItem((item) => {
        item.setTitle(`\u79FB\u52A8 ${files.length} \u4E2A\u6587\u4EF6`).setIcon("move").onClick(() => {
          const modal = new EnhancedFileSelectionModal(this.app, files, this.recentFolders, (folders) => {
            this.recentFolders = folders;
          });
          modal.open();
        });
      });
      menu.addItem((item) => {
        item.setTitle(`\u5220\u9664 ${files.length} \u4E2A\u6587\u4EF6`).setIcon("trash").onClick(async () => {
          const confirm = await new ConfirmModal(this.app, "\u786E\u8BA4\u5220\u9664", `\u662F\u5426\u786E\u5B9A\u8981\u5220\u9664\u9009\u4E2D\u7684 ${files.length} \u4E2A\u6587\u4EF6\uFF1F`).show();
          if (confirm) {
            for (const file of files) {
              await this.app.vault.trash(file, true);
            }
            this.refreshView();
          }
        });
      });
    }
    menu.showAtMouseEvent(event);
  }
  adjustCardSize(delta) {
    const adjustment = delta > 0 ? -10 : 10;
    const newSize = Math.max(this.plugin.settings.minCardWidth, Math.min(this.plugin.settings.maxCardWidth, this.cardSize + adjustment));
    if (newSize !== this.cardSize) {
      this.cardSize = newSize;
      this.updateCardSize(newSize);
      this.plugin.saveCardWidth(newSize);
    }
  }
  updateCardSize(width) {
    this.cardSize = width;
    this.container.querySelectorAll(".note-card").forEach((card) => {
      if (card instanceof HTMLElement) {
        card.style.width = `${width}px`;
      }
    });
    this.container.style.gridTemplateColumns = `repeat(auto-fill, ${width}px)`;
  }
  createCalendarButton(leftTools) {
    const calendarBtn = leftTools.createEl("button", {
      cls: "calendar-toggle-button"
    });
    calendarBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect><line x1="16" y1="2" x2="16" y2="6"></line><line x1="8" y1="2" x2="8" y2="6"></line><line x1="3" y1="10" x2="21" y2="10"></line></svg>
            <span>\u65E5\u5386</span>
        `;
    calendarBtn.addEventListener("click", () => {
      this.toggleCalendar();
      calendarBtn.toggleClass("active", this.isCalendarVisible);
    });
  }
  toggleCalendar() {
    this.isCalendarVisible = !this.isCalendarVisible;
    if (this.isCalendarVisible) {
      this.showCalendar();
      this.filterNotesByMonth(this.currentDate);
    } else {
      this.hideCalendar();
      this.clearDateFilter();
    }
  }
  filterNotesByMonth(date) {
    const year = date.getFullYear();
    const month = date.getMonth();
    this.currentFilter = {
      type: "date",
      value: `${year}-${(month + 1).toString().padStart(2, "0")}`
    };
    this.refreshView();
  }
  showCalendar() {
    var _a;
    if (!this.calendarContainer) {
      const contentSection = this.containerEl.querySelector(".content-section");
      if (!contentSection)
        return;
      this.calendarContainer = createDiv("calendar-container");
      (_a = contentSection.parentElement) == null ? void 0 : _a.insertBefore(this.calendarContainer, contentSection);
    }
    this.calendarContainer.empty();
    this.renderCalendar();
    this.calendarContainer.style.display = "block";
    const mainLayout = this.containerEl.querySelector(".main-layout");
    if (mainLayout) {
      mainLayout.addClass("with-calendar");
    }
  }
  hideCalendar() {
    if (this.calendarContainer) {
      this.calendarContainer.style.display = "none";
      this.calendarContainer.empty();
      const mainLayout = this.containerEl.querySelector(".main-layout");
      if (mainLayout) {
        mainLayout.removeClass("with-calendar");
      }
    }
  }
  renderCalendar() {
    if (!this.calendarContainer) {
      return;
    }
    this.calendarContainer.empty();
    const year = this.currentDate.getFullYear();
    const month = this.currentDate.getMonth();
    const header = this.calendarContainer.createDiv("calendar-header");
    const prevBtn = header.createEl("button", { cls: "calendar-nav-btn" });
    prevBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="15 18 9 12 15 6"></polyline></svg>';
    prevBtn.addEventListener("click", (e) => {
      e.stopPropagation();
      this.currentDate = new Date(year, month - 1, 1);
      this.renderCalendar();
      this.filterNotesByMonth(this.currentDate);
    });
    header.createDiv("calendar-title").setText(`${year}\u5E74${month + 1}\u6708`);
    const nextBtn = header.createEl("button", { cls: "calendar-nav-btn" });
    nextBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="9 18 15 12 9 6"></polyline></svg>';
    nextBtn.addEventListener("click", (e) => {
      e.stopPropagation();
      this.currentDate = new Date(year, month + 1, 1);
      this.renderCalendar();
      this.filterNotesByMonth(this.currentDate);
    });
    const weekdays = ["\u65E5", "\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D"];
    const weekHeader = this.calendarContainer.createDiv("calendar-weekdays");
    weekdays.forEach((day) => {
      weekHeader.createDiv("weekday").setText(day);
    });
    const grid = this.calendarContainer.createDiv("calendar-grid");
    const firstDay = new Date(year, month, 1).getDay();
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    const notesCount = this.getNotesCountByDate(year, month);
    for (let i = 0; i < firstDay; i++) {
      grid.createDiv("calendar-day empty");
    }
    for (let day = 1; day <= daysInMonth; day++) {
      const dayEl = grid.createDiv("calendar-day");
      const dateStr = `${year}-${(month + 1).toString().padStart(2, "0")}-${day.toString().padStart(2, "0")}`;
      dayEl.setText(day.toString());
      dayEl.setAttribute("data-date", dateStr);
      if (this.currentFilter.type === "date" && this.currentFilter.value === dateStr) {
        dayEl.addClass("selected");
      }
      const count = notesCount[dateStr] || 0;
      if (count > 0) {
        dayEl.createDiv("note-count").setText(count.toString());
      }
      dayEl.addEventListener("click", () => {
        this.filterNotesByDate(dateStr);
      });
    }
  }
  getNotesCountByDate(year, month) {
    const counts = {};
    const files = this.app.vault.getMarkdownFiles();
    files.forEach((file) => {
      const date = new Date(file.stat.mtime);
      if (date.getFullYear() === year && date.getMonth() === month) {
        const dateStr = date.toISOString().split("T")[0];
        counts[dateStr] = (counts[dateStr] || 0) + 1;
      }
    });
    return counts;
  }
  filterNotesByDate(dateStr) {
    if (this.currentFilter.type === "date" && this.currentFilter.value === dateStr) {
      this.clearDateFilter();
      return;
    }
    this.calendarContainer.querySelectorAll(".calendar-day").forEach((day) => {
      day.removeClass("selected");
    });
    this.currentFilter = { type: "date", value: dateStr };
    const selectedDay = this.calendarContainer.querySelector(`.calendar-day[data-date="${dateStr}"]`);
    if (selectedDay) {
      selectedDay.addClass("selected");
    }
    this.refreshView();
  }
  clearDateFilter() {
    this.currentFilter = { type: "none" };
    if (this.calendarContainer) {
      this.calendarContainer.querySelectorAll(".calendar-day").forEach((day) => {
        day.removeClass("selected");
      });
    }
    this.refreshView();
  }
  highlightSearchTerm(content, searchTerm) {
    if (!searchTerm)
      return content;
    const regex = new RegExp(searchTerm, "gi");
    return content.replace(regex, (match) => `<span class="search-highlight">${match}</span>`);
  }
  async openInAppropriateLeaf(file) {
    const leaves = this.app.workspace.getLeavesOfType("markdown");
    const currentRoot = this.leaf.getRoot();
    const otherLeaf = leaves.find((leaf) => {
      const root = leaf.getRoot();
      return root !== currentRoot;
    });
    if (otherLeaf) {
      await otherLeaf.openFile(file);
      this.app.workspace.setActiveLeaf(otherLeaf);
    } else {
      const leaf = this.app.workspace.getLeaf("tab");
      await leaf.openFile(file);
    }
  }
  renderFolderCard(folder) {
    const cardEl = createDiv("card folder-card");
    cardEl.addEventListener("click", () => {
      const fileExplorer = this.app.workspace.getLeavesOfType("file-explorer")[0];
      if (fileExplorer) {
        this.app.workspace.revealLeaf(fileExplorer);
        const fileExplorerView = fileExplorer.view;
        if (fileExplorerView && fileExplorerView.revealInFolder) {
          fileExplorerView.revealInFolder(folder);
        }
      }
    });
    return cardEl;
  }
};
var ConfirmModal = class extends import_obsidian.Modal {
  constructor(app, title, message) {
    super(app);
    this.result = false;
    this.title = title;
    this.message = message;
  }
  async show() {
    return new Promise((resolve) => {
      this.resolvePromise = resolve;
      this.open();
    });
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h3", { text: this.title });
    contentEl.createEl("p", { text: this.message });
    const buttonContainer = contentEl.createDiv("button-container");
    const confirmButton = buttonContainer.createEl("button", { text: "\u786E\u8BA4" });
    confirmButton.addEventListener("click", () => {
      this.result = true;
      this.close();
    });
    const cancelButton = buttonContainer.createEl("button", { text: "\u53D6\u6D88" });
    cancelButton.addEventListener("click", () => {
      this.result = false;
      this.close();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    this.resolvePromise(this.result);
  }
};
var EnhancedFileSelectionModal = class extends import_obsidian.Modal {
  constructor(app, files, recentFolders, onFoldersUpdate) {
    super(app);
    this.selectedFolder = null;
    this.files = files;
    this.recentFolders = recentFolders;
    this.onFoldersUpdate = onFoldersUpdate;
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h3", {
      text: `\u79FB\u52A8 ${this.files.length} \u4E2A\u6587\u4EF6`
    });
    if (this.recentFolders.length > 0) {
      const recentSection = contentEl.createDiv("recent-folders-section");
      recentSection.createEl("h4", { text: "\u6700\u4F7F\u7528" });
      const recentList = recentSection.createDiv("recent-folders-list");
      this.recentFolders.forEach((folder) => {
        const item = recentList.createDiv("folder-item recent");
        item.setText(folder);
        item.addEventListener("click", () => this.selectFolder(item, folder));
      });
    }
    const folderList = contentEl.createDiv("folder-list");
    const folders = this.getFoldersWithHierarchy();
    this.createFolderTree(folderList, folders);
    const buttonContainer = contentEl.createDiv("modal-button-container");
    const confirmButton = buttonContainer.createEl("button", {
      text: "\u786E\u8BA4\u79FB\u52A8",
      cls: "mod-cta"
    });
    confirmButton.addEventListener("click", () => {
      if (this.selectedFolder) {
        this.moveFiles(this.selectedFolder);
      }
    });
    const cancelButton = buttonContainer.createEl("button", {
      text: "\u53D6\u6D88"
    });
    cancelButton.addEventListener("click", () => this.close());
  }
  getFoldersWithHierarchy() {
    const folders = [];
    const seen = new Set();
    this.app.vault.getAllLoadedFiles().forEach((file) => {
      if (file instanceof import_obsidian.TFolder) {
        const parts = file.path.split("/");
        let currentPath = "";
        let level = 0;
        parts.forEach((part) => {
          if (part) {
            currentPath += (currentPath ? "/" : "") + part;
            if (!seen.has(currentPath)) {
              seen.add(currentPath);
              folders.push({
                path: currentPath,
                name: part,
                level
              });
            }
            level++;
          }
        });
      }
    });
    return folders.sort((a, b) => a.path.localeCompare(b.path));
  }
  createFolderTree(container, folders) {
    folders.forEach((folder) => {
      const item = container.createDiv({
        cls: "folder-item"
      });
      item.style.paddingLeft = `${folder.level * 20 + 10}px`;
      const icon = item.createSpan({
        cls: "folder-icon"
      });
      icon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path></svg>`;
      const name = item.createSpan({
        cls: "folder-name",
        text: folder.name
      });
      item.addEventListener("click", () => this.selectFolder(item, folder.path));
    });
  }
  selectFolder(element, path) {
    this.contentEl.querySelectorAll(".folder-item").forEach((item) => {
      item.removeClass("selected");
    });
    element.addClass("selected");
    this.selectedFolder = path;
  }
  async moveFiles(targetFolder) {
    const confirmModal = new ConfirmModal(this.app, "\u786E\u8BA4\u79FB\u52A8", `\u662F\u5426\u5C06\u9009\u4E2D\u7684 ${this.files.length} \u4E2A\u6587\u4EF6\u79FB\u52A8\u5230 "${targetFolder}"\uFF1F`);
    if (await confirmModal.show()) {
      for (const file of this.files) {
        const newPath = `${targetFolder}/${file.name}`;
        await this.app.fileManager.renameFile(file, newPath);
      }
      this.recentFolders = [targetFolder, ...this.recentFolders.filter((f) => f !== targetFolder)].slice(0, 5);
      this.onFoldersUpdate(this.recentFolders);
      this.close();
    }
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  defaultView: "card",
  cardWidth: 280,
  minCardWidth: 280,
  maxCardWidth: 600
};
var CardViewSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian2.Setting(containerEl).setName("\u9ED8\u8BA4\u89C6\u56FE").setDesc("\u9009\u62E9\u9ED8\u8BA4\u7684\u89C6\u56FE\u6A21\u5F0F").addDropdown((dropdown) => {
      dropdown.addOption("card", "\u5361\u7247 \u89C6\u56FE").addOption("list", "\u5217\u8868\u89C6\u56FE").addOption("timeline", "\u65F6\u95F4\u8F74\u89C6\u56FE").setValue(this.plugin.settings.defaultView);
      dropdown.onChange(async (value) => {
        if (value === "card" || value === "list" || value === "timeline") {
          this.plugin.settings.defaultView = value;
          await this.plugin.saveSettings();
        }
      });
    });
    new import_obsidian2.Setting(containerEl).setName("\u5361\u7247\u5BBD\u5EA6").setDesc("\u8BBE\u7F6E\u5361\u7247\u7684\u5BBD\u5EA6\uFF08280-600\u50CF\u7D20\uFF09").addText((text) => text.setPlaceholder("280").setValue(this.plugin.settings.cardWidth.toString()).onChange(async (value) => {
      const width = Number(value);
      if (!isNaN(width) && width >= 280 && width <= 600) {
        this.plugin.settings.cardWidth = width;
        await this.plugin.saveSettings();
        this.plugin.updateAllCardViews();
      }
    }));
    new import_obsidian2.Setting(containerEl).setName("\u6700\u5C0F\u5BBD\u5EA6").setDesc("\u8BBE\u7F6E\u5361\u7247\u7684\u6700\u5C0F\u5BBD\u5EA6\uFF08\u50CF\u7D20\uFF09").addText((text) => text.setPlaceholder("280").setValue(this.plugin.settings.minCardWidth.toString()).onChange(async (value) => {
      const width = Number(value);
      if (!isNaN(width) && width >= 200) {
        this.plugin.settings.minCardWidth = width;
        await this.plugin.saveSettings();
      }
    }));
    new import_obsidian2.Setting(containerEl).setName("\u6700\u5927\u5BBD\u5EA6").setDesc("\u8BBE\u7F6E\u5361\u7247\u7684\u6700\u5927\u5BBD\u5EA6\uFF08\u50CF\u7D20\uFF09").addText((text) => text.setPlaceholder("600").setValue(this.plugin.settings.maxCardWidth.toString()).onChange(async (value) => {
      const width = Number(value);
      if (!isNaN(width) && width <= 800) {
        this.plugin.settings.maxCardWidth = width;
        await this.plugin.saveSettings();
      }
    }));
  }
};
var CardViewPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView(VIEW_TYPE_CARD, (leaf) => new CardView(leaf, this));
    this.addRibbonIcon("layout-grid", "\u5361\u7247\u89C6\u56FE", () => {
      this.activateView();
    });
    this.addSettingTab(new CardViewSettingTab(this.app, this));
    this.app.workspace.on("file-open", (file) => {
      if (file) {
        this.handleFileOpen(file);
      }
    });
  }
  handleFileOpen(file) {
    console.log(`\u6587\u4EF6 ${file.path} \u88AB\u6253\u5F00`);
  }
  handleFolderOpen(folder) {
    console.log(`\u6587\u4EF6\u5939 ${folder} \u88AB\u6253\u5F00`);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf = workspace.getLeavesOfType(VIEW_TYPE_CARD)[0];
    if (!leaf) {
      leaf = workspace.getLeaf("tab");
      await leaf.setViewState({
        type: VIEW_TYPE_CARD,
        active: true
      });
    }
    workspace.revealLeaf(leaf);
  }
  updateAllCardViews() {
    this.app.workspace.getLeavesOfType(VIEW_TYPE_CARD).forEach((leaf) => {
      const view = leaf.view;
      if (view) {
        view.updateCardSize(this.settings.cardWidth);
      }
    });
  }
  async saveCardWidth(width) {
    this.settings.cardWidth = width;
    await this.saveSettings();
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJjYXJkVmlldy50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBQbHVnaW4sIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcsIFRGaWxlLCBURm9sZGVyLFdvcmtzcGFjZUxlYWYgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7IENhcmRWaWV3LCBWSUVXX1RZUEVfQ0FSRCB9IGZyb20gJy4vY2FyZFZpZXcnO1xyXG5cclxuaW50ZXJmYWNlIENhcmRWaWV3UGx1Z2luU2V0dGluZ3Mge1xyXG4gICAgZGVmYXVsdFZpZXc6ICdjYXJkJyB8ICdsaXN0JyB8ICd0aW1lbGluZSc7XHJcbiAgICBjYXJkV2lkdGg6IG51bWJlcjtcclxuICAgIG1pbkNhcmRXaWR0aDogbnVtYmVyO1xyXG4gICAgbWF4Q2FyZFdpZHRoOiBudW1iZXI7XHJcbn1cclxuXHJcbmNvbnN0IERFRkFVTFRfU0VUVElOR1M6IENhcmRWaWV3UGx1Z2luU2V0dGluZ3MgPSB7XHJcbiAgICBkZWZhdWx0VmlldzogJ2NhcmQnLFxyXG4gICAgY2FyZFdpZHRoOiAyODAsXHJcbiAgICBtaW5DYXJkV2lkdGg6IDI4MCxcclxuICAgIG1heENhcmRXaWR0aDogNjAwXHJcbn1cclxuXHJcbmNsYXNzIENhcmRWaWV3U2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xyXG4gICAgcGx1Z2luOiBDYXJkVmlld1BsdWdpbjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBDYXJkVmlld1BsdWdpbikge1xyXG4gICAgICAgIHN1cGVyKGFwcCwgcGx1Z2luKTtcclxuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuICAgIH1cclxuXHJcbiAgICBkaXNwbGF5KCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XHJcbiAgICAgICAgY29udGFpbmVyRWwuZW1wdHkoKTtcclxuXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKCdcdTlFRDhcdThCQTRcdTg5QzZcdTU2RkUnKVxyXG4gICAgICAgICAgICAuc2V0RGVzYygnXHU5MDA5XHU2MkU5XHU5RUQ4XHU4QkE0XHU3Njg0XHU4OUM2XHU1NkZFXHU2QTIxXHU1RjBGJylcclxuICAgICAgICAgICAgLmFkZERyb3Bkb3duKGRyb3Bkb3duID0+IHtcclxuICAgICAgICAgICAgICAgIGRyb3Bkb3duXHJcbiAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbignY2FyZCcsICdcdTUzNjFcdTcyNDcgXHU4OUM2XHU1NkZFJylcclxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKCdsaXN0JywgJ1x1NTIxN1x1ODg2OFx1ODlDNlx1NTZGRScpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbigndGltZWxpbmUnLCAnXHU2NUY2XHU5NUY0XHU4Rjc0XHU4OUM2XHU1NkZFJylcclxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVmYXVsdFZpZXcpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBkcm9wZG93bi5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09ICdjYXJkJyB8fCB2YWx1ZSA9PT0gJ2xpc3QnIHx8IHZhbHVlID09PSAndGltZWxpbmUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmRlZmF1bHRWaWV3ID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKCdcdTUzNjFcdTcyNDdcdTVCQkRcdTVFQTYnKVxyXG4gICAgICAgICAgICAuc2V0RGVzYygnXHU4QkJFXHU3RjZFXHU1MzYxXHU3MjQ3XHU3Njg0XHU1QkJEXHU1RUE2XHVGRjA4MjgwLTYwMFx1NTBDRlx1N0QyMFx1RkYwOScpXHJcbiAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG4gICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCcyODAnKVxyXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmNhcmRXaWR0aC50b1N0cmluZygpKVxyXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gTnVtYmVyKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKHdpZHRoKSAmJiB3aWR0aCA+PSAyODAgJiYgd2lkdGggPD0gNjAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmNhcmRXaWR0aCA9IHdpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4udXBkYXRlQWxsQ2FyZFZpZXdzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoJ1x1NjcwMFx1NUMwRlx1NUJCRFx1NUVBNicpXHJcbiAgICAgICAgICAgIC5zZXREZXNjKCdcdThCQkVcdTdGNkVcdTUzNjFcdTcyNDdcdTc2ODRcdTY3MDBcdTVDMEZcdTVCQkRcdTVFQTZcdUZGMDhcdTUwQ0ZcdTdEMjBcdUZGMDknKVxyXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcclxuICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignMjgwJylcclxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5taW5DYXJkV2lkdGgudG9TdHJpbmcoKSlcclxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB3aWR0aCA9IE51bWJlcih2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc05hTih3aWR0aCkgJiYgd2lkdGggPj0gMjAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLm1pbkNhcmRXaWR0aCA9IHdpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZSgnXHU2NzAwXHU1OTI3XHU1QkJEXHU1RUE2JylcclxuICAgICAgICAgICAgLnNldERlc2MoJ1x1OEJCRVx1N0Y2RVx1NTM2MVx1NzI0N1x1NzY4NFx1NjcwMFx1NTkyN1x1NUJCRFx1NUVBNlx1RkYwOFx1NTBDRlx1N0QyMFx1RkYwOScpXHJcbiAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG4gICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCc2MDAnKVxyXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLm1heENhcmRXaWR0aC50b1N0cmluZygpKVxyXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gTnVtYmVyKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKHdpZHRoKSAmJiB3aWR0aCA8PSA4MDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MubWF4Q2FyZFdpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FyZFZpZXdQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xyXG4gICAgc2V0dGluZ3M6IENhcmRWaWV3UGx1Z2luU2V0dGluZ3M7XHJcblxyXG4gICAgYXN5bmMgb25sb2FkKCkge1xyXG4gICAgICAgIGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XHJcblxyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJWaWV3KFxyXG4gICAgICAgICAgICBWSUVXX1RZUEVfQ0FSRCxcclxuICAgICAgICAgICAgKGxlYWY6IFdvcmtzcGFjZUxlYWYpID0+IG5ldyBDYXJkVmlldyhsZWFmLCB0aGlzKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkUmliYm9uSWNvbignbGF5b3V0LWdyaWQnLCAnXHU1MzYxXHU3MjQ3XHU4OUM2XHU1NkZFJywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2YXRlVmlldygpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmFkZFNldHRpbmdUYWIobmV3IENhcmRWaWV3U2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpO1xyXG5cclxuICAgICAgICAvLyBcdTc2RDFcdTU0MkNcdTY1ODdcdTRFRjZcdTUyMTdcdTg4NjhcdTc2ODRcdTcwQjlcdTUxRkJcdTRFOEJcdTRFRjZcclxuICAgICAgICB0aGlzLmFwcC53b3Jrc3BhY2Uub24oXCJmaWxlLW9wZW5cIiwgKGZpbGU6IFRGaWxlIHwgbnVsbCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZmlsZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVGaWxlT3BlbihmaWxlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVGaWxlT3BlbihmaWxlOiBURmlsZSkge1xyXG4gICAgICAgIC8vIFx1NTkwNFx1NzQwNlx1NjU4N1x1NEVGNlx1NjI1M1x1NUYwMFx1NEU4Qlx1NEVGNlxyXG4gICAgICAgIGNvbnNvbGUubG9nKGBcdTY1ODdcdTRFRjYgJHtmaWxlLnBhdGh9IFx1ODhBQlx1NjI1M1x1NUYwMGApO1xyXG4gICAgICAgIC8vIFx1NTcyOFx1OEZEOVx1OTFDQ1x1NTNFRlx1NEVFNVx1NkRGQlx1NTJBMFx1NjBBOFx1NjBGM1x1ODk4MVx1NzY4NFx1OTAzQlx1OEY5MVx1RkYwQ1x1NEY4Qlx1NTk4Mlx1NjZGNFx1NjVCMFx1ODlDNlx1NTZGRVx1NjIxNlx1NjYzRVx1NzkzQVx1NzZGOFx1NTE3M1x1NEZFMVx1NjA2RlxyXG4gICAgfVxyXG5cclxuICAgIGhhbmRsZUZvbGRlck9wZW4oZm9sZGVyOiBzdHJpbmcpIHsgLy8gXHU2NUIwXHU1ODlFXHU1OTA0XHU3NDA2XHU2NTg3XHU0RUY2XHU1OTM5XHU2MjUzXHU1RjAwXHU3Njg0XHU1MUZEXHU2NTcwXHJcbiAgICAgICAgY29uc29sZS5sb2coYFx1NjU4N1x1NEVGNlx1NTkzOSAke2ZvbGRlcn0gXHU4OEFCXHU2MjUzXHU1RjAwYCk7XHJcbiAgICAgICAgLy8gXHU1NzI4XHU4RkQ5XHU5MUNDXHU1M0VGXHU0RUU1XHU2REZCXHU1MkEwXHU2MEE4XHU2MEYzXHU4OTgxXHU3Njg0XHU5MDNCXHU4RjkxXHVGRjBDXHU0RjhCXHU1OTgyXHU2NkY0XHU2NUIwXHU4OUM2XHU1NkZFXHU2MjE2XHU2NjNFXHU3OTNBXHU3NkY4XHU1MTczXHU0RkUxXHU2MDZGXHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgbG9hZFNldHRpbmdzKCkge1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcclxuICAgICAgICBhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGFjdGl2YXRlVmlldygpIHtcclxuICAgICAgICBjb25zdCB7IHdvcmtzcGFjZSB9ID0gdGhpcy5hcHA7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IGxlYWYgPSB3b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKFZJRVdfVFlQRV9DQVJEKVswXTtcclxuICAgICAgICBpZiAoIWxlYWYpIHtcclxuICAgICAgICAgICAgbGVhZiA9IHdvcmtzcGFjZS5nZXRMZWFmKCd0YWInKTtcclxuICAgICAgICAgICAgYXdhaXQgbGVhZi5zZXRWaWV3U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgdHlwZTogVklFV19UWVBFX0NBUkQsXHJcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHRydWUsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB3b3Jrc3BhY2UucmV2ZWFsTGVhZihsZWFmKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVBbGxDYXJkVmlld3MoKSB7XHJcbiAgICAgICAgdGhpcy5hcHAud29ya3NwYWNlLmdldExlYXZlc09mVHlwZShWSUVXX1RZUEVfQ0FSRCkuZm9yRWFjaChsZWFmID0+IHtcclxuICAgICAgICAgICAgY29uc3QgdmlldyA9IGxlYWYudmlldyBhcyBDYXJkVmlldztcclxuICAgICAgICAgICAgaWYgKHZpZXcpIHtcclxuICAgICAgICAgICAgICAgIHZpZXcudXBkYXRlQ2FyZFNpemUodGhpcy5zZXR0aW5ncy5jYXJkV2lkdGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgc2F2ZUNhcmRXaWR0aCh3aWR0aDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5ncy5jYXJkV2lkdGggPSB3aWR0aDtcclxuICAgICAgICBhd2FpdCB0aGlzLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgfVxyXG59ICIsICJpbXBvcnQge1xyXG4gICAgSXRlbVZpZXcsXHJcbiAgICBXb3Jrc3BhY2VMZWFmLFxyXG4gICAgVEZpbGUsXHJcbiAgICBNYXJrZG93blJlbmRlcmVyLFxyXG4gICAgTWVudSxcclxuICAgIE1vZGFsLFxyXG4gICAgVEZvbGRlcixcclxuICAgIEFwcCxcclxuICAgIE5vdGljZVxyXG59IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IENhcmRWaWV3UGx1Z2luIGZyb20gJy4vbWFpbic7XHJcblxyXG5leHBvcnQgY29uc3QgVklFV19UWVBFX0NBUkQgPSAnY2FyZC12aWV3JztcclxuXHJcbmV4cG9ydCBjbGFzcyBDYXJkVmlldyBleHRlbmRzIEl0ZW1WaWV3IHtcclxuICAgIHByaXZhdGUgcGx1Z2luOiBDYXJkVmlld1BsdWdpbjtcclxuICAgIHByaXZhdGUgY3VycmVudFZpZXc6ICdjYXJkJyB8ICdsaXN0JyB8ICd0aW1lbGluZSc7XHJcbiAgICBwcml2YXRlIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XHJcbiAgICBwcml2YXRlIHRhZ0NvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XHJcbiAgICBwcml2YXRlIGNvbnRlbnRDb250YWluZXI6IEhUTUxFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBwcmV2aWV3Q29udGFpbmVyOiBIVE1MRWxlbWVudDtcclxuICAgIHByaXZhdGUgcHJldmlld1Jlc2l6ZXI6IEhUTUxFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBpc1ByZXZpZXdDb2xsYXBzZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHByaXZhdGUgY3VycmVudEZvbGRlcjogc3RyaW5nIHwgbnVsbCA9IG51bGw7XHJcbiAgICBwcml2YXRlIHNlYXJjaElucHV0OiBIVE1MSW5wdXRFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBjdXJyZW50U2VhcmNoVGVybTogc3RyaW5nID0gJyc7XHJcbiAgICBwcml2YXRlIHNlbGVjdGVkVGFnczogU2V0PHN0cmluZz4gPSBuZXcgU2V0KCk7XHJcbiAgICBwcml2YXRlIHNlbGVjdGVkTm90ZXM6IFNldDxzdHJpbmc+ID0gbmV3IFNldCgpO1xyXG4gICAgcHJpdmF0ZSBsYXN0U2VsZWN0ZWROb3RlOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcclxuICAgIHByaXZhdGUgcmVjZW50Rm9sZGVyczogc3RyaW5nW10gPSBbXTtcclxuICAgIHByaXZhdGUgY2FyZFNpemU6IG51bWJlciA9IDI4MDsgIC8vIFx1OUVEOFx1OEJBNFx1NTM2MVx1NzI0N1x1NUJCRFx1NUVBNlxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBNSU5fQ0FSRF9TSVpFID0gMjgwOyAgLy8gXHU2NzAwXHU1QzBGXHU1MzYxXHU3MjQ3XHU1QkJEXHU1RUE2XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IE1BWF9DQVJEX1NJWkUgPSA2MDA7ICAvLyBcdTY3MDBcdTU5MjdcdTUzNjFcdTcyNDdcdTVCQkRcdTVFQTZcclxuICAgIHByaXZhdGUgY2FsZW5kYXJDb250YWluZXI6IEhUTUxFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBpc0NhbGVuZGFyVmlzaWJsZTogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBjdXJyZW50RGF0ZTogRGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICBwcml2YXRlIGN1cnJlbnRGaWx0ZXI6IHsgdHlwZTogJ2RhdGUnIHwgJ25vbmUnLCB2YWx1ZT86IHN0cmluZyB9ID0geyB0eXBlOiAnbm9uZScgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1Njc4NFx1OTAyMFx1NTFGRFx1NjU3MFxyXG4gICAgICogQHBhcmFtIGxlYWYgLSBcdTVERTVcdTRGNUNcdTUzM0FcdTUzRjZcdTVCNTBcdTgyODJcdTcwQjlcclxuICAgICAqIEBwYXJhbSBwbHVnaW4gLSBcdTYzRDJcdTRFRjZcdTVCOUVcdTRGOEJcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IobGVhZjogV29ya3NwYWNlTGVhZiwgcGx1Z2luOiBDYXJkVmlld1BsdWdpbikge1xyXG4gICAgICAgIHN1cGVyKGxlYWYpO1xyXG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG4gICAgICAgIHRoaXMuY3VycmVudFZpZXcgPSBwbHVnaW4uc2V0dGluZ3MuZGVmYXVsdFZpZXc7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTgzQjdcdTUzRDZcdTg5QzZcdTU2RkVcdTdDN0JcdTU3OEJcclxuICAgICAqIEByZXR1cm5zIFx1ODlDNlx1NTZGRVx1N0M3Qlx1NTc4Qlx1NjgwN1x1OEJDNlx1N0IyNlxyXG4gICAgICovXHJcbiAgICBnZXRWaWV3VHlwZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBWSUVXX1RZUEVfQ0FSRDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1ODNCN1x1NTNENlx1ODlDNlx1NTZGRVx1NjYzRVx1NzkzQVx1NjU4N1x1NjcyQ1xyXG4gICAgICogQHJldHVybnMgXHU2NjNFXHU3OTNBXHU1NzI4XHU2ODA3XHU3QjdFXHU5ODc1XHU0RTBBXHU3Njg0XHU2NTg3XHU2NzJDXHJcbiAgICAgKi9cclxuICAgIGdldERpc3BsYXlUZXh0KCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuICdcdTUzNjFcdTcyNDdcdTg5QzZcdTU2RkUnO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU4OUM2XHU1NkZFXHU2MjUzXHU1RjAwXHU2NUY2XHU3Njg0XHU1MjFEXHU1OUNCXHU1MzE2XHU1MUZEXHU2NTcwXHJcbiAgICAgKiBcdTUyMUJcdTVFRkFcdTY4MDdcdTdCN0VcdThGQzdcdTZFRTRcdTU2NjhcdTMwMDFcdTg5QzZcdTU2RkVcdTUyMDdcdTYzNjJcdTYzMDlcdTk0QUVcdTU0OENcdTVCQjlcdTU2NjhcclxuICAgICAqL1xyXG4gICAgYXN5bmMgb25PcGVuKCkge1xyXG4gICAgICAgIGNvbnN0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XHJcbiAgICAgICAgY29udGFpbmVyRWwuZW1wdHkoKTtcclxuICAgICAgICBjb250YWluZXJFbC5hZGRDbGFzcygnY2FyZC12aWV3LWNvbnRhaW5lcicpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1NTIxQlx1NUVGQVx1NEUzQlx1NUUwM1x1NUM0MFx1NUJCOVx1NTY2OFxyXG4gICAgICAgIGNvbnN0IG1haW5MYXlvdXQgPSBjb250YWluZXJFbC5jcmVhdGVEaXYoJ21haW4tbGF5b3V0Jyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU1MjFCXHU1RUZBXHU1REU2XHU0RkE3XHU1MTg1XHU1QkI5XHU1MzNBXHU1N0RGXHJcbiAgICAgICAgY29uc3QgY29udGVudFNlY3Rpb24gPSBtYWluTGF5b3V0LmNyZWF0ZURpdignY29udGVudC1zZWN0aW9uJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU1MjFCXHU1RUZBXHU1REU1XHU1MTc3XHU2ODBGXHJcbiAgICAgICAgY29uc3QgdG9vbGJhciA9IGNvbnRlbnRTZWN0aW9uLmNyZWF0ZURpdignY2FyZC12aWV3LXRvb2xiYXInKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTVERTZcdTRGQTdcdTVERTVcdTUxNzdcdTdFQzRcclxuICAgICAgICBjb25zdCBsZWZ0VG9vbHMgPSB0b29sYmFyLmNyZWF0ZURpdigndG9vbGJhci1sZWZ0Jyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU2NUIwXHU1RUZBXHU3QjE0XHU4QkIwXHU2MzA5XHU5NEFFXHJcbiAgICAgICAgY29uc3QgbmV3Tm90ZUJ0biA9IGxlZnRUb29scy5jcmVhdGVFbCgnYnV0dG9uJywge1xyXG4gICAgICAgICAgICBjbHM6ICduZXctbm90ZS1idXR0b24nLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIG5ld05vdGVCdG4uaW5uZXJIVE1MID0gYFxyXG4gICAgICAgICAgICA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjE2XCIgaGVpZ2h0PVwiMTZcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgY2xhc3M9XCJsdWNpZGUgbHVjaWRlLXBsdXNcIj48bGluZSB4MT1cIjEyXCIgeTE9XCI1XCIgeDI9XCIxMlwiIHkyPVwiMTlcIj48L2xpbmU+PGxpbmUgeDE9XCI1XCIgeTE9XCIxMlwiIHgyPVwiMTlcIiB5Mj1cIjEyXCI+PC9saW5lPjwvc3ZnPlxyXG4gICAgICAgICAgICA8c3Bhbj5cdTY1QjBcdTVFRkFcdTdCMTRcdThCQjA8L3NwYW4+XHJcbiAgICAgICAgYDtcclxuICAgICAgICBuZXdOb3RlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5jcmVhdGVOZXdOb3RlKCkpO1xyXG5cclxuICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTY1RTVcdTUzODZcdTYzMDlcdTk0QUUgLSBcdTU3MjhcdTg5QzZcdTU2RkVcdTUyMDdcdTYzNjJcdTYzMDlcdTk0QUVcdTRFNEJcdTUyNERcdTZERkJcdTUyQTBcclxuICAgICAgICB0aGlzLmNyZWF0ZUNhbGVuZGFyQnV0dG9uKGxlZnRUb29scyk7XHJcblxyXG4gICAgICAgIC8vIFx1ODlDNlx1NTZGRVx1NTIwN1x1NjM2Mlx1NjMwOVx1OTRBRVx1N0VDNFxyXG4gICAgICAgIGNvbnN0IHZpZXdTd2l0Y2hlciA9IGxlZnRUb29scy5jcmVhdGVEaXYoJ3ZpZXctc3dpdGNoZXInKTtcclxuICAgICAgICB0aGlzLmNyZWF0ZVZpZXdTd2l0Y2hlcih2aWV3U3dpdGNoZXIpO1xyXG5cclxuICAgICAgICAvLyBcdTUzRjNcdTRGQTdcdTY0MUNcdTdEMjJcdTY4NDZcclxuICAgICAgICBjb25zdCBzZWFyY2hDb250YWluZXIgPSB0b29sYmFyLmNyZWF0ZURpdignc2VhcmNoLWNvbnRhaW5lcicpO1xyXG4gICAgICAgIHRoaXMuc2VhcmNoSW5wdXQgPSBzZWFyY2hDb250YWluZXIuY3JlYXRlRWwoJ2lucHV0Jywge1xyXG4gICAgICAgICAgICB0eXBlOiAndGV4dCcsXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnXHU2NDFDXHU3RDIyXHU3QjE0XHU4QkIwLi4uJyxcclxuICAgICAgICAgICAgY2xzOiAnc2VhcmNoLWlucHV0J1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuc2VhcmNoSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFNlYXJjaFRlcm0gPSB0aGlzLnNlYXJjaElucHV0LnZhbHVlO1xyXG4gICAgICAgICAgICB0aGlzLnJlZnJlc2hWaWV3KCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIFx1NjgwN1x1N0I3RVx1NjgwRlxyXG4gICAgICAgIHRoaXMudGFnQ29udGFpbmVyID0gY29udGVudFNlY3Rpb24uY3JlYXRlRGl2KCd0YWctZmlsdGVyJyk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkVGFncygpO1xyXG5cclxuICAgICAgICAvLyBcdTUyMUJcdTVFRkFcdTRFM0JcdTUxODVcdTVCQjlcdTUzM0FcdTU3REZcclxuICAgICAgICBjb25zdCBjb250ZW50QXJlYSA9IGNvbnRlbnRTZWN0aW9uLmNyZWF0ZURpdignY2FyZC12aWV3LWNvbnRlbnQnKTtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRlbnRBcmVhLmNyZWF0ZURpdignY2FyZC1jb250YWluZXInKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTRGN0ZcdTc1MjhcdTRGRERcdTVCNThcdTc2ODRcdTVCQkRcdTVFQTZcdTUyMURcdTU5Q0JcdTUzMTZcdTUzNjFcdTcyNDdcdTVCQjlcdTU2NjhcclxuICAgICAgICB0aGlzLmNhcmRTaXplID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MuY2FyZFdpZHRoO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLmdyaWRUZW1wbGF0ZUNvbHVtbnMgPSBgcmVwZWF0KGF1dG8tZmlsbCwgJHt0aGlzLmNhcmRTaXplfXB4KWA7XHJcblxyXG4gICAgICAgIC8vIFx1NTIxQlx1NUVGQVx1OTg4NFx1ODlDOFx1NTMzQVx1NTdERlxyXG4gICAgICAgIGNvbnN0IHByZXZpZXdXcmFwcGVyID0gbWFpbkxheW91dC5jcmVhdGVEaXYoJ3ByZXZpZXctd3JhcHBlcicpO1xyXG4gICAgICAgIHRoaXMucHJldmlld0NvbnRhaW5lciA9IHByZXZpZXdXcmFwcGVyLmNyZWF0ZURpdigncHJldmlldy1jb250YWluZXInKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTk4ODRcdTg5QzhcdTYzQTdcdTUyMzZcdTYzMDlcdTk0QUVcclxuICAgICAgICBjb25zdCBwcmV2aWV3Q29udHJvbHMgPSBwcmV2aWV3V3JhcHBlci5jcmVhdGVEaXYoJ3ByZXZpZXctY29udHJvbHMnKTtcclxuICAgICAgICBjb25zdCB0b2dnbGVCdXR0b24gPSBwcmV2aWV3Q29udHJvbHMuY3JlYXRlRWwoJ2J1dHRvbicsIHtcclxuICAgICAgICAgICAgY2xzOiAncHJldmlldy10b2dnbGUnLFxyXG4gICAgICAgICAgICBhdHRyOiB7ICdhcmlhLWxhYmVsJzogJ1x1NjI5OFx1NTNFMFx1OTg4NFx1ODlDOCcgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRvZ2dsZUJ1dHRvbi5pbm5lckhUTUwgPSBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIGNsYXNzPVwiZmVhdGhlciBmZWF0aGVyLWNoZXZyb24tcmlnaHRcIj48cG9seWxpbmUgcG9pbnRzPVwiOSAxOCAxNSAxMiA5IDZcIj48L3BvbHlsaW5lPjwvc3ZnPmA7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdG9nZ2xlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy50b2dnbGVQcmV2aWV3KCkpO1xyXG5cclxuICAgICAgICAvLyBcdTZERkJcdTUyQTBcdThDMDNcdTY1NzRcdTU5MjdcdTVDMEZcdTc2ODRcdTUyOUZcdTgwRkRcclxuICAgICAgICB0aGlzLnByZXZpZXdSZXNpemVyID0gcHJldmlld1dyYXBwZXIuY3JlYXRlRGl2KCdwcmV2aWV3LXJlc2l6ZXInKTtcclxuICAgICAgICB0aGlzLnNldHVwUmVzaXplcigpO1xyXG5cclxuICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTUxNjhcdTVDNDBcdTZFREFcdThGNkVcdTRFOEJcdTRFRjZcdTc2RDFcdTU0MkNcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd3aGVlbCcsIChlOiBXaGVlbEV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlLmN0cmxLZXkpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWRqdXN0Q2FyZFNpemUoZS5kZWx0YVkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgeyBwYXNzaXZlOiBmYWxzZSB9KTtcclxuXHJcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkTm90ZXMoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1NTJBMFx1OEY3RFx1NjI0MFx1NjcwOVx1NjgwN1x1N0I3RVx1NUU3Nlx1NTIxQlx1NUVGQVx1NjgwN1x1N0I3RVx1OEZDN1x1NkVFNFx1NTY2OFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGFzeW5jIGxvYWRUYWdzKCkge1xyXG4gICAgICAgIGNvbnN0IHRhZ3MgPSB0aGlzLmdldEFsbFRhZ3MoKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTZERkJcdTUyQTAgXCJBbGxcIiBcdTY4MDdcdTdCN0VcclxuICAgICAgICBjb25zdCBhbGxUYWdCdG4gPSB0aGlzLnRhZ0NvbnRhaW5lci5jcmVhdGVFbCgnYnV0dG9uJywgeyBcclxuICAgICAgICAgICAgdGV4dDogJ0FsbCcsXHJcbiAgICAgICAgICAgIGNsczogJ3RhZy1idG4gYWN0aXZlJyAgLy8gXHU5RUQ4XHU4QkE0XHU5MDA5XHU0RTJEXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYWxsVGFnQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNsZWFyVGFnU2VsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgIGFsbFRhZ0J0bi5hZGRDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaFZpZXcoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gXHU2REZCXHU1MkEwXHU1MTc2XHU0RUQ2XHU2ODA3XHU3QjdFXHJcbiAgICAgICAgdGFncy5mb3JFYWNoKHRhZyA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhZ0J0biA9IHRoaXMudGFnQ29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7IFxyXG4gICAgICAgICAgICAgICAgdGV4dDogdGFnLFxyXG4gICAgICAgICAgICAgICAgY2xzOiAndGFnLWJ0bidcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRhZ0J0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVUYWcodGFnLCB0YWdCdG4pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1ODNCN1x1NTNENlx1NjI0MFx1NjcwOVx1N0IxNFx1OEJCMFx1NEUyRFx1NzY4NFx1NjgwN1x1N0I3RVxyXG4gICAgICogQHJldHVybnMgXHU1M0JCXHU5MUNEXHU1NDBFXHU3Njg0XHU2ODA3XHU3QjdFXHU2NTcwXHU3RUM0XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2V0QWxsVGFncygpOiBzdHJpbmdbXSB7XHJcbiAgICAgICAgY29uc3QgdGFncyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xyXG4gICAgICAgIHRoaXMuYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKS5mb3JFYWNoKGZpbGUgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjYWNoZSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpO1xyXG4gICAgICAgICAgICBpZiAoY2FjaGU/LnRhZ3MpIHtcclxuICAgICAgICAgICAgICAgIGNhY2hlLnRhZ3MuZm9yRWFjaCh0YWcgPT4gdGFncy5hZGQodGFnLnRhZykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGFncyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTUyMUJcdTVFRkFcdTg5QzZcdTU2RkVcdTUyMDdcdTYzNjJcdTYzMDlcdTk0QUVcclxuICAgICAqIEBwYXJhbSBjb250YWluZXIgLSBcdTYzMDlcdTk0QUVcdTVCQjlcdTU2NjhcdTUxNDNcdTdEMjBcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjcmVhdGVWaWV3U3dpdGNoZXIoY29udGFpbmVyOiBIVE1MRWxlbWVudCkge1xyXG4gICAgICAgIGNvbnN0IHZpZXdzID0gW1xyXG4gICAgICAgICAgICB7IGlkOiAnY2FyZCcsIGljb246ICdncmlkJywgdGV4dDogJ1x1NTM2MVx1NzI0N1x1ODlDNlx1NTZGRScgfSxcclxuICAgICAgICAgICAgeyBpZDogJ2xpc3QnLCBpY29uOiAnbGlzdCcsIHRleHQ6ICdcdTUyMTdcdTg4NjhcdTg5QzZcdTU2RkUnIH0sXHJcbiAgICAgICAgICAgIHsgaWQ6ICd0aW1lbGluZScsIGljb246ICdjbG9jaycsIHRleHQ6ICdcdTY1RjZcdTk1RjRcdThGNzRcdTg5QzZcdTU2RkUnIH1cclxuICAgICAgICBdO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHZpZXdzLmZvckVhY2godmlldyA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ0biA9IGNvbnRhaW5lci5jcmVhdGVFbCgnYnV0dG9uJywge1xyXG4gICAgICAgICAgICAgICAgY2xzOiBgdmlldy1zd2l0Y2gtYnRuICR7dmlldy5pZCA9PT0gdGhpcy5jdXJyZW50VmlldyA/ICdhY3RpdmUnIDogJyd9YCxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTc2RjRcdTYzQTUgU1ZHIFx1NTZGRVx1NjgwN1xyXG4gICAgICAgICAgICBjb25zdCBpY29uSHRtbCA9IHtcclxuICAgICAgICAgICAgICAgICdncmlkJzogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMThcIiBoZWlnaHQ9XCIxOFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIj48cmVjdCB4PVwiM1wiIHk9XCIzXCIgd2lkdGg9XCI3XCIgaGVpZ2h0PVwiN1wiPjwvcmVjdD48cmVjdCB4PVwiMTRcIiB5PVwiM1wiIHdpZHRoPVwiN1wiIGhlaWdodD1cIjdcIj48L3JlY3Q+PHJlY3QgeD1cIjE0XCIgeT1cIjE0XCIgd2lkdGg9XCI3XCIgaGVpZ2h0PVwiN1wiPjwvcmVjdD48cmVjdCB4PVwiM1wiIHk9XCIxNFwiIHdpZHRoPVwiN1wiIGhlaWdodD1cIjdcIj48L3JlY3Q+PC9zdmc+JyxcclxuICAgICAgICAgICAgICAgICdsaXN0JzogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMThcIiBoZWlnaHQ9XCIxOFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIj48bGluZSB4MT1cIjhcIiB5MT1cIjZcIiB4Mj1cIjIxXCIgeTI9XCI2XCI+PC9saW5lPjxsaW5lIHgxPVwiOFwiIHkxPVwiMTJcIiB4Mj1cIjIxXCIgeTI9XCIxMlwiPjwvbGluZT48bGluZSB4MT1cIjhcIiB5MT1cIjE4XCIgeDI9XCIyMVwiIHkyPVwiMThcIj48L2xpbmU+PGxpbmUgeDE9XCIzXCIgeTE9XCI2XCIgeDI9XCIzLjAxXCIgeTI9XCI2XCI+PC9saW5lPjxsaW5lIHgxPVwiM1wiIHkxPVwiMTJcIiB4Mj1cIjMuMDFcIiB5Mj1cIjEyXCI+PC9saW5lPjxsaW5lIHgxPVwiM1wiIHkxPVwiMThcIiB4Mj1cIjMuMDFcIiB5Mj1cIjE4XCI+PC9saW5lPjwvc3ZnPicsXHJcbiAgICAgICAgICAgICAgICAnY2xvY2snOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIxOFwiIGhlaWdodD1cIjE4XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiPjxjaXJjbGUgY3g9XCIxMlwiIGN5PVwiMTJcIiByPVwiMTBcIj48L2NpcmNsZT48cG9seWxpbmUgcG9pbnRzPVwiMTIgNiAxMiAxMiAxNiAxNFwiPjwvcG9seWxpbmU+PC9zdmc+J1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU1MjFCXHU1RUZBXHU1NkZFXHJcbiAgICAgICAgICAgIGNvbnN0IGljb25TcGFuID0gYnRuLmNyZWF0ZVNwYW4oeyBjbHM6ICd2aWV3LXN3aXRjaC1pY29uJyB9KTtcclxuICAgICAgICAgICAgaWNvblNwYW4uaW5uZXJIVE1MID0gaWNvbkh0bWxbdmlldy5pY29uXTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NkRGQlx1NTJBMFx1NjU4N1x1NUI1N1xyXG4gICAgICAgICAgICBidG4uY3JlYXRlU3Bhbih7IHRleHQ6IHZpZXcudGV4dCwgY2xzOiAndmlldy1zd2l0Y2gtdGV4dCcgfSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLnZpZXctc3dpdGNoLWJ0bicpLmZvckVhY2goYiA9PiBiLnJlbW92ZUNsYXNzKCdhY3RpdmUnKSk7XHJcbiAgICAgICAgICAgICAgICBidG4uYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zd2l0Y2hWaWV3KHZpZXcuaWQgYXMgJ2NhcmQnIHwgJ2xpc3QnIHwgJ3RpbWVsaW5lJyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFx1NTJBMFx1OEY3RFx1NjI0MFx1NjcwOVx1N0IxNFx1OEJCMFx1NUU3Nlx1NTIxQlx1NUVGQVx1NTM2MVx1NzI0N1xyXG4gICAgcHJpdmF0ZSBhc3luYyBsb2FkTm90ZXMoKSB7XHJcbiAgICAgICAgY29uc3QgZmlsZXMgPSB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIuZW1wdHkoKTtcclxuXHJcbiAgICAgICAgLy8gXHU0RjdGXHU3NTI4IFByb21pc2UuYWxsIFx1N0I0OVx1NUY4NVx1NjI0MFx1NjcwOVx1NTM2MVx1NzI0N1x1NTIxQlx1NUVGQVx1NUI4Q1x1NjIxMFxyXG4gICAgICAgIGNvbnN0IGNhcmRzID0gYXdhaXQgUHJvbWlzZS5hbGwoXHJcbiAgICAgICAgICAgIGZpbGVzLm1hcChmaWxlID0+IHRoaXMuY3JlYXRlTm90ZUNhcmQoZmlsZSkpXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy8gXHU2REZCXHU1MkEwXHU2MjQwXHU2NzA5XHU1MzYxXHU3MjQ3XHU1MjMwXHU1QkI5XHU1NjY4XHVGRjBDXHU1RTc2XHU4QkJFXHU3RjZFXHU2QjYzXHU3ODZFXHU3Njg0XHU1QkJEXHU1RUE2XHJcbiAgICAgICAgY2FyZHMuZm9yRWFjaChjYXJkID0+IHtcclxuICAgICAgICAgICAgaWYgKGNhcmQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgY2FyZC5zdHlsZS53aWR0aCA9IGAke3RoaXMuY2FyZFNpemV9cHhgO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQoY2FyZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gXHU3ODZFXHU0RkREXHU1QkI5XHU1NjY4XHU0RjdGXHU3NTI4XHU2QjYzXHU3ODZFXHU3Njg0XHU3RjUxXHU2ODNDXHU1MjE3XHU1QkJEXHU1RUE2XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUuZ3JpZFRlbXBsYXRlQ29sdW1ucyA9IGByZXBlYXQoYXV0by1maWxsLCAke3RoaXMuY2FyZFNpemV9cHgpYDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1NTIxQlx1NUVGQVx1NTM1NVx1NEUyQVx1N0IxNFx1OEJCMFx1NTM2MVx1NzI0N1xyXG4gICAgICogQHBhcmFtIGZpbGUgLSBcdTdCMTRcdThCQjBcdTY1ODdcdTRFRjZcclxuICAgICAqIEByZXR1cm5zIFx1NTM2MVx1NzI0N0hUTUxcdTUxNDNcdTdEMjBcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBhc3luYyBjcmVhdGVOb3RlQ2FyZChmaWxlOiBURmlsZSk6IFByb21pc2U8SFRNTEVsZW1lbnQ+IHtcclxuICAgICAgICBjb25zdCBjYXJkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgY2FyZC5hZGRDbGFzcygnbm90ZS1jYXJkJyk7XHJcbiAgICAgICAgY2FyZC5zZXRBdHRyaWJ1dGUoJ2RhdGEtcGF0aCcsIGZpbGUucGF0aCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU1MjFCXHU1RUZBXHU1MzYxXHU3MjQ3XHU1OTM0XHU5MEU4XHJcbiAgICAgICAgY29uc3QgaGVhZGVyID0gY2FyZC5jcmVhdGVEaXYoJ25vdGUtY2FyZC1oZWFkZXInKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTRGRUVcdTY1MzlcdTY1RjZcdTk1RjRcclxuICAgICAgICBjb25zdCBsYXN0TW9kaWZpZWQgPSBoZWFkZXIuY3JlYXRlRGl2KCdub3RlLWRhdGUnKTtcclxuICAgICAgICBsYXN0TW9kaWZpZWQuc2V0VGV4dChuZXcgRGF0ZShmaWxlLnN0YXQubXRpbWUpLnRvTG9jYWxlRGF0ZVN0cmluZygpKTtcclxuXHJcbiAgICAgICAgLy8gXHU0RkVFXHU2NTM5XHU2NTg3XHU0RUY2XHU1OTM5XHU4REVGXHU1Rjg0XHU3Njg0XHU1MjFCXHU1RUZBXHU1NDhDXHU2ODM3XHU1RjBGXHJcbiAgICAgICAgY29uc3QgZm9sZGVyUGF0aCA9IGhlYWRlci5jcmVhdGVEaXYoJ25vdGUtZm9sZGVyJyk7XHJcbiAgICAgICAgY29uc3QgZm9sZGVyID0gZmlsZS5wYXJlbnQgPyAoZmlsZS5wYXJlbnQucGF0aCA9PT0gJy8nID8gJ1x1NjgzOVx1NzZFRVx1NUY1NScgOiBmaWxlLnBhcmVudC5wYXRoKSA6ICdcdTY4MzlcdTc2RUVcdTVGNTUnO1xyXG4gICAgICAgIGZvbGRlclBhdGguc2V0VGV4dChmb2xkZXIpO1xyXG4gICAgICAgIGZvbGRlclBhdGguc2V0QXR0cmlidXRlKCd0aXRsZScsIGBcdTYyNTNcdTVGMDBcdTY1ODdcdTRFRjZcdTU5Mzk6ICR7Zm9sZGVyfWApO1xyXG4gICAgICAgIGZvbGRlclBhdGguYWRkQ2xhc3MoJ2NsaWNrYWJsZScpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1NkRGQlx1NTJBMFx1NzBCOVx1NTFGQlx1NEU4Qlx1NEVGNlxyXG4gICAgICAgIGZvbGRlclBhdGguYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoZSkgPT4ge1xyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTYyNTNcdTVGMDBcdTY1ODdcdTRFRjZcdTU5MzlcclxuICAgICAgICAgICAgY29uc3QgZmlsZUV4cGxvcmVyID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYXZlc09mVHlwZSgnZmlsZS1leHBsb3JlcicpWzBdO1xyXG4gICAgICAgICAgICBpZiAoZmlsZUV4cGxvcmVyKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBcdTZGQzBcdTZEM0JcdTY1ODdcdTRFRjZcdTZENEZcdTg5QzhcdTU2NjhcdTg5QzZcdTU2RkVcclxuICAgICAgICAgICAgICAgIHRoaXMuYXBwLndvcmtzcGFjZS5yZXZlYWxMZWFmKGZpbGVFeHBsb3Jlcik7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIFx1ODNCN1x1NTNENlx1NjU4N1x1NEVGNlx1NkQ0Rlx1ODlDOFx1NTY2OFx1ODlDNlx1NTZGRVx1NUI5RVx1NEY4QlxyXG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZUV4cGxvcmVyVmlldyA9IGZpbGVFeHBsb3Jlci52aWV3IGFzIGFueTtcclxuICAgICAgICAgICAgICAgIGlmIChmaWxlRXhwbG9yZXJWaWV3LmV4cGFuZEZvbGRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucmV2ZWFsRm9sZGVySW5FeHBsb3Jlcihmb2xkZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1ODA1QVx1NzEyNlx1NTIzMFx1NjU4N1x1NEVGNlx1NkQ0Rlx1ODlDOFx1NTY2OFxyXG4gICAgICAgICAgICAgICAgICAgIGZpbGVFeHBsb3Jlci5zZXRFcGhlbWVyYWxTdGF0ZSh7IGZvY3VzOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NkRGQlx1NTJBMFx1ODlDNlx1ODlDOVx1NTNDRFx1OTk4OFxyXG4gICAgICAgICAgICAgICAgICAgIGZvbGRlclBhdGguYWRkQ2xhc3MoJ2ZvbGRlci1jbGlja2VkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbGRlclBhdGgucmVtb3ZlQ2xhc3MoJ2ZvbGRlci1jbGlja2VkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgMjAwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTYyNTNcdTVGMDBcdTYzMDlcdTk0QUVcclxuICAgICAgICBjb25zdCBvcGVuQnV0dG9uID0gaGVhZGVyLmNyZWF0ZURpdignbm90ZS1vcGVuLWJ1dHRvbicpO1xyXG4gICAgICAgIG9wZW5CdXR0b24uaW5uZXJIVE1MID0gYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMTZcIiBoZWlnaHQ9XCIxNlwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIj48cGF0aCBkPVwiTTE4IDEzdjZhMiAyIDAgMCAxLTIgMkg1YTIgMiAwIDAgMS0yLTJWOGEyIDIgMCAwIDEgMi0yaDZcIj48L3BhdGg+PHBvbHlsaW5lIHBvaW50cz1cIjE1IDMgMjEgMyAyMSA5XCI+PC9wb2x5bGluZT48bGluZSB4MT1cIjEwXCIgeTE9XCIxNFwiIHgyPVwiMjFcIiB5Mj1cIjNcIj48L2xpbmU+PC9zdmc+YDtcclxuICAgICAgICBvcGVuQnV0dG9uLnNldEF0dHJpYnV0ZSgndGl0bGUnLCAnXHU1NzI4XHU2NUIwXHU2ODA3XHU3QjdFXHU5ODc1XHU0RTJEXHU2MjUzXHU1RjAwJyk7XHJcbiAgICAgICAgb3BlbkJ1dHRvbi5zdHlsZS5vcGFjaXR5ID0gJzAnOyAgLy8gXHU5RUQ4XHU4QkE0XHU5NjkwXHU4NUNGXHJcblxyXG4gICAgICAgIC8vIFx1NTIxQlx1NUVGQVx1NTM2MVx1NzI0N1x1NTE4NVx1NUJCOVx1NUJCOVx1NTY2OFxyXG4gICAgICAgIGNvbnN0IGNhcmRDb250ZW50ID0gY2FyZC5jcmVhdGVEaXYoJ25vdGUtY2FyZC1jb250ZW50Jyk7XHJcblxyXG4gICAgICAgIC8vIFx1NTkwNFx1NzQwNlx1NjgwN1x1OTg5OFx1RkYwOFx1NzlGQlx1NTIzMFx1NTE4NVx1NUJCOVx1NTMzQVx1NTdERlx1OTg3Nlx1OTBFOFx1RkYwOVxyXG4gICAgICAgIGNvbnN0IHRpdGxlID0gY2FyZENvbnRlbnQuY3JlYXRlRGl2KCdub3RlLXRpdGxlJyk7XHJcbiAgICAgICAgbGV0IGRpc3BsYXlUaXRsZSA9IGZpbGUuYmFzZW5hbWU7XHJcbiAgICAgICAgLy8gXHU1OTA0XHU3NDA2XHU2NUU1XHU2NzFGXHU1RjAwXHU1OTM0XHU3Njg0XHU2ODA3XHU5ODk4XHJcbiAgICAgICAgY29uc3QgdGltZVBhdHRlcm4gPSAvXlxcZHs0fVstLi9dXFxkezJ9Wy0uL11cXGR7Mn0vO1xyXG4gICAgICAgIGlmICh0aW1lUGF0dGVybi50ZXN0KGRpc3BsYXlUaXRsZSkpIHtcclxuICAgICAgICAgICAgZGlzcGxheVRpdGxlID0gZGlzcGxheVRpdGxlLnJlcGxhY2UodGltZVBhdHRlcm4sICcnKS50cmltKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRpdGxlLnNldFRleHQoZGlzcGxheVRpdGxlKTtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgLy8gXHU4QkZCXHU1M0Q2XHU3QjE0XHU4QkIwXHU1MTg1XHU1QkI5XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5yZWFkKGZpbGUpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU1MjFCXHU1RUZBXHU3QjE0XHU4QkIwXHU1MTg1XHU1QkI5XHU1QkI5XHU1NjY4XHJcbiAgICAgICAgICAgIGNvbnN0IG5vdGVDb250ZW50ID0gY2FyZENvbnRlbnQuY3JlYXRlRGl2KCdub3RlLWNvbnRlbnQnKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NkUzMlx1NjdEMyBNYXJrZG93biBcdTUxODVcdTVCQjlcclxuICAgICAgICAgICAgYXdhaXQgTWFya2Rvd25SZW5kZXJlci5yZW5kZXJNYXJrZG93bihcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICBub3RlQ29udGVudCxcclxuICAgICAgICAgICAgICAgIGZpbGUucGF0aCxcclxuICAgICAgICAgICAgICAgIHRoaXMgXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAvLyBcdTlGMjBcdTY4MDdcdTYwQUNcdTUwNUNcdTRFOEJcdTRFRjZcclxuICAgICAgICAgICAgY2FyZC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgb3BlbkJ1dHRvbi5zdHlsZS5vcGFjaXR5ID0gJzEnOyAgLy8gXHU2NjNFXHU3OTNBXHU2MjUzXHU1RjAwXHU2MzA5XHU5NEFFXHJcbiAgICAgICAgICAgICAgICB0aXRsZS5zdHlsZS5vcGFjaXR5ID0gJzAnO1xyXG4gICAgICAgICAgICAgICAgbm90ZUNvbnRlbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIFx1NTcyOFx1OTg4NFx1ODlDOFx1NjgwRlx1NEUyRFx1NjYzRVx1NzkzQVx1NUI4Q1x1NjU3NFx1NTE4NVx1NUJCOVxyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXZpZXdDb250YWluZXIuZW1wdHkoKTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBNYXJrZG93blJlbmRlcmVyLnJlbmRlck1hcmtkb3duKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXZpZXdDb250YWluZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUucGF0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1xyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1OTg4NFx1ODlDOFx1NTJBMFx1OEY3RFx1NTkzMVx1OEQyNTonLCBlcnJvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gXHU5RjIwXHU2ODA3XHU3OUJCXHU1RjAwXHU0RThCXHU0RUY2XHJcbiAgICAgICAgICAgIGNhcmQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIG9wZW5CdXR0b24uc3R5bGUub3BhY2l0eSA9ICcwJzsgIC8vIFx1OTY5MFx1ODVDRlx1NjI1M1x1NUYwMFx1NjMwOVx1OTRBRVxyXG4gICAgICAgICAgICAgICAgdGl0bGUuc3R5bGUub3BhY2l0eSA9ICcxJztcclxuICAgICAgICAgICAgICAgIG5vdGVDb250ZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gXHU0RkVFXHU2NTM5XHU0RThCXHU0RUY2XHU3NkQxXHU1NDJDXHJcbiAgICAgICAgICAgIG9wZW5CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMub3BlbkluQXBwcm9wcmlhdGVMZWFmKGZpbGUpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIFx1NTM1NVx1NTFGQlx1OTAwOVx1NjJFOVxyXG4gICAgICAgICAgICBjYXJkLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlQ2FyZFNlbGVjdGlvbihmaWxlLnBhdGgsIGUpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIFx1NTNDQ1x1NTFGQlx1NjI1M1x1NUYwMFxyXG4gICAgICAgICAgICBjYXJkLmFkZEV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5vcGVuSW5BcHByb3ByaWF0ZUxlYWYoZmlsZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gXHU1M0YzXHU5NTJFXHU4M0RDXHU1MzU1XHJcbiAgICAgICAgICAgIGNhcmQuYWRkRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaG93Q29udGV4dE1lbnUoZSwgdGhpcy5nZXRTZWxlY3RlZEZpbGVzKCkpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignXHU3QjE0XHU4QkIwXHU1MkEwXHU4RjdEXHU1OTMxXHU4RDI1OicsIGVycm9yKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFx1NkRGQlx1NTJBMFx1NTM2MVx1NzI0N1x1NjBBQ1x1NTA1Q1x1NEU4Qlx1NEVGNlxyXG4gICAgICAgIGNhcmQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgb3BlbkJ1dHRvbi5zdHlsZS5vcGFjaXR5ID0gJzEnOyAgLy8gXHU2NjNFXHU3OTNBXHU2MjUzXHU1RjAwXHU2MzA5XHU5NEFFXHJcbiAgICAgICAgICAgIC8vIC4uLiBcdTUxNzZcdTRFRDZcdTYwQUNcdTUwNUNcdTRFOEJcdTRFRjZcdTc4MDEgLi4uXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNhcmQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsICgpID0+IHtcclxuICAgICAgICAgICAgb3BlbkJ1dHRvbi5zdHlsZS5vcGFjaXR5ID0gJzAnOyAgLy8gXHU5NjkwXHU4NUNGXHU2MjUzXHU1RjAwXHU2MzA5XHU5NEFFXHJcbiAgICAgICAgICAgIC8vIC4uLiBcdTUxNzZcdTRFRDZcdTc5QkJcdTVGMDBcdTRFOEJcdTRFRjZcdTRFRTNcdTc4MDEgLi4uXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBjYXJkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU1MjA3XHU2MzYyXHU4OUM2XHU1NkZFXHU2QTIxXHU1RjBGXHJcbiAgICAgKiBAcGFyYW0gdmlldyAtIFx1NzZFRVx1NjgwN1x1ODlDNlx1NTZGRVx1NkEyMVx1NUYwRlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHN3aXRjaFZpZXcodmlldzogJ2NhcmQnIHwgJ2xpc3QnIHwgJ3RpbWVsaW5lJykge1xyXG4gICAgICAgIHRoaXMuY3VycmVudFZpZXcgPSB2aWV3O1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnZGF0YS12aWV3Jywgdmlldyk7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIuZW1wdHkoKTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAodmlldyA9PT0gJ3RpbWVsaW5lJykge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVRpbWVsaW5lVmlldygpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZE5vdGVzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU2ODM5XHU2MzZFXHU2ODA3XHU3QjdFXHU4RkM3XHU2RUU0XHU3QjE0XHU4QkIwXHJcbiAgICAgKiBAcGFyYW0gdGFnIC0gXHU2ODA3XHU3QjdFXHU1NDBEXHU3OUYwXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgYXN5bmMgZmlsdGVyQnlUYWcodGFnOiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCBmaWxlcyA9IHRoaXMuYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lci5lbXB0eSgpO1xyXG5cclxuICAgICAgICBjb25zdCBmaWx0ZXJlZEZpbGVzID0gZmlsZXMuZmlsdGVyKGZpbGUgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjYWNoZSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gY2FjaGU/LnRhZ3M/LnNvbWUodCA9PiB0LnRhZyA9PT0gdGFnKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gXHU0RjdGXHU3NTI4IFByb21pc2UuYWxsIFx1N0I0OVx1NUY4NVx1NjI0MFx1NjcwOVx1NTM2MVx1NzI0N1x1NTIxQlx1NUVGQVx1NUI4Q1x1NjIxMFxyXG4gICAgICAgIGNvbnN0IGNhcmRzID0gYXdhaXQgUHJvbWlzZS5hbGwoXHJcbiAgICAgICAgICAgIGZpbHRlcmVkRmlsZXMubWFwKGZpbGUgPT4gdGhpcy5jcmVhdGVOb3RlQ2FyZChmaWxlKSlcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTYyNDBcdTY3MDlcdTUzNjFcdTcyNDdcdTUyMzBcdTVCQjlcdTU2NjhcclxuICAgICAgICBjYXJkcy5mb3JFYWNoKGNhcmQgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZChjYXJkKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gXHU5QUQ4XHU0RUFFXHU5MDA5XHU0RTJEXHU3Njg0XHU2ODA3XHU3QjdFXHJcbiAgICAgICAgdGhpcy50YWdDb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnYnV0dG9uJykuZm9yRWFjaChidG4gPT4ge1xyXG4gICAgICAgICAgICBpZiAoYnRuLnRleHRDb250ZW50ID09PSB0YWcpIHtcclxuICAgICAgICAgICAgICAgIGJ0bi5hZGRDbGFzcygnYWN0aXZlLXRhZycpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYnRuLnJlbW92ZUNsYXNzKCdhY3RpdmUtdGFnJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBcdTUyMDdcdTYzNjJcdTk4ODRcdTg5QzhcdTY4MEZcdTc2ODRcdTY2M0VcdTc5M0FcdTcyQjZcdTYwMDFcclxuICAgIHByaXZhdGUgdG9nZ2xlUHJldmlldygpIHtcclxuICAgICAgICB0aGlzLmlzUHJldmlld0NvbGxhcHNlZCA9ICF0aGlzLmlzUHJldmlld0NvbGxhcHNlZDtcclxuICAgICAgICBpZiAodGhpcy5pc1ByZXZpZXdDb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5wcmV2aWV3Q29udGFpbmVyLmFkZENsYXNzKCdjb2xsYXBzZWQnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnByZXZpZXdDb250YWluZXIucmVtb3ZlQ2xhc3MoJ2NvbGxhcHNlZCcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBcdTRGRUVcdTY1MzlcdTk4ODRcdTg5QzhcdTY4MEZcdTU5MjdcdTVDMEZcdThDMDNcdTY1NzRcdTY1QjlcdTZDRDVcclxuICAgIHByaXZhdGUgc2V0dXBSZXNpemVyKCkge1xyXG4gICAgICAgIGxldCBzdGFydFg6IG51bWJlcjtcclxuICAgICAgICBsZXQgc3RhcnRXaWR0aDogbnVtYmVyO1xyXG5cclxuICAgICAgICBjb25zdCBzdGFydFJlc2l6ZSA9IChlOiBNb3VzZUV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgc3RhcnRYID0gZS5wYWdlWDtcclxuICAgICAgICAgICAgc3RhcnRXaWR0aCA9IHBhcnNlSW50KGdldENvbXB1dGVkU3R5bGUodGhpcy5wcmV2aWV3Q29udGFpbmVyKS53aWR0aCwgMTApO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCByZXNpemUpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgc3RvcFJlc2l6ZSk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yID0gJ2NvbC1yZXNpemUnO1xyXG4gICAgICAgICAgICB0aGlzLnByZXZpZXdSZXNpemVyLmFkZENsYXNzKCdyZXNpemluZycpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnN0IHJlc2l6ZSA9IChlOiBNb3VzZUV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gc3RhcnRXaWR0aCAtIChlLnBhZ2VYIC0gc3RhcnRYKTtcclxuICAgICAgICAgICAgaWYgKHdpZHRoID49IDUwICYmIHdpZHRoIDw9IDgwMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcmV2aWV3Q29udGFpbmVyLnN0eWxlLndpZHRoID0gYCR7d2lkdGh9cHhgO1xyXG4gICAgICAgICAgICAgICAgLy8gXHU4QzAzXHU2NTc0XHU1MzYxXHU3MjQ3XHU1QkI5XHU1NjY4XHU3Njg0XHU1QkJEXHU1RUE2XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkanVzdENvbnRlbnRXaWR0aCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNQcmV2aWV3Q29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1ByZXZpZXdDb2xsYXBzZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXZpZXdDb250YWluZXIucmVtb3ZlQ2xhc3MoJ2NvbGxhcHNlZCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3Qgc3RvcFJlc2l6ZSA9ICgpID0+IHtcclxuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgcmVzaXplKTtcclxuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHN0b3BSZXNpemUpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvciA9ICcnO1xyXG4gICAgICAgICAgICB0aGlzLnByZXZpZXdSZXNpemVyLnJlbW92ZUNsYXNzKCdyZXNpemluZycpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMucHJldmlld1Jlc2l6ZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgc3RhcnRSZXNpemUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFx1NkRGQlx1NTJBMFx1NTE4NVx1NUJCOVx1NTMzQVx1NTdERlx1NUJCRFx1NUVBNlx1OEMwM1x1NjU3NFx1NjVCOVx1NkNENVxyXG4gICAgcHJpdmF0ZSBhZGp1c3RDb250ZW50V2lkdGgoKSB7XHJcbiAgICAgICAgY29uc3QgbWFpbkxheW91dCA9IHRoaXMuY29udGFpbmVyRWwucXVlcnlTZWxlY3RvcignLm1haW4tbGF5b3V0Jyk7XHJcbiAgICAgICAgY29uc3QgcHJldmlld1dpZHRoID0gdGhpcy5wcmV2aWV3Q29udGFpbmVyLm9mZnNldFdpZHRoO1xyXG4gICAgICAgIGNvbnN0IGNvbnRlbnRTZWN0aW9uID0gdGhpcy5jb250YWluZXJFbC5xdWVyeVNlbGVjdG9yKCcuY29udGVudC1zZWN0aW9uJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKG1haW5MYXlvdXQgJiYgY29udGVudFNlY3Rpb24pIHtcclxuICAgICAgICAgICAgY29uc3QgdG90YWxXaWR0aCA9IG1haW5MYXlvdXQub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld0NvbnRlbnRXaWR0aCA9IHRvdGFsV2lkdGggLSBwcmV2aWV3V2lkdGggLSA0OyAvLyA0cHggXHU2NjJGXHU1MjA2XHU5Njk0XHU3RUJGXHU1QkJEXHU1RUE2XHJcbiAgICAgICAgICAgIGNvbnRlbnRTZWN0aW9uLnN0eWxlLndpZHRoID0gYCR7bmV3Q29udGVudFdpZHRofXB4YDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1OTFDRFx1NjVCMFx1OEJBMVx1N0I5N1x1NTM2MVx1NzI0N1x1NTIxN1x1NjU3MFxyXG4gICAgICAgICAgICBjb25zdCBhdmFpbGFibGVXaWR0aCA9IG5ld0NvbnRlbnRXaWR0aCAtIDMyOyAvLyBcdTUxQ0ZcdTUzQkJcdTUxODVcdThGQjlcdThERERcclxuICAgICAgICAgICAgY29uc3QgY29sdW1ucyA9IE1hdGguZmxvb3IoYXZhaWxhYmxlV2lkdGggLyB0aGlzLmNhcmRTaXplKTtcclxuICAgICAgICAgICAgY29uc3QgZ2FwID0gMTY7IC8vIFx1NTM2MVx1NzI0N1x1OTVGNFx1OERERFxyXG4gICAgICAgICAgICBjb25zdCBhY3R1YWxDYXJkV2lkdGggPSAoYXZhaWxhYmxlV2lkdGggLSAoY29sdW1ucyAtIDEpICogZ2FwKSAvIGNvbHVtbnM7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS5ncmlkVGVtcGxhdGVDb2x1bW5zID0gYHJlcGVhdCgke2NvbHVtbnN9LCAke2FjdHVhbENhcmRXaWR0aH1weClgO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBcdTlBRDhcdTRFQUVcdTY1ODdcdTRFRjZcdTU5MzlcclxuICAgIHByaXZhdGUgaGlnaGxpZ2h0Rm9sZGVyKGZvbGRlcjogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50Rm9sZGVyID0gdGhpcy5jdXJyZW50Rm9sZGVyID09PSBmb2xkZXIgPyBudWxsIDogZm9sZGVyO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5ub3RlLWNhcmQnKS5mb3JFYWNoKGNhcmQgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBmb2xkZXJFbGVtZW50ID0gY2FyZC5xdWVyeVNlbGVjdG9yKCcubm90ZS1mb2xkZXInKTtcclxuICAgICAgICAgICAgY29uc3QgY2FyZEZvbGRlciA9IGZvbGRlckVsZW1lbnQgPyBmb2xkZXJFbGVtZW50LnRleHRDb250ZW50IDogbnVsbDtcclxuICAgICAgICAgICAgaWYgKGNhcmRGb2xkZXIpIHtcclxuICAgICAgICAgICAgICAgIGNhcmQudG9nZ2xlQ2xhc3MoJ2ZvbGRlci1oaWdobGlnaHQnLCBjYXJkRm9sZGVyID09PSBmb2xkZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyByZXZlYWxGb2xkZXJJbkV4cGxvcmVyKGZvbGRlcjogc3RyaW5nKSB7XHJcbiAgICAgICAgLy8gXHU4M0I3XHU1M0Q2XHU2NTg3XHU0RUY2XHU2RDRGXHU4OUM4XHU1NjY4XHU4OUM2XHU1NkZFXHJcbiAgICAgICAgY29uc3QgZmlsZUV4cGxvcmVyID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYXZlc09mVHlwZSgnZmlsZS1leHBsb3JlcicpWzBdO1xyXG4gICAgICAgIGlmIChmaWxlRXhwbG9yZXIpIHtcclxuICAgICAgICAgICAgY29uc3QgZmlsZUV4cGxvcmVyVmlldyA9IGZpbGVFeHBsb3Jlci52aWV3IGFzIGFueTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NTk4Mlx1Njc5Q1x1NjYyRlx1NjgzOVx1NzZFRVx1NUY1NVx1RkYwQ1x1NzZGNFx1NjNBNVx1NUM1NVx1NUYwMFx1NjgzOVx1NzZFRVx1NUY1NVxyXG4gICAgICAgICAgICBpZiAoZm9sZGVyID09PSAnXHU2ODM5XHU3NkVFXHU1RjU1Jykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGZpbGVFeHBsb3JlclZpZXcuZXhwYW5kRm9sZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgZmlsZUV4cGxvcmVyVmlldy5leHBhbmRGb2xkZXIoJy8nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gXHU1QzU1XHU1RjAwXHU1RTc2XHU5MDA5XHU0RTJEXHU2NTg3XHU0RUY2XHU1OTM5XHJcbiAgICAgICAgICAgIGlmIChmaWxlRXhwbG9yZXJWaWV3LmV4cGFuZEZvbGRlcikge1xyXG4gICAgICAgICAgICAgICAgLy8gXHU1QzU1XHU1RjAwXHU3MjM2XHU2NTg3XHU0RUY2XHU1OTM5XHU4REVGXHJcbiAgICAgICAgICAgICAgICBjb25zdCBmb2xkZXJQYXJ0cyA9IGZvbGRlci5zcGxpdCgnLycpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRQYXRoID0gJyc7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIFx1OTAxMFx1N0VBN1x1NUM1NVx1NUYwMFx1NjU4N1x1NEVGNlx1NTkzOVxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwYXJ0IG9mIGZvbGRlclBhcnRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFBhdGggKz0gKGN1cnJlbnRQYXRoID8gJy8nIDogJycpICsgcGFydDtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBmaWxlRXhwbG9yZXJWaWV3LmV4cGFuZEZvbGRlcihjdXJyZW50UGF0aCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gXHU5MDA5XHU0RTJEXHU3NkVFXHU2ODA3XHU2NTg3XHU0RUY2XHU1OTM5XHJcbiAgICAgICAgICAgICAgICBpZiAoZmlsZUV4cGxvcmVyVmlldy5zZXRTZWxlY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBmaWxlRXhwbG9yZXJWaWV3LnNldFNlbGVjdGlvbihmb2xkZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFx1NTIxQlx1NUVGQVx1NjVCMFx1N0IxNFx1OEJCMFxyXG4gICAgcHJpdmF0ZSBhc3luYyBjcmVhdGVOZXdOb3RlKCkge1xyXG4gICAgICAgIC8vIFx1ODNCN1x1NTNENlx1NUY1M1x1NTI0RFx1NjVFNVx1NjcxRlx1NEY1Q1x1NEUzQVx1OUVEOFx1OEJBNFx1NjU4N1x1NEVGNlx1NTQwRFxyXG4gICAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgIGNvbnN0IGZpbGVOYW1lID0gYCAke2RhdGUudG9Mb2NhbGVTdHJpbmcoKS5yZXBsYWNlKC9bLzpdL2csICctJyl9XHU2NzJBXHU1NDdEXHU1NDBEXHU3QjE0XHU4QkIwYDtcclxuICAgICAgICBcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyBcdTUyMUJcdTVFRkFcdTY1QjBcdTdCMTRcdThCQjBcclxuICAgICAgICAgICAgY29uc3QgZmlsZSA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LmNyZWF0ZShcclxuICAgICAgICAgICAgICAgIGAke2ZpbGVOYW1lfS5tZGAsXHJcbiAgICAgICAgICAgICAgICAnIyAnICsgZmlsZU5hbWUgKyAnXFxuXFxuJ1xyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU1NzI4XHU2NUIwXHU2ODA3XHU3QjdFXHU5ODc1XHU0RTJEXHU2MjUzXHU1RjAwXHU3QjE0XHU4QkIwXHJcbiAgICAgICAgICAgIGNvbnN0IGxlYWYgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhZigndGFiJyk7XHJcbiAgICAgICAgICAgIGF3YWl0IGxlYWYub3BlbkZpbGUoZmlsZSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTUyMzdcdTY1QjBcdTUzNjFcdTcyNDdcdTg5QzZcdTU2RkVcclxuICAgICAgICAgICAgdGhpcy5sb2FkTm90ZXMoKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdcdTUyMUJcdTVFRkFcdTdCMTRcdThCQjBcdTU5MzFcdThEMjU6JywgZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBcdTUyMUJcdTVFRkFcdTY1RjZcdTk1RjRcdThGNzRcdTg5QzZcdTU2RkVcclxuICAgIHByaXZhdGUgYXN5bmMgY3JlYXRlVGltZWxpbmVWaWV3KCkge1xyXG4gICAgICAgIGNvbnN0IHRpbWVsaW5lQ29udGFpbmVyID0gdGhpcy5jb250YWluZXIuY3JlYXRlRGl2KCd0aW1lbGluZS1jb250YWluZXInKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTYyNDBcdTY3MDlcdTdCMTRcdThCQjBcdTVFNzZcdTYzMDlcdTY1RTVcdTY3MUZcdTUyMDZcdTdFQzRcclxuICAgICAgICBjb25zdCBmaWxlcyA9IHRoaXMuYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcclxuICAgICAgICBjb25zdCBub3Rlc0J5RGF0ZSA9IG5ldyBNYXA8c3RyaW5nLCBURmlsZVtdPigpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGZpbGVzLmZvckVhY2goZmlsZSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShmaWxlLnN0YXQubXRpbWUpLnRvTG9jYWxlRGF0ZVN0cmluZygpO1xyXG4gICAgICAgICAgICBpZiAoIW5vdGVzQnlEYXRlLmhhcyhkYXRlKSkge1xyXG4gICAgICAgICAgICAgICAgbm90ZXNCeURhdGUuc2V0KGRhdGUsIFtdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBub3RlcyA9IG5vdGVzQnlEYXRlLmdldChkYXRlKTtcclxuICAgICAgICAgICAgaWYgKG5vdGVzKSB7XHJcbiAgICAgICAgICAgICAgICBub3Rlcy5wdXNoKGZpbGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIFx1NjMwOVx1NjVFNVx1NjcxRlx1NjM5Mlx1NUU4RlxyXG4gICAgICAgIGNvbnN0IHNvcnRlZERhdGVzID0gQXJyYXkuZnJvbShub3Rlc0J5RGF0ZS5rZXlzKCkpLnNvcnQoKGEsIGIpID0+IFxyXG4gICAgICAgICAgICBuZXcgRGF0ZShiKS5nZXRUaW1lKCkgLSBuZXcgRGF0ZShhKS5nZXRUaW1lKClcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBcdTUyMUJcdTVFRkFcdTY1RjZcdTk1RjRcdThGNzRcclxuICAgICAgICBmb3IgKGNvbnN0IGRhdGUgb2Ygc29ydGVkRGF0ZXMpIHtcclxuICAgICAgICAgICAgY29uc3QgZGF0ZUdyb3VwID0gdGltZWxpbmVDb250YWluZXIuY3JlYXRlRGl2KCd0aW1lbGluZS1kYXRlLWdyb3VwJyk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTUyMUJcdTVFRkFcdTY1RTVcdTY3MUZcdTgyODJcdTcwQjlcclxuICAgICAgICAgICAgY29uc3QgZGF0ZU5vZGUgPSBkYXRlR3JvdXAuY3JlYXRlRGl2KCd0aW1lbGluZS1kYXRlLW5vZGUnKTtcclxuICAgICAgICAgICAgZGF0ZU5vZGUuY3JlYXRlRGl2KCd0aW1lbGluZS1ub2RlLWNpcmNsZScpO1xyXG4gICAgICAgICAgICBkYXRlTm9kZS5jcmVhdGVEaXYoJ3RpbWVsaW5lLWRhdGUtbGFiZWwnKS5zZXRUZXh0KGRhdGUpO1xyXG5cclxuICAgICAgICAgICAgLy8gXHU1MjFCXHU1RUZBXHU3QjE0XHU4QkIwXHU1MjE3XHU4ODY4XHJcbiAgICAgICAgICAgIGNvbnN0IG5vdGVzTGlzdCA9IGRhdGVHcm91cC5jcmVhdGVEaXYoJ3RpbWVsaW5lLW5vdGVzLWxpc3QnKTtcclxuICAgICAgICAgICAgY29uc3Qgbm90ZXMgPSBub3Rlc0J5RGF0ZS5nZXQoZGF0ZSk7XHJcbiAgICAgICAgICAgIGlmIChub3Rlcykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBmaWxlIG9mIG5vdGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm90ZUl0ZW0gPSBub3Rlc0xpc3QuY3JlYXRlRGl2KCd0aW1lbGluZS1ub3RlLWl0ZW0nKTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAvLyBcdTUyMUJcdTVFRkFcdTY4MDdcdThCQjBcclxuICAgICAgICAgICAgICAgICAgICBub3RlSXRlbS5jcmVhdGVEaXYoJ3RpbWVsaW5lLW5vdGUtbWFya2VyJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU1MjFCXHU1RUZBXHU3QjE0XHU4QkIwXHU1MTg1XHU1QkI5XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm90ZUNvbnRlbnQgPSBub3RlSXRlbS5jcmVhdGVEaXYoJ3RpbWVsaW5lLW5vdGUtY29udGVudCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5vdGVDb250ZW50LmNyZWF0ZURpdigndGltZWxpbmUtbm90ZS10aXRsZScpLnNldFRleHQoZmlsZS5iYXNlbmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU2REZCXHU1MkEwXHU3MEI5XHU1MUZCXHU0RThCXHU0RUY2XHJcbiAgICAgICAgICAgICAgICAgICAgbm90ZUl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxlYWYgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhZigndGFiJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGxlYWYub3BlbkZpbGUoZmlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NkRGQlx1NTJBMFx1OTg4NFx1ODlDOFx1NTI5Rlx1ODBGRFxyXG4gICAgICAgICAgICAgICAgICAgIG5vdGVJdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXZpZXdDb250YWluZXIuZW1wdHkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5yZWFkKGZpbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgTWFya2Rvd25SZW5kZXJlci5yZW5kZXJNYXJrZG93bihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJldmlld0NvbnRhaW5lcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlLnBhdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1OTg4NFx1ODlDOFx1NTJBMFx1OEY3RFx1NTkzMVx1OEQyNTonLCBlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBcdTUyMzdcdTY1QjBcdTg5QzZcdTU2RkVcdUZGMDhcdTc1MjhcdTRFOEVcdTY0MUNcdTdEMjJcdTU0OENcdThGQzdcdTZFRTRcdUZGMDlcclxuICAgIHByaXZhdGUgYXN5bmMgcmVmcmVzaFZpZXcoKSB7XHJcbiAgICAgICAgY29uc3QgZmlsZXMgPSB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIuZW1wdHkoKTtcclxuXHJcbiAgICAgICAgY29uc3QgZmlsdGVyZWRGaWxlcyA9IGZpbGVzLmZpbHRlcihmaWxlID0+IHtcclxuICAgICAgICAgICAgLy8gXHU2NDFDXHU3RDIyXHU4RkM3XHU2RUU0XHJcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZXNTZWFyY2ggPSAhdGhpcy5jdXJyZW50U2VhcmNoVGVybSB8fCBcclxuICAgICAgICAgICAgICAgIGZpbGUuYmFzZW5hbWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyh0aGlzLmN1cnJlbnRTZWFyY2hUZXJtLnRvTG93ZXJDYXNlKCkpO1xyXG5cclxuICAgICAgICAgICAgLy8gXHU2ODA3XHU3QjdFXHU4RkM3XHU2RUU0XHJcbiAgICAgICAgICAgIGxldCBtYXRjaGVzVGFncyA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkVGFncy5zaXplID4gMCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2FjaGUgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcclxuICAgICAgICAgICAgICAgIG1hdGNoZXNUYWdzID0gY2FjaGU/LnRhZ3M/LnNvbWUodCA9PiB0aGlzLnNlbGVjdGVkVGFncy5oYXModC50YWcpKSA/PyBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gXHU2NUU1XHU2NzFGXHU4RkM3XHU2RUU0XHJcbiAgICAgICAgICAgIGxldCBtYXRjaGVzRGF0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRGaWx0ZXIudHlwZSA9PT0gJ2RhdGUnKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmaWxlRGF0ZSA9IG5ldyBEYXRlKGZpbGUuc3RhdC5tdGltZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmaWxlRGF0ZVN0ciA9IGZpbGVEYXRlLnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudEZpbHRlci52YWx1ZS5sZW5ndGggPT09IDcpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBcdTYzMDlcdTY3MDhcdTRFRkRcdThGQzdcdTZFRTRcclxuICAgICAgICAgICAgICAgICAgICBtYXRjaGVzRGF0ZSA9IGZpbGVEYXRlU3RyLnN0YXJ0c1dpdGgodGhpcy5jdXJyZW50RmlsdGVyLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU2MzA5XHU1MTc3XHU0RjUzXHU2NUU1XHU2NzFGXHU4RkM3XHU2RUU0XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlc0RhdGUgPSBmaWxlRGF0ZVN0ciA9PT0gdGhpcy5jdXJyZW50RmlsdGVyLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbWF0Y2hlc1NlYXJjaCAmJiBtYXRjaGVzVGFncyAmJiBtYXRjaGVzRGF0ZTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gXHU1MjFCXHU1RUZBXHU1MzYxXHU3MjQ3XHU1RTc2XHU5QUQ4XHU0RUFFXHU2NDFDXHU3RDIyXHU4QkNEXHJcbiAgICAgICAgY29uc3QgY2FyZHMgPSBhd2FpdCBQcm9taXNlLmFsbChcclxuICAgICAgICAgICAgZmlsdGVyZWRGaWxlcy5tYXAoZmlsZSA9PiB0aGlzLmNyZWF0ZU5vdGVDYXJkKGZpbGUsIHRoaXMuY3VycmVudFNlYXJjaFRlcm0pKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGNhcmRzLmZvckVhY2goY2FyZCA9PiB7XHJcbiAgICAgICAgICAgIGlmIChjYXJkIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIGNhcmQuc3R5bGUud2lkdGggPSBgJHt0aGlzLmNhcmRTaXplfXB4YDtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKGNhcmQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLmdyaWRUZW1wbGF0ZUNvbHVtbnMgPSBgcmVwZWF0KGF1dG8tZmlsbCwgJHt0aGlzLmNhcmRTaXplfXB4KWA7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gXHU2REZCXHU1MkEwXHU2ODA3XHU3QjdFXHU1MjA3XHU2MzYyXHU2NUI5XHU2Q0Q1XHJcbiAgICBwcml2YXRlIHRvZ2dsZVRhZyh0YWc6IHN0cmluZywgdGFnQnRuOiBIVE1MRWxlbWVudCkge1xyXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkVGFncy5oYXModGFnKSkge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkVGFncy5kZWxldGUodGFnKTtcclxuICAgICAgICAgICAgdGFnQnRuLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkVGFncy5hZGQodGFnKTtcclxuICAgICAgICAgICAgdGFnQnRuLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFx1NTNENlx1NkQ4OCBcIkFsbFwiIFx1NjgwN1x1N0I3RVx1NzY4NFx1OTAwOVx1NEUyRFx1NzJCNlx1NjAwMVxyXG4gICAgICAgIGNvbnN0IGFsbEJ0biA9IHRoaXMudGFnQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvbicpO1xyXG4gICAgICAgIGlmIChhbGxCdG4pIHtcclxuICAgICAgICAgICAgYWxsQnRuLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucmVmcmVzaFZpZXcoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBcdTZERkJcdTUyQTBcdTZFMDVcdTk2NjRcdTY4MDdcdTdCN0VcdTkwMDlcdTYyRTlcdTY1QjlcdTZDRDVcclxuICAgIHByaXZhdGUgY2xlYXJUYWdTZWxlY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZFRhZ3MuY2xlYXIoKTtcclxuICAgICAgICB0aGlzLnRhZ0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcudGFnLWJ0bicpLmZvckVhY2goYnRuID0+IHtcclxuICAgICAgICAgICAgYnRuLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBcdTU5MDRcdTc0MDZcdTUzNjFcdTcyNDdcdTkwMDlcdTYyRTlcclxuICAgIHByaXZhdGUgaGFuZGxlQ2FyZFNlbGVjdGlvbihwYXRoOiBzdHJpbmcsIGV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgY2FyZCA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXBhdGg9XCIke3BhdGh9XCJdYCk7XHJcbiAgICAgICAgaWYgKCFjYXJkKSB7XHJcbiAgICAgICAgICB0aGlzLmNsZWFyU2VsZWN0aW9uKCk7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZXZlbnQuY3RybEtleSkge1xyXG4gICAgICAgICAgICAvLyBDdHJsICsgXHU3MEI5XHU1MUZCXHVGRjFBXHU1MjA3XHU2MzYyXHU5MDA5XHU2MkU5XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkTm90ZXMuaGFzKHBhdGgpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkTm90ZXMuZGVsZXRlKHBhdGgpO1xyXG4gICAgICAgICAgICAgICAgY2FyZC5yZW1vdmVDbGFzcygnc2VsZWN0ZWQnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWROb3Rlcy5hZGQocGF0aCk7XHJcbiAgICAgICAgICAgICAgICBjYXJkLmFkZENsYXNzKCdzZWxlY3RlZCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChldmVudC5zaGlmdEtleSAmJiB0aGlzLmxhc3RTZWxlY3RlZE5vdGUpIHtcclxuICAgICAgICAgICAgLy8gU2hpZnQgKyBcdTcwQjlcdTUxRkJcdUZGMUFcdThGREVcdTdFRURcdTkwMDlcdTYyRTlcclxuICAgICAgICAgICAgY29uc3QgY2FyZHMgPSBBcnJheS5mcm9tKHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5ub3RlLWNhcmQnKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGxhc3RJbmRleCA9IGNhcmRzLmZpbmRJbmRleChjID0+IGMuZ2V0QXR0cmlidXRlKCdkYXRhLXBhdGgnKSA9PT0gdGhpcy5sYXN0U2VsZWN0ZWROb3RlKTtcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudEluZGV4ID0gY2FyZHMuZmluZEluZGV4KGMgPT4gYy5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGF0aCcpID09PSBwYXRoKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gTWF0aC5taW4obGFzdEluZGV4LCBjdXJyZW50SW5kZXgpO1xyXG4gICAgICAgICAgICBjb25zdCBlbmQgPSBNYXRoLm1heChsYXN0SW5kZXgsIGN1cnJlbnRJbmRleCk7XHJcblxyXG4gICAgICAgICAgICBjYXJkcy5mb3JFYWNoKChjLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjYXJkUGF0aCA9IGMuZ2V0QXR0cmlidXRlKCdkYXRhLXBhdGgnKTtcclxuICAgICAgICAgICAgICAgIGlmIChpID49IHN0YXJ0ICYmIGkgPD0gZW5kICYmIGNhcmRQYXRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE5vdGVzLmFkZChjYXJkUGF0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYy5hZGRDbGFzcygnc2VsZWN0ZWQnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gXHU2NjZFXHU5MDFBXHU3MEI5XHU1MUZCXHVGRjFBXHU2RTA1XHU5NjY0XHU1MTc2XHU0RUQ2XHU5MDA5XHU2MkU5XHVGRjBDXHU5MDA5XHU0RTJEXHU1RjUzXHU1MjREXHJcbiAgICAgICAgICAgIHRoaXMuY2xlYXJTZWxlY3Rpb24oKTtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZE5vdGVzLmFkZChwYXRoKTtcclxuICAgICAgICAgICAgY2FyZC5hZGRDbGFzcygnc2VsZWN0ZWQnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMubGFzdFNlbGVjdGVkTm90ZSA9IHBhdGg7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gXHU2RTA1XHU5NjY0XHU2MjQwXHU2NzA5XHU5MDA5XHU2MkU5XHJcbiAgICBwcml2YXRlIGNsZWFyU2VsZWN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWROb3Rlcy5jbGVhcigpO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5ub3RlLWNhcmQuc2VsZWN0ZWQnKS5mb3JFYWNoKGNhcmQgPT4ge1xyXG4gICAgICAgICAgICBjYXJkLnJlbW92ZUNsYXNzKCdzZWxlY3RlZCcpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFx1ODNCN1x1NTNENlx1OTAwOVx1NEUyRFx1NzY4NFx1NjU4N1x1NEVGNlxyXG4gICAgcHJpdmF0ZSBnZXRTZWxlY3RlZEZpbGVzKCk6IFRGaWxlW10ge1xyXG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuc2VsZWN0ZWROb3RlcylcclxuICAgICAgICAgICAgLm1hcChwYXRoID0+IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChwYXRoKSlcclxuICAgICAgICAgICAgLmZpbHRlcigoZmlsZSk6IGZpbGUgaXMgVEZpbGUgPT4gZmlsZSBpbnN0YW5jZW9mIFRGaWxlKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBcdTY2M0VcdTc5M0FcdTUzRjNcdTk1MkVcdTgzRENcdTUzNTVcclxuICAgIHByaXZhdGUgc2hvd0NvbnRleHRNZW51KGV2ZW50OiBNb3VzZUV2ZW50LCBmaWxlczogVEZpbGVbXSkge1xyXG4gICAgICAgIGNvbnN0IG1lbnUgPSBuZXcgTWVudSgpO1xyXG5cclxuICAgICAgICBpZiAoZmlsZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBtZW51LmFkZEl0ZW0oKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgICAgIGl0ZW1cclxuICAgICAgICAgICAgICAgICAgICAuc2V0VGl0bGUoYFx1NTcyOFx1NjVCMFx1NjgwN1x1N0I3RVx1OTg3NVx1NjI1M1x1NUYwMGApXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldEljb24oXCJsaW5rXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxlYWYgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhZigndGFiJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBsZWFmLm9wZW5GaWxlKGZpbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgbWVudS5hZGRJdGVtKChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFRpdGxlKGBcdTU3MjhcdTRFRjZcdTdCQTFcdTc0MDZcdTU2NjhcdTRFMkRcdTY2M0VcdTc5M0FgKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRJY29uKFwiZm9sZGVyXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWxlID0gZmlsZXNbMF07ICAvLyBcdTY2M0VcdTc5M0FcdTdCMkNcdTRFMDBcdTRFMkFcdTkwMDlcdTRFMkRcdTY1ODdcdTRFRjZcdTc2ODRcdTRGNERcdTdGNkVcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXZlYWxGb2xkZXJJbkV4cGxvcmVyKGZpbGUucGFyZW50Py5wYXRoIHx8ICcvJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgbWVudS5hZGRJdGVtKChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFRpdGxlKGBcdTc5RkJcdTUyQTggJHtmaWxlcy5sZW5ndGh9IFx1NEUyQVx1NjU4N1x1NEVGNmApXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldEljb24oXCJtb3ZlXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtb2RhbCA9IG5ldyBFbmhhbmNlZEZpbGVTZWxlY3Rpb25Nb2RhbChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY2VudEZvbGRlcnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZm9sZGVycykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVjZW50Rm9sZGVycyA9IGZvbGRlcnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsLm9wZW4oKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBtZW51LmFkZEl0ZW0oKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgICAgIGl0ZW1cclxuICAgICAgICAgICAgICAgICAgICAuc2V0VGl0bGUoYFx1NTIyMFx1OTY2NCAke2ZpbGVzLmxlbmd0aH0gXHU0RTJBXHU2NTg3XHU0RUY2YClcclxuICAgICAgICAgICAgICAgICAgICAuc2V0SWNvbihcInRyYXNoXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb25maXJtID0gYXdhaXQgbmV3IENvbmZpcm1Nb2RhbChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcdTc4NkVcdThCQTRcdTUyMjBcdTk2NjRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBcdTY2MkZcdTU0MjZcdTc4NkVcdTVCOUFcdTg5ODFcdTUyMjBcdTk2NjRcdTkwMDlcdTRFMkRcdTc2ODQgJHtmaWxlcy5sZW5ndGh9IFx1NEUyQVx1NjU4N1x1NEVGNlx1RkYxRmBcclxuICAgICAgICAgICAgICAgICAgICAgICAgKS5zaG93KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlybSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hcHAudmF1bHQudHJhc2goZmlsZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2hWaWV3KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBtZW51LnNob3dBdE1vdXNlRXZlbnQoZXZlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFx1NEZFRVx1NjUzOVx1OEMwM1x1NjU3NFx1NTM2MVx1NzI0N1x1NTkyN1x1NUMwRlx1NzY4NFx1NjVCOVx1NkNENVxyXG4gICAgcHJpdmF0ZSBhZGp1c3RDYXJkU2l6ZShkZWx0YTogbnVtYmVyKSB7XHJcbiAgICAgICAgY29uc3QgYWRqdXN0bWVudCA9IGRlbHRhID4gMCA/IC0xMCA6IDEwO1xyXG4gICAgICAgIGNvbnN0IG5ld1NpemUgPSBNYXRoLm1heChcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MubWluQ2FyZFdpZHRoLFxyXG4gICAgICAgICAgICBNYXRoLm1pbih0aGlzLnBsdWdpbi5zZXR0aW5ncy5tYXhDYXJkV2lkdGgsIHRoaXMuY2FyZFNpemUgKyBhZGp1c3RtZW50KVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGlmIChuZXdTaXplICE9PSB0aGlzLmNhcmRTaXplKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FyZFNpemUgPSBuZXdTaXplO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUNhcmRTaXplKG5ld1NpemUpO1xyXG4gICAgICAgICAgICAvLyBcdTRGRERcdTVCNThcdTY1QjBcdTc2ODRcdTVCQkRcdTVFQTZcclxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2F2ZUNhcmRXaWR0aChuZXdTaXplKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gXHU2REZCXHU1MkEwXHU2NkY0XHU2NUIwXHU1MzYxXHU3MjQ3XHU1OTI3XHU1QzBGXHU3Njg0XHU2NUI5XHU2Q0Q1XHJcbiAgICBwdWJsaWMgdXBkYXRlQ2FyZFNpemUod2lkdGg6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuY2FyZFNpemUgPSB3aWR0aDtcclxuICAgICAgICAvLyBcdTY2RjRcdTY1QjBcdTYyNDBcdTY3MDlcdTUzNjFcdTcyNDdcdTc2ODRcdTVCQkRcdTVFQTZcclxuICAgICAgICB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcubm90ZS1jYXJkJykuZm9yRWFjaCgoY2FyZDogRWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoY2FyZCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICBjYXJkLnN0eWxlLndpZHRoID0gYCR7d2lkdGh9cHhgO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gXHU2NkY0XHU2NUIwXHU1QkI5XHU1NjY4XHU3Njg0XHU3RjUxXHU2ODNDXHU1MjE3XHU1QkJEXHU1RUE2XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUuZ3JpZFRlbXBsYXRlQ29sdW1ucyA9IGByZXBlYXQoYXV0by1maWxsLCAke3dpZHRofXB4KWA7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gXHU1MjFCXHU1RUZBXHU2NUU1XHU1Mzg2XHU2MzA5XHU5NEFFXHJcbiAgICBwcml2YXRlIGNyZWF0ZUNhbGVuZGFyQnV0dG9uKGxlZnRUb29sczogSFRNTEVsZW1lbnQpIHtcclxuICAgICAgICBjb25zdCBjYWxlbmRhckJ0biA9IGxlZnRUb29scy5jcmVhdGVFbCgnYnV0dG9uJywge1xyXG4gICAgICAgICAgICBjbHM6ICdjYWxlbmRhci10b2dnbGUtYnV0dG9uJyxcclxuICAgICAgICB9KTtcclxuICAgICAgICBjYWxlbmRhckJ0bi5pbm5lckhUTUwgPSBgXHJcbiAgICAgICAgICAgIDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMTZcIiBoZWlnaHQ9XCIxNlwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIj48cmVjdCB4PVwiM1wiIHk9XCI0XCIgd2lkdGg9XCIxOFwiIGhlaWdodD1cIjE4XCIgcng9XCIyXCIgcnk9XCIyXCI+PC9yZWN0PjxsaW5lIHgxPVwiMTZcIiB5MT1cIjJcIiB4Mj1cIjE2XCIgeTI9XCI2XCI+PC9saW5lPjxsaW5lIHgxPVwiOFwiIHkxPVwiMlwiIHgyPVwiOFwiIHkyPVwiNlwiPjwvbGluZT48bGluZSB4MT1cIjNcIiB5MT1cIjEwXCIgeDI9XCIyMVwiIHkyPVwiMTBcIj48L2xpbmU+PC9zdmc+XHJcbiAgICAgICAgICAgIDxzcGFuPlx1NjVFNVx1NTM4Njwvc3Bhbj5cclxuICAgICAgICBgO1xyXG4gICAgICAgIGNhbGVuZGFyQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnRvZ2dsZUNhbGVuZGFyKCk7XHJcbiAgICAgICAgICAgIC8vIFx1NTIwN1x1NjM2Mlx1NjMwOVx1OTRBRVx1OUFEOFx1NEVBRVx1NzJCNlx1NjAwMVxyXG4gICAgICAgICAgICBjYWxlbmRhckJ0bi50b2dnbGVDbGFzcygnYWN0aXZlJywgdGhpcy5pc0NhbGVuZGFyVmlzaWJsZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gXHU1MjA3XHU2MzYyXHU2NUU1XHU1Mzg2XHU3Njg0XHU2NjNFXHU3OTNBXHU3MkI2XHU2MDAxXHJcbiAgICBwcml2YXRlIHRvZ2dsZUNhbGVuZGFyKCkge1xyXG4gICAgICAgIHRoaXMuaXNDYWxlbmRhclZpc2libGUgPSAhdGhpcy5pc0NhbGVuZGFyVmlzaWJsZTtcclxuICAgICAgICBpZiAodGhpcy5pc0NhbGVuZGFyVmlzaWJsZSkge1xyXG4gICAgICAgICAgICB0aGlzLnNob3dDYWxlbmRhcigpO1xyXG4gICAgICAgICAgICAvLyBcdTY2M0VcdTc5M0FcdTVGNTNcdTUyNERcdTY3MDhcdTRFRkRcdTc2ODRcdTYyNDBcdTY3MDlcdTdCMTRcdThCQjBcclxuICAgICAgICAgICAgdGhpcy5maWx0ZXJOb3Rlc0J5TW9udGgodGhpcy5jdXJyZW50RGF0ZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5oaWRlQ2FsZW5kYXIoKTtcclxuICAgICAgICAgICAgLy8gXHU2RTA1XHU5NjY0XHU2NUU1XHU2NzFGXHU4RkM3XHU2RUU0XHJcbiAgICAgICAgICAgIHRoaXMuY2xlYXJEYXRlRmlsdGVyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFx1NkRGQlx1NTJBMFx1NjMwOVx1NjcwOFx1NEVGRFx1OEZDN1x1NkVFNFx1NzY4NFx1NjVCOVx1NkNENVxyXG4gICAgcHJpdmF0ZSBmaWx0ZXJOb3Rlc0J5TW9udGgoZGF0ZTogRGF0ZSkge1xyXG4gICAgICAgIGNvbnN0IHllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICAgICAgY29uc3QgbW9udGggPSBkYXRlLmdldE1vbnRoKCk7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50RmlsdGVyID0geyBcclxuICAgICAgICAgICAgdHlwZTogJ2RhdGUnLCBcclxuICAgICAgICAgICAgdmFsdWU6IGAke3llYXJ9LSR7KG1vbnRoICsgMSkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpfWAgXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnJlZnJlc2hWaWV3KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gXHU2NjNFXHU3OTNBXHU2NUU1XHU1Mzg2XHJcbiAgICBwcml2YXRlIHNob3dDYWxlbmRhcigpIHtcclxuICAgICAgICBpZiAoIXRoaXMuY2FsZW5kYXJDb250YWluZXIpIHtcclxuICAgICAgICAgICAgLy8gXHU0RkVFXHU2NTM5XHVGRjFBXHU1QzA2XHU2NUU1XHU1Mzg2XHU1QkI5XHU1NjY4XHU2REZCXHU1MkEwXHU1MjMwIGNvbnRlbnQtc2VjdGlvbiBcdTRFNEJcdTUyNERcclxuICAgICAgICAgICAgY29uc3QgY29udGVudFNlY3Rpb24gPSB0aGlzLmNvbnRhaW5lckVsLnF1ZXJ5U2VsZWN0b3IoJy5jb250ZW50LXNlY3Rpb24nKTtcclxuICAgICAgICAgICAgaWYgKCFjb250ZW50U2VjdGlvbikgcmV0dXJuO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU1NzI4IGNvbnRlbnQtc2VjdGlvbiBcdTRFNEJcdTUyNERcdTYzRDJcdTUxNjVcdTY1RTVcdTUzODZcdTVCQjlcdTU2NjhcclxuICAgICAgICAgICAgdGhpcy5jYWxlbmRhckNvbnRhaW5lciA9IGNyZWF0ZURpdignY2FsZW5kYXItY29udGFpbmVyJyk7XHJcbiAgICAgICAgICAgIGNvbnRlbnRTZWN0aW9uLnBhcmVudEVsZW1lbnQ/Lmluc2VydEJlZm9yZSh0aGlzLmNhbGVuZGFyQ29udGFpbmVyLCBjb250ZW50U2VjdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2FsZW5kYXJDb250YWluZXIuZW1wdHkoKTtcclxuICAgICAgICB0aGlzLnJlbmRlckNhbGVuZGFyKCk7XHJcbiAgICAgICAgdGhpcy5jYWxlbmRhckNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTRGRUVcdTY1MzlcdUZGMUFcdTVDMDYgd2l0aC1jYWxlbmRhciBcdTdDN0JcdTZERkJcdTUyQTBcdTUyMzAgbWFpbi1sYXlvdXRcclxuICAgICAgICBjb25zdCBtYWluTGF5b3V0ID0gdGhpcy5jb250YWluZXJFbC5xdWVyeVNlbGVjdG9yKCcubWFpbi1sYXlvdXQnKTtcclxuICAgICAgICBpZiAobWFpbkxheW91dCkge1xyXG4gICAgICAgICAgICBtYWluTGF5b3V0LmFkZENsYXNzKCd3aXRoLWNhbGVuZGFyJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFx1OTY5MFx1ODVDRlx1NjVFNVx1NTM4NiBcclxuICAgIHByaXZhdGUgaGlkZUNhbGVuZGFyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNhbGVuZGFyQ29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FsZW5kYXJDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgdGhpcy5jYWxlbmRhckNvbnRhaW5lci5lbXB0eSgpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU0RkVFXHU2NTM5XHVGRjFBXHU0RUNFIG1haW4tbGF5b3V0IFx1NzlGQlx1OTY2NCB3aXRoLWNhbGVuZGFyIFx1N0M3QlxyXG4gICAgICAgICAgICBjb25zdCBtYWluTGF5b3V0ID0gdGhpcy5jb250YWluZXJFbC5xdWVyeVNlbGVjdG9yKCcubWFpbi1sYXlvdXQnKTtcclxuICAgICAgICAgICAgaWYgKG1haW5MYXlvdXQpIHtcclxuICAgICAgICAgICAgICAgIG1haW5MYXlvdXQucmVtb3ZlQ2xhc3MoJ3dpdGgtY2FsZW5kYXInKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBcdTZFMzJcdTY3RDNcdTY1RTVcdTUzODZcclxuICAgIHByaXZhdGUgcmVuZGVyQ2FsZW5kYXIoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmNhbGVuZGFyQ29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5jYWxlbmRhckNvbnRhaW5lci5lbXB0eSgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHllYXIgPSB0aGlzLmN1cnJlbnREYXRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICAgICAgY29uc3QgbW9udGggPSB0aGlzLmN1cnJlbnREYXRlLmdldE1vbnRoKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU1MjFCXHU1RUZBXHU2NUU1XHU1Mzg2XHU1OTM0XHU5MEU4XHJcbiAgICAgICAgY29uc3QgaGVhZGVyID0gdGhpcy5jYWxlbmRhckNvbnRhaW5lci5jcmVhdGVEaXYoJ2NhbGVuZGFyLWhlYWRlcicpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1NEUwQVx1NEUyQVx1NjcwOFx1NjMwOVx1OTRBRVxyXG4gICAgICAgIGNvbnN0IHByZXZCdG4gPSBoZWFkZXIuY3JlYXRlRWwoJ2J1dHRvbicsIHsgY2xzOiAnY2FsZW5kYXItbmF2LWJ0bicgfSk7XHJcbiAgICAgICAgcHJldkJ0bi5pbm5lckhUTUwgPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIxNlwiIGhlaWdodD1cIjE2XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiPjxwb2x5bGluZSBwb2ludHM9XCIxNSAxOCA5IDEyIDE1IDZcIj48L3BvbHlsaW5lPjwvc3ZnPic7XHJcbiAgICAgICAgcHJldkJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudERhdGUgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCAtIDEsIDEpO1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlckNhbGVuZGFyKCk7XHJcbiAgICAgICAgICAgIC8vIFx1NjYzRVx1NzkzQVx1NjVCMFx1NjcwOFx1NEVGRFx1NzY4NFx1N0IxNFx1OEJCMFxyXG4gICAgICAgICAgICB0aGlzLmZpbHRlck5vdGVzQnlNb250aCh0aGlzLmN1cnJlbnREYXRlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTY2M0VcdTc5M0FcdTVFNzRcdTY3MDhcclxuICAgICAgICBoZWFkZXIuY3JlYXRlRGl2KCdjYWxlbmRhci10aXRsZScpLnNldFRleHQoXHJcbiAgICAgICAgICAgIGAke3llYXJ9XHU1RTc0JHttb250aCArIDF9XHU2NzA4YFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU0RTBCXHU0RTJBXHU2NzA4XHU2MzA5XHU5NEFFXHJcbiAgICAgICAgY29uc3QgbmV4dEJ0biA9IGhlYWRlci5jcmVhdGVFbCgnYnV0dG9uJywgeyBjbHM6ICdjYWxlbmRhci1uYXYtYnRuJyB9KTtcclxuICAgICAgICBuZXh0QnRuLmlubmVySFRNTCA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjE2XCIgaGVpZ2h0PVwiMTZcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCI+PHBvbHlsaW5lIHBvaW50cz1cIjkgMTggMTUgMTIgOSA2XCI+PC9wb2x5bGluZT48L3N2Zz4nO1xyXG4gICAgICAgIG5leHRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnREYXRlID0gbmV3IERhdGUoeWVhciwgbW9udGggKyAxLCAxKTtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJDYWxlbmRhcigpO1xyXG4gICAgICAgICAgICAvLyBcdTY2M0VcdTc5M0FcdTY1QjBcdTY3MDhcdTRFRkRcdTc2ODRcdTdCMTRcdThCQjBcclxuICAgICAgICAgICAgdGhpcy5maWx0ZXJOb3Rlc0J5TW9udGgodGhpcy5jdXJyZW50RGF0ZSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIFx1NTIxQlx1NUVGQVx1NjYxRlx1NTkzNFx1OTBFOFxyXG4gICAgICAgIGNvbnN0IHdlZWtkYXlzID0gWydcdTY1RTUnLCAnXHU0RTAwJywgJ1x1NEU4QycsICdcdTRFMDknLCAnXHU1NkRCJywgJ1x1NEU5NCcsICdcdTUxNkQnXTtcclxuICAgICAgICBjb25zdCB3ZWVrSGVhZGVyID0gdGhpcy5jYWxlbmRhckNvbnRhaW5lci5jcmVhdGVEaXYoJ2NhbGVuZGFyLXdlZWtkYXlzJyk7XHJcbiAgICAgICAgd2Vla2RheXMuZm9yRWFjaChkYXkgPT4ge1xyXG4gICAgICAgICAgICB3ZWVrSGVhZGVyLmNyZWF0ZURpdignd2Vla2RheScpLnNldFRleHQoZGF5KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gXHU1MjFCXHU1RUZBXHU2NUU1XHU2NzFGXHU3RjUxXHU2ODNDXHJcbiAgICAgICAgY29uc3QgZ3JpZCA9IHRoaXMuY2FsZW5kYXJDb250YWluZXIuY3JlYXRlRGl2KCdjYWxlbmRhci1ncmlkJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU4M0I3XHU1M0Q2XHU1RjUzXHU2NzA4XHU3QjJDXHU0RTAwXHU1OTI5XHU2NjJGXHU2NjFGXHU2NzFGXHU1MUUwXHJcbiAgICAgICAgY29uc3QgZmlyc3REYXkgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgMSkuZ2V0RGF5KCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU4M0I3XHU1M0Q2XHU1RjUzXHU2NzA4XHU1OTI5XHU2NTcwXHJcbiAgICAgICAgY29uc3QgZGF5c0luTW9udGggPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCArIDEsIDApLmdldERhdGUoKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTZCQ0ZcdTU5MjlcdTc2ODRcdTdCMTRcdThCQjBcdTY1NzBcdTkxQ0ZcclxuICAgICAgICBjb25zdCBub3Rlc0NvdW50ID0gdGhpcy5nZXROb3Rlc0NvdW50QnlEYXRlKHllYXIsIG1vbnRoKTtcclxuXHJcbiAgICAgICAgLy8gXHU1ODZCXHU1MTQ1XHU2NUU1XHU2NzFGXHU2ODNDXHU1QjUwXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaXJzdERheTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGdyaWQuY3JlYXRlRGl2KCdjYWxlbmRhci1kYXkgZW1wdHknKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IGRheSA9IDE7IGRheSA8PSBkYXlzSW5Nb250aDsgZGF5KyspIHtcclxuICAgICAgICAgICAgY29uc3QgZGF5RWwgPSBncmlkLmNyZWF0ZURpdignY2FsZW5kYXItZGF5Jyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGVTdHIgPSBgJHt5ZWFyfS0keyhtb250aCArIDEpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKX0tJHtkYXkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpfWA7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBkYXlFbC5zZXRUZXh0KGRheS50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgZGF5RWwuc2V0QXR0cmlidXRlKCdkYXRhLWRhdGUnLCBkYXRlU3RyKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NTk4Mlx1Njc5Q1x1NjYyRlx1NUY1M1x1NTI0RFx1OEZDN1x1NkVFNFx1NzY4NFx1NjVFNVx1NjcxRlx1RkYwQ1x1NkRGQlx1NTJBMFx1OTAwOVx1NEUyRFx1NjgzN1x1NUYwRlxyXG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50RmlsdGVyLnR5cGUgPT09ICdkYXRlJyAmJiB0aGlzLmN1cnJlbnRGaWx0ZXIudmFsdWUgPT09IGRhdGVTdHIpIHtcclxuICAgICAgICAgICAgICAgIGRheUVsLmFkZENsYXNzKCdzZWxlY3RlZCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTdCMTRcdThCQjBcdTY1NzBcdTkxQ0ZcdTY4MDdcdThCQjBcclxuICAgICAgICAgICAgY29uc3QgY291bnQgPSBub3Rlc0NvdW50W2RhdGVTdHJdIHx8IDA7XHJcbiAgICAgICAgICAgIGlmIChjb3VudCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGRheUVsLmNyZWF0ZURpdignbm90ZS1jb3VudCcpLnNldFRleHQoY291bnQudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFx1NkRGQlx1NTJBMFx1NzBCOVx1NTFGQlx1NEU4Qlx1NEVGNlxyXG4gICAgICAgICAgICBkYXlFbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmlsdGVyTm90ZXNCeURhdGUoZGF0ZVN0cik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBcdTgzQjdcdTUzRDZcdTZCQ0ZcdTU5MjlcdTc2ODRcdTdCMTRcdThCQjBcdTY1NzBcdTkxQ0ZcclxuICAgIHByaXZhdGUgZ2V0Tm90ZXNDb3VudEJ5RGF0ZSh5ZWFyOiBudW1iZXIsIG1vbnRoOiBudW1iZXIpOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+IHtcclxuICAgICAgICBjb25zdCBjb3VudHM6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4gPSB7fTtcclxuICAgICAgICBjb25zdCBmaWxlcyA9IHRoaXMuYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcclxuXHJcbiAgICAgICAgZmlsZXMuZm9yRWFjaChmaWxlID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKGZpbGUuc3RhdC5tdGltZSk7XHJcbiAgICAgICAgICAgIGlmIChkYXRlLmdldEZ1bGxZZWFyKCkgPT09IHllYXIgJiYgZGF0ZS5nZXRNb250aCgpID09PSBtb250aCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGF0ZVN0ciA9IGRhdGUudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdO1xyXG4gICAgICAgICAgICAgICAgY291bnRzW2RhdGVTdHJdID0gKGNvdW50c1tkYXRlU3RyXSB8fCAwKSArIDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNvdW50cztcclxuICAgIH1cclxuXHJcbiAgICAvLyBcdTY4MzlcdTYzNkVcdTY1RTVcdTY3MUZcdThGQzdcdTZFRTRcdTdCMTRcdThCQjBcclxuICAgIHByaXZhdGUgZmlsdGVyTm90ZXNCeURhdGUoZGF0ZVN0cjogc3RyaW5nKSB7XHJcbiAgICAgICAgLy8gXHU1OTgyXHU2NzlDXHU1REYyXHU3RUNGXHU5MDA5XHU0RTJEXHU0RTg2XHU4RkQ5XHU0RTJBXHU2NUU1XHU2NzFGXHVGRjBDXHU1MjE5XHU2RTA1XHU5NjY0XHU4RkM3XHU2RUU0XHJcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudEZpbHRlci50eXBlID09PSAnZGF0ZScgJiYgdGhpcy5jdXJyZW50RmlsdGVyLnZhbHVlID09PSBkYXRlU3RyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xlYXJEYXRlRmlsdGVyKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFx1NkUwNVx1OTY2NFx1NTE3Nlx1NEVENlx1NjVFNVx1NjcxRlx1NzY4NFx1OTAwOVx1NEUyRFx1NzJCNlx1NjAwMVxyXG4gICAgICAgIHRoaXMuY2FsZW5kYXJDb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLmNhbGVuZGFyLWRheScpLmZvckVhY2goZGF5ID0+IHtcclxuICAgICAgICAgICAgZGF5LnJlbW92ZUNsYXNzKCdzZWxlY3RlZCcpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBcdThCQkVcdTdGNkVcdTY1QjBcdTc2ODRcdThGQzdcdTZFRTRcdTY3NjFcdTRFRjZcclxuICAgICAgICB0aGlzLmN1cnJlbnRGaWx0ZXIgPSB7IHR5cGU6ICdkYXRlJywgdmFsdWU6IGRhdGVTdHIgfTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTlBRDhcdTRFQUVcdTkwMDlcdTRFMkRcdTc2ODRcdTY1RTVcdTY3MUZcclxuICAgICAgICBjb25zdCBzZWxlY3RlZERheSA9IHRoaXMuY2FsZW5kYXJDb250YWluZXIucXVlcnlTZWxlY3RvcihgLmNhbGVuZGFyLWRheVtkYXRhLWRhdGU9XCIke2RhdGVTdHJ9XCJdYCk7XHJcbiAgICAgICAgaWYgKHNlbGVjdGVkRGF5KSB7XHJcbiAgICAgICAgICAgIHNlbGVjdGVkRGF5LmFkZENsYXNzKCdzZWxlY3RlZCcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5yZWZyZXNoVmlldygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFx1NkRGQlx1NTJBMFx1NkUwNVx1OTY2NFx1NjVFNVx1NjcxRlx1OEZDN1x1NkVFNFx1NzY4NFx1NjVCOVx1NkNENVxyXG4gICAgcHJpdmF0ZSBjbGVhckRhdGVGaWx0ZXIoKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50RmlsdGVyID0geyB0eXBlOiAnbm9uZScgfTtcclxuICAgICAgICAvLyBcdTZFMDVcdTk2NjRcdTYyNDBcdTY3MDlcdTY1RTVcdTY3MUZcdTc2ODRcdTkwMDlcdTRFMkRcdTcyQjZcdTYwMDFcclxuICAgICAgICBpZiAodGhpcy5jYWxlbmRhckNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICB0aGlzLmNhbGVuZGFyQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5jYWxlbmRhci1kYXknKS5mb3JFYWNoKGRheSA9PiB7XHJcbiAgICAgICAgICAgICAgICBkYXkucmVtb3ZlQ2xhc3MoJ3NlbGVjdGVkJyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBcdTUyMzdcdTY1QjBcdTg5QzZcdTU2RkVcdTRFRTVcdTY2M0VcdTc5M0FcdTYyNDBcdTY3MDlcdTdCMTRcdThCQjBcclxuICAgICAgICB0aGlzLnJlZnJlc2hWaWV3KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gXHU5QUQ4XHU0RUFFXHU2NDFDXHU3RDIyXHU4QkNEXHJcbiAgICBwcml2YXRlIGhpZ2hsaWdodFNlYXJjaFRlcm0oY29udGVudDogc3RyaW5nLCBzZWFyY2hUZXJtOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmICghc2VhcmNoVGVybSkgcmV0dXJuIGNvbnRlbnQ7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKHNlYXJjaFRlcm0sICdnaScpO1xyXG4gICAgICAgIHJldHVybiBjb250ZW50LnJlcGxhY2UocmVnZXgsIG1hdGNoID0+IGA8c3BhbiBjbGFzcz1cInNlYXJjaC1oaWdobGlnaHRcIj4ke21hdGNofTwvc3Bhbj5gKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBcdTRGRUVcdTY1MzlcdTY1QjlcdTZDRDVcdTU0MERcdTRFRTVcdTY2RjRcdTU5N0RcdTU3MzBcdTUzQ0RcdTY2MjBcdTUxNzZcdTUyOUZcdTgwRkRcclxuICAgIHByaXZhdGUgYXN5bmMgb3BlbkluQXBwcm9wcmlhdGVMZWFmKGZpbGU6IFRGaWxlKSB7XHJcbiAgICAgICAgLy8gXHU4M0I3XHU1M0Q2XHU2MjQwXHU2NzA5XHU1M0VGXHU4OUMxXHU3Njg0IG1hcmtkb3duIFx1N0M3Qlx1NTc4Qlx1NzY4NFx1NTNGNlx1NUI1MFxyXG4gICAgICAgIGNvbnN0IGxlYXZlcyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWF2ZXNPZlR5cGUoJ21hcmtkb3duJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU4M0I3XHU1M0Q2XHU1RjUzXHU1MjREXHU1MzYxXHU3MjQ3XHU4OUM2XHU1NkZFXHU2MjQwXHU1NzI4XHU3Njg0XHU2ODM5XHU1MjA2XHU1QzRGXHJcbiAgICAgICAgY29uc3QgY3VycmVudFJvb3QgPSB0aGlzLmxlYWYuZ2V0Um9vdCgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1NjI3RVx1NTIzMFx1NEUwRFx1NTcyOFx1NUY1M1x1NTI0RFx1NjgzOVx1NTIwNlx1NUM0Rlx1NEUwQlx1NzY4NFx1NTNGNlx1NUI1MFxyXG4gICAgICAgIGNvbnN0IG90aGVyTGVhZiA9IGxlYXZlcy5maW5kKGxlYWYgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCByb290ID0gbGVhZi5nZXRSb290KCk7XHJcbiAgICAgICAgICAgIHJldHVybiByb290ICE9PSBjdXJyZW50Um9vdDtcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAob3RoZXJMZWFmKSB7XHJcbiAgICAgICAgICAgIC8vIFx1NTk4Mlx1Njc5Q1x1NjI3RVx1NTIzMFx1NTE3Nlx1NEVENlx1NTIwNlx1NUM0Rlx1NzY4NFx1NTNGNlx1NUI1MFx1RkYwQ1x1NTcyOFx1OTBBM1x1OTFDQ1x1NjI1M1x1NUYwMFx1NjU4N1x1NEVGNlxyXG4gICAgICAgICAgICBhd2FpdCBvdGhlckxlYWYub3BlbkZpbGUoZmlsZSk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLndvcmtzcGFjZS5zZXRBY3RpdmVMZWFmKG90aGVyTGVhZik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gXHU1OTgyXHU2NzlDXHU2Q0ExXHU2NzA5XHU2MjdFXHU1MjMwXHU1MTc2XHU0RUQ2XHU1MjA2XHU1QzRGXHU3Njg0XHU1M0Y2XHU1QjUwXHVGRjBDXHU1NzI4XHU1RjUzXHU1MjREXHU1MjA2XHU1QzRGXHU1MjFCXHU1RUZBXHU2NUIwXHU2ODA3XHU3QjdFXHU5ODc1XHJcbiAgICAgICAgICAgIGNvbnN0IGxlYWYgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhZigndGFiJyk7XHJcbiAgICAgICAgICAgIGF3YWl0IGxlYWYub3BlbkZpbGUoZmlsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFx1NkUzMlx1NjdEM1x1NjU4N1x1NEVGNlx1NTkzOVx1NTM2MVx1NzI0N1xyXG4gICAgcHJpdmF0ZSByZW5kZXJGb2xkZXJDYXJkKGZvbGRlcjogVEZvbGRlcik6IEhUTUxFbGVtZW50IHtcclxuICAgICAgICBjb25zdCBjYXJkRWwgPSBjcmVhdGVEaXYoJ2NhcmQgZm9sZGVyLWNhcmQnKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyAuLi4gXHU3M0IwXHU2NzA5XHU3Njg0XHU2NTg3XHU0RUY2XHU1OTM5XHU1MzYxXHU3MjQ3XHU2RTMyXHU2N0QzXHU0RUUzXHU3ODAxIC4uLlxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1NkRGQlx1NTJBMFx1NzBCOVx1NTFGQlx1NEU4Qlx1NEVGNlx1NTkwNFx1NzQwNlxyXG4gICAgICAgIGNhcmRFbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgLy8gXHU4M0I3XHU1M0Q2XHU2NTg3XHU0RUY2XHU2RDRGXHU4OUM4XHU1NjY4XHU4OUM2XHU1NkZFXHJcbiAgICAgICAgICAgIGNvbnN0IGZpbGVFeHBsb3JlciA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWF2ZXNPZlR5cGUoJ2ZpbGUtZXhwbG9yZXInKVswXTtcclxuICAgICAgICAgICAgaWYgKGZpbGVFeHBsb3Jlcikge1xyXG4gICAgICAgICAgICAgICAgLy8gXHU2RkMwXHU2RDNCXHU2NTg3XHU0RUY2XHU2RDRGXHU4OUM4XHU1NjY4XHU4OUM2XHU1NkZFXHJcbiAgICAgICAgICAgICAgICB0aGlzLmFwcC53b3Jrc3BhY2UucmV2ZWFsTGVhZihmaWxlRXhwbG9yZXIpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTY1ODdcdTRFRjZcdTZENEZcdTg5QzhcdTU2NjhcdTg5QzZcdTU2RkVcdTVCOUVcdTRGOEJcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVFeHBsb3JlclZpZXcgPSBmaWxlRXhwbG9yZXIudmlldyBhcyBhbnk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZmlsZUV4cGxvcmVyVmlldyAmJiBmaWxlRXhwbG9yZXJWaWV3LnJldmVhbEluRm9sZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU1NzI4XHU2NTg3XHU0RUY2XHU2RDRGXHU4OUM4XHU1NjY4XHU0RTJEXHU1QjlBXHU0RjREXHU1RTc2XHU5QUQ4XHU0RUFFXHU2NjNFXHU3OTNBXHU4QkU1XHU2NTg3XHU0RUY2XHU1OTM5XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsZUV4cGxvcmVyVmlldy5yZXZlYWxJbkZvbGRlcihmb2xkZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIGNhcmRFbDtcclxuICAgIH1cclxufVxyXG5cclxuLy8gXHU2REZCXHU1MkEwXHU2NTg3XHU0RUY2XHU5MDA5XHU2MkU5XHU2QTIxXHU2MDAxXHU2ODQ2XHJcbmNsYXNzIEZpbGVTZWxlY3Rpb25Nb2RhbCBleHRlbmRzIE1vZGFsIHtcclxuICAgIHByaXZhdGUgZmlsZTogVEZpbGU7XHJcblxyXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIGZpbGU6IFRGaWxlKSB7XHJcbiAgICAgICAgc3VwZXIoYXBwKTtcclxuICAgICAgICB0aGlzLmZpbGUgPSBmaWxlO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIG9uT3BlbigpIHtcclxuICAgICAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcclxuICAgICAgICBjb250ZW50RWwuY3JlYXRlRWwoJ2gzJywgeyB0ZXh0OiAnXHU5MDA5XHU2MkU5XHU3NkVFXHU2ODA3XHU2NTg3XHU0RUY2XHU1OTM5JyB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgZm9sZGVyTGlzdCA9IGNvbnRlbnRFbC5jcmVhdGVEaXYoJ2ZvbGRlci1saXN0Jyk7XHJcbiAgICAgICAgY29uc3QgZm9sZGVycyA9IHRoaXMuZ2V0Rm9sZGVycygpO1xyXG5cclxuICAgICAgICBmb2xkZXJzLmZvckVhY2goZm9sZGVyID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaXRlbSA9IGZvbGRlckxpc3QuY3JlYXRlRGl2KCdmb2xkZXItaXRlbScpO1xyXG4gICAgICAgICAgICBpdGVtLnNldFRleHQoZm9sZGVyKTtcclxuICAgICAgICAgICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMubW92ZUZpbGUoZm9sZGVyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRGb2xkZXJzKCk6IHN0cmluZ1tdIHtcclxuICAgICAgICBjb25zdCBmb2xkZXJzID0gbmV3IFNldDxzdHJpbmc+KCk7XHJcbiAgICAgICAgdGhpcy5hcHAudmF1bHQuZ2V0QWxsTG9hZGVkRmlsZXMoKS5mb3JFYWNoKGZpbGUgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGb2xkZXIpIHtcclxuICAgICAgICAgICAgICAgIGZvbGRlcnMuYWRkKGZpbGUucGF0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShmb2xkZXJzKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIG1vdmVGaWxlKHRhcmdldEZvbGRlcjogc3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgbmV3UGF0aCA9IGAke3RhcmdldEZvbGRlcn0vJHt0aGlzLmZpbGUubmFtZX1gO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuYXBwLmZpbGVNYW5hZ2VyLnJlbmFtZUZpbGUodGhpcy5maWxlLCBuZXdQYXRoKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkNsb3NlKCkge1xyXG4gICAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG4gICAgICAgIGNvbnRlbnRFbC5lbXB0eSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBcdTZERkJcdTUyQTBcdTc4NkVcdThCQTRcdTVCRjlcdThCRERcdTY4NDZcclxuY2xhc3MgQ29uZmlybU1vZGFsIGV4dGVuZHMgTW9kYWwge1xyXG4gICAgcHJpdmF0ZSByZXN1bHQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHByaXZhdGUgcmVzb2x2ZVByb21pc2U6ICh2YWx1ZTogYm9vbGVhbikgPT4gdm9pZDtcclxuICAgIHByaXZhdGUgdGl0bGU6IHN0cmluZztcclxuICAgIHByaXZhdGUgbWVzc2FnZTogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCB0aXRsZTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcihhcHApO1xyXG4gICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcclxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHNob3coKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xyXG4gICAgICAgICAgICB0aGlzLm9wZW4oKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBvbk9wZW4oKSB7XHJcbiAgICAgICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XHJcbiAgICAgICAgY29udGVudEVsLmNyZWF0ZUVsKCdoMycsIHsgdGV4dDogdGhpcy50aXRsZSB9KTtcclxuICAgICAgICBjb250ZW50RWwuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6IHRoaXMubWVzc2FnZSB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgYnV0dG9uQ29udGFpbmVyID0gY29udGVudEVsLmNyZWF0ZURpdignYnV0dG9uLWNvbnRhaW5lcicpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGNvbmZpcm1CdXR0b24gPSBidXR0b25Db250YWluZXIuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogJ1x1Nzg2RVx1OEJBNCcgfSk7XHJcbiAgICAgICAgY29uZmlybUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yZXN1bHQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGNhbmNlbEJ1dHRvbiA9IGJ1dHRvbkNvbnRhaW5lci5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnXHU1M0Q2XHU2RDg4JyB9KTtcclxuICAgICAgICBjYW5jZWxCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucmVzdWx0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBvbkNsb3NlKCkge1xyXG4gICAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG4gICAgICAgIGNvbnRlbnRFbC5lbXB0eSgpO1xyXG4gICAgICAgIHRoaXMucmVzb2x2ZVByb21pc2UodGhpcy5yZXN1bHQpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBcdTRGRUVcdTY1MzlcdTU4OUVcdTVGM0FcdTc2ODRcdTY1ODdcdTRFRjZcdTkwMDlcdTYyRTlcdTZBMjFcdTYwMDFcdTY4NDZcclxuY2xhc3MgRW5oYW5jZWRGaWxlU2VsZWN0aW9uTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XHJcbiAgICBwcml2YXRlIGZpbGVzOiBURmlsZVtdO1xyXG4gICAgcHJpdmF0ZSByZWNlbnRGb2xkZXJzOiBzdHJpbmdbXTtcclxuICAgIHByaXZhdGUgb25Gb2xkZXJzVXBkYXRlOiAoZm9sZGVyczogc3RyaW5nW10pID0+IHZvaWQ7XHJcbiAgICBwcml2YXRlIHNlbGVjdGVkRm9sZGVyOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBhcHA6IEFwcCxcclxuICAgICAgICBmaWxlczogVEZpbGVbXSxcclxuICAgICAgICByZWNlbnRGb2xkZXJzOiBzdHJpbmdbXSxcclxuICAgICAgICBvbkZvbGRlcnNVcGRhdGU6IChmb2xkZXJzOiBzdHJpbmdbXSkgPT4gdm9pZFxyXG4gICAgKSB7XHJcbiAgICAgICAgc3VwZXIoYXBwKTtcclxuICAgICAgICB0aGlzLmZpbGVzID0gZmlsZXM7XHJcbiAgICAgICAgdGhpcy5yZWNlbnRGb2xkZXJzID0gcmVjZW50Rm9sZGVycztcclxuICAgICAgICB0aGlzLm9uRm9sZGVyc1VwZGF0ZSA9IG9uRm9sZGVyc1VwZGF0ZTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBvbk9wZW4oKSB7XHJcbiAgICAgICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XHJcbiAgICAgICAgY29udGVudEVsLmVtcHR5KCk7XHJcblxyXG4gICAgICAgIC8vIFx1NjgwN1x1OTg5OFxyXG4gICAgICAgIGNvbnRlbnRFbC5jcmVhdGVFbCgnaDMnLCB7IFxyXG4gICAgICAgICAgICB0ZXh0OiBgXHU3OUZCXHU1MkE4ICR7dGhpcy5maWxlcy5sZW5ndGh9IFx1NEUyQVx1NjU4N1x1NEVGNmAgXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIFx1NjcwMFx1OEZEMVx1NEY3Rlx1NzUyOFx1NzY4NFx1NjU4N1x1NEVGNlx1NTkzOVxyXG4gICAgICAgIGlmICh0aGlzLnJlY2VudEZvbGRlcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBjb25zdCByZWNlbnRTZWN0aW9uID0gY29udGVudEVsLmNyZWF0ZURpdigncmVjZW50LWZvbGRlcnMtc2VjdGlvbicpO1xyXG4gICAgICAgICAgICByZWNlbnRTZWN0aW9uLmNyZWF0ZUVsKCdoNCcsIHsgdGV4dDogJ1x1NjcwMFx1NEY3Rlx1NzUyOCcgfSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zdCByZWNlbnRMaXN0ID0gcmVjZW50U2VjdGlvbi5jcmVhdGVEaXYoJ3JlY2VudC1mb2xkZXJzLWxpc3QnKTtcclxuICAgICAgICAgICAgdGhpcy5yZWNlbnRGb2xkZXJzLmZvckVhY2goZm9sZGVyID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSByZWNlbnRMaXN0LmNyZWF0ZURpdignZm9sZGVyLWl0ZW0gcmVjZW50Jyk7XHJcbiAgICAgICAgICAgICAgICBpdGVtLnNldFRleHQoZm9sZGVyKTtcclxuICAgICAgICAgICAgICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLnNlbGVjdEZvbGRlcihpdGVtLCBmb2xkZXIpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBcdTYyNDBcdTY3MDlcdTY1ODdcdTRFRjZcdTU5MzlcdTUyMTdcdTg4NjhcclxuICAgICAgICBjb25zdCBmb2xkZXJMaXN0ID0gY29udGVudEVsLmNyZWF0ZURpdignZm9sZGVyLWxpc3QnKTtcclxuICAgICAgICBjb25zdCBmb2xkZXJzID0gdGhpcy5nZXRGb2xkZXJzV2l0aEhpZXJhcmNoeSgpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlRm9sZGVyVHJlZShmb2xkZXJMaXN0LCBmb2xkZXJzKTtcclxuXHJcbiAgICAgICAgLy8gXHU2REZCXHU1MkEwXHU2NENEXHU0RjVDXHU2MzA5XHU5NEFFXHJcbiAgICAgICAgY29uc3QgYnV0dG9uQ29udGFpbmVyID0gY29udGVudEVsLmNyZWF0ZURpdignbW9kYWwtYnV0dG9uLWNvbnRhaW5lcicpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGNvbmZpcm1CdXR0b24gPSBidXR0b25Db250YWluZXIuY3JlYXRlRWwoJ2J1dHRvbicsIHtcclxuICAgICAgICAgICAgdGV4dDogJ1x1Nzg2RVx1OEJBNFx1NzlGQlx1NTJBOCcsXHJcbiAgICAgICAgICAgIGNsczogJ21vZC1jdGEnXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uZmlybUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRGb2xkZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubW92ZUZpbGVzKHRoaXMuc2VsZWN0ZWRGb2xkZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGNhbmNlbEJ1dHRvbiA9IGJ1dHRvbkNvbnRhaW5lci5jcmVhdGVFbCgnYnV0dG9uJywge1xyXG4gICAgICAgICAgICB0ZXh0OiAnXHU1M0Q2XHU2RDg4J1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNhbmNlbEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHRoaXMuY2xvc2UoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRGb2xkZXJzV2l0aEhpZXJhcmNoeSgpOiBGb2xkZXJJdGVtW10ge1xyXG4gICAgICAgIGNvbnN0IGZvbGRlcnM6IEZvbGRlckl0ZW1bXSA9IFtdO1xyXG4gICAgICAgIGNvbnN0IHNlZW4gPSBuZXcgU2V0PHN0cmluZz4oKTtcclxuXHJcbiAgICAgICAgdGhpcy5hcHAudmF1bHQuZ2V0QWxsTG9hZGVkRmlsZXMoKS5mb3JFYWNoKGZpbGUgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGb2xkZXIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnRzID0gZmlsZS5wYXRoLnNwbGl0KCcvJyk7XHJcbiAgICAgICAgICAgICAgICBsZXQgY3VycmVudFBhdGggPSAnJztcclxuICAgICAgICAgICAgICAgIGxldCBsZXZlbCA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgcGFydHMuZm9yRWFjaChwYXJ0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGFydCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UGF0aCArPSAoY3VycmVudFBhdGggPyAnLycgOiAnJykgKyBwYXJ0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNlZW4uaGFzKGN1cnJlbnRQYXRoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vlbi5hZGQoY3VycmVudFBhdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9sZGVycy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoOiBjdXJyZW50UGF0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBwYXJ0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldmVsOiBsZXZlbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWwrKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gZm9sZGVycy5zb3J0KChhLCBiKSA9PiBhLnBhdGgubG9jYWxlQ29tcGFyZShiLnBhdGgpKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNyZWF0ZUZvbGRlclRyZWUoY29udGFpbmVyOiBIVE1MRWxlbWVudCwgZm9sZGVyczogRm9sZGVySXRlbVtdKSB7XHJcbiAgICAgICAgZm9sZGVycy5mb3JFYWNoKGZvbGRlciA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBjb250YWluZXIuY3JlYXRlRGl2KHtcclxuICAgICAgICAgICAgICAgIGNsczogJ2ZvbGRlci1pdGVtJ1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIFx1NkRGQlx1NTJBMFx1N0YyOVx1OEZEQlxyXG4gICAgICAgICAgICBpdGVtLnN0eWxlLnBhZGRpbmdMZWZ0ID0gYCR7Zm9sZGVyLmxldmVsICogMjAgKyAxMH1weGA7XHJcblxyXG4gICAgICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTY1ODdcdTRFRjZcdTU5MzlcdTU2RkVcdTY4MDdcclxuICAgICAgICAgICAgY29uc3QgaWNvbiA9IGl0ZW0uY3JlYXRlU3Bhbih7XHJcbiAgICAgICAgICAgICAgICBjbHM6ICdmb2xkZXItaWNvbidcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGljb24uaW5uZXJIVE1MID0gYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMTZcIiBoZWlnaHQ9XCIxNlwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIj48cGF0aCBkPVwiTTIyIDE5YTIgMiAwIDAgMS0yIDJINGEyIDIgMCAwIDEtMi0yVjVhMiAyIDAgMCAxIDItMmg1bDIgM2g5YTIgMiAwIDAgMSAyIDJ6XCI+PC9wYXRoPjwvc3ZnPmA7XHJcblxyXG4gICAgICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTY1ODdcdTRFRjZcdTU5MzlcdTU0MERcdTc5RjBcclxuICAgICAgICAgICAgY29uc3QgbmFtZSA9IGl0ZW0uY3JlYXRlU3Bhbih7XHJcbiAgICAgICAgICAgICAgICBjbHM6ICdmb2xkZXItbmFtZScsXHJcbiAgICAgICAgICAgICAgICB0ZXh0OiBmb2xkZXIubmFtZVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLnNlbGVjdEZvbGRlcihpdGVtLCBmb2xkZXIucGF0aCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2VsZWN0Rm9sZGVyKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBwYXRoOiBzdHJpbmcpIHtcclxuICAgICAgICAvLyBcdTc5RkJcdTk2NjRcdTUxNzZcdTRFRDZcdTkwMDlcdTRFMkRcdTcyQjZcdTYwMDFcclxuICAgICAgICB0aGlzLmNvbnRlbnRFbC5xdWVyeVNlbGVjdG9yQWxsKCcuZm9sZGVyLWl0ZW0nKS5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICBpdGVtLnJlbW92ZUNsYXNzKCdzZWxlY3RlZCcpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTkwMDlcdTRFMkRcdTcyQjZcdTYwMDFcclxuICAgICAgICBlbGVtZW50LmFkZENsYXNzKCdzZWxlY3RlZCcpO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRGb2xkZXIgPSBwYXRoO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgbW92ZUZpbGVzKHRhcmdldEZvbGRlcjogc3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgY29uZmlybU1vZGFsID0gbmV3IENvbmZpcm1Nb2RhbChcclxuICAgICAgICAgICAgdGhpcy5hcHAsXHJcbiAgICAgICAgICAgIFwiXHU3ODZFXHU4QkE0XHU3OUZCXHU1MkE4XCIsXHJcbiAgICAgICAgICAgIGBcdTY2MkZcdTU0MjZcdTVDMDZcdTkwMDlcdTRFMkRcdTc2ODQgJHt0aGlzLmZpbGVzLmxlbmd0aH0gXHU0RTJBXHU2NTg3XHU0RUY2XHU3OUZCXHU1MkE4XHU1MjMwIFwiJHt0YXJnZXRGb2xkZXJ9XCJcdUZGMUZgXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgaWYgKGF3YWl0IGNvbmZpcm1Nb2RhbC5zaG93KCkpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBmaWxlIG9mIHRoaXMuZmlsZXMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1BhdGggPSBgJHt0YXJnZXRGb2xkZXJ9LyR7ZmlsZS5uYW1lfWA7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFwcC5maWxlTWFuYWdlci5yZW5hbWVGaWxlKGZpbGUsIG5ld1BhdGgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBcdTY2RjRcdTY1QjBcdTY3MDBcdThGRDFcdTRGN0ZcdTc1MjhcdTc2ODRcdTY1ODdcdTRFRjZcdTU5MzlcclxuICAgICAgICAgICAgdGhpcy5yZWNlbnRGb2xkZXJzID0gW3RhcmdldEZvbGRlciwgLi4udGhpcy5yZWNlbnRGb2xkZXJzLmZpbHRlcihmID0+IGYgIT09IHRhcmdldEZvbGRlcildXHJcbiAgICAgICAgICAgICAgICAuc2xpY2UoMCwgNSk7XHJcbiAgICAgICAgICAgIHRoaXMub25Gb2xkZXJzVXBkYXRlKHRoaXMucmVjZW50Rm9sZGVycyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vLyBcdTZERkJcdTUyQTBcdTY1ODdcdTRFRjZcdTU5MzlcdTk4NzlcdTYzQTVcdTUzRTNcclxuaW50ZXJmYWNlIEZvbGRlckl0ZW0ge1xyXG4gICAgcGF0aDogc3RyaW5nO1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgbGV2ZWw6IG51bWJlcjtcclxufSAiXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQSx1QkFBcUY7OztBQ0FyRixzQkFVTztBQUdBLElBQU0saUJBQWlCO0FBRXZCLDZCQUF1Qix5QkFBUztBQUFBLEVBNkJuQyxZQUFZLE1BQXFCLFFBQXdCO0FBQ3JELFVBQU07QUF0QkYsOEJBQThCO0FBQzlCLHlCQUErQjtBQUUvQiw2QkFBNEI7QUFDNUIsd0JBQTRCLElBQUk7QUFDaEMseUJBQTZC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
