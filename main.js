/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// main.ts
__export(exports, {
  default: () => CardViewPlugin
});
var import_obsidian2 = __toModule(require("obsidian"));

// cardView.ts
var import_obsidian = __toModule(require("obsidian"));
var VIEW_TYPE_CARD = "card-view";
var CardView = class extends import_obsidian.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.isPreviewCollapsed = false;
    this.currentFolder = null;
    this.currentSearchTerm = "";
    this.selectedTags = new Set();
    this.plugin = plugin;
    this.currentView = plugin.settings.defaultView;
  }
  getViewType() {
    return VIEW_TYPE_CARD;
  }
  getDisplayText() {
    return "\u5361\u7247\u89C6\u56FE";
  }
  async onOpen() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.addClass("card-view-container");
    const toolbar = containerEl.createDiv("card-view-toolbar");
    const leftTools = toolbar.createDiv("toolbar-left");
    const newNoteBtn = leftTools.createEl("button", {
      cls: "new-note-button"
    });
    newNoteBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-plus"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>
            <span>\u65B0\u5EFA\u7B14\u8BB0</span>
        `;
    newNoteBtn.addEventListener("click", () => this.createNewNote());
    const viewSwitcher = leftTools.createDiv("view-switcher");
    this.createViewSwitcher(viewSwitcher);
    const searchContainer = toolbar.createDiv("search-container");
    this.searchInput = searchContainer.createEl("input", {
      type: "text",
      placeholder: "\u641C\u7D22\u7B14\u8BB0...",
      cls: "search-input"
    });
    this.searchInput.addEventListener("input", () => {
      this.currentSearchTerm = this.searchInput.value;
      this.refreshView();
    });
    this.tagContainer = containerEl.createDiv("tag-filter");
    await this.loadTags();
    const contentArea = containerEl.createDiv("card-view-content");
    this.container = contentArea.createDiv("card-container");
    const previewWrapper = containerEl.createDiv("preview-wrapper");
    this.previewContainer = previewWrapper.createDiv("preview-container");
    const previewControls = previewWrapper.createDiv("preview-controls");
    const toggleButton = previewControls.createEl("button", {
      cls: "preview-toggle",
      attr: { "aria-label": "\u6298\u53E0\u9884\u89C8" }
    });
    toggleButton.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-right"><polyline points="9 18 15 12 9 6"></polyline></svg>`;
    toggleButton.addEventListener("click", () => this.togglePreview());
    this.previewResizer = previewWrapper.createDiv("preview-resizer");
    this.setupResizer();
    await this.loadNotes();
  }
  async loadTags() {
    const tags = this.getAllTags();
    const allTagBtn = this.tagContainer.createEl("button", {
      text: "All",
      cls: "tag-btn active"
    });
    allTagBtn.addEventListener("click", () => {
      this.clearTagSelection();
      allTagBtn.addClass("active");
      this.refreshView();
    });
    tags.forEach((tag) => {
      const tagBtn = this.tagContainer.createEl("button", {
        text: tag,
        cls: "tag-btn"
      });
      tagBtn.addEventListener("click", (e) => {
        e.stopPropagation();
        this.toggleTag(tag, tagBtn);
      });
    });
  }
  getAllTags() {
    const tags = new Set();
    this.app.vault.getMarkdownFiles().forEach((file) => {
      const cache = this.app.metadataCache.getFileCache(file);
      if (cache == null ? void 0 : cache.tags) {
        cache.tags.forEach((tag) => tags.add(tag.tag));
      }
    });
    return Array.from(tags);
  }
  createViewSwitcher(container) {
    const views = [
      { id: "card", icon: "grid", text: "\u5361\u7247\u89C6\u56FE" },
      { id: "list", icon: "list", text: "\u5217\u8868\u89C6\u56FE" },
      { id: "timeline", icon: "clock", text: "\u65F6\u95F4\u8F74\u89C6\u56FE" }
    ];
    views.forEach((view) => {
      const btn = container.createEl("button", {
        cls: `view-switch-btn ${view.id === this.currentView ? "active" : ""}`
      });
      const iconHtml = {
        "grid": '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="7" height="7"></rect><rect x="14" y="3" width="7" height="7"></rect><rect x="14" y="14" width="7" height="7"></rect><rect x="3" y="14" width="7" height="7"></rect></svg>',
        "list": '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="8" y1="6" x2="21" y2="6"></line><line x1="8" y1="12" x2="21" y2="12"></line><line x1="8" y1="18" x2="21" y2="18"></line><line x1="3" y1="6" x2="3.01" y2="6"></line><line x1="3" y1="12" x2="3.01" y2="12"></line><line x1="3" y1="18" x2="3.01" y2="18"></line></svg>',
        "clock": '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><polyline points="12 6 12 12 16 14"></polyline></svg>'
      };
      const iconSpan = btn.createSpan({ cls: "view-switch-icon" });
      iconSpan.innerHTML = iconHtml[view.icon];
      btn.createSpan({ text: view.text, cls: "view-switch-text" });
      btn.addEventListener("click", () => {
        container.querySelectorAll(".view-switch-btn").forEach((b) => b.removeClass("active"));
        btn.addClass("active");
        this.switchView(view.id);
      });
    });
  }
  async loadNotes() {
    const files = this.app.vault.getMarkdownFiles();
    this.container.empty();
    files.forEach((file) => {
      const card = this.createNoteCard(file);
      this.container.appendChild(card);
    });
  }
  createNoteCard(file) {
    const card = document.createElement("div");
    card.addClass("note-card");
    const title = card.createDiv("note-title");
    title.setText(file.basename);
    const lastModified = card.createDiv("note-date");
    lastModified.setText(new Date(file.stat.mtime).toLocaleDateString());
    const folderPath = card.createDiv("note-folder");
    const folder = file.parent ? file.parent.path === "/" ? "\u6839\u76EE\u5F55" : file.parent.path : "\u6839\u76EE\u5F55";
    folderPath.setText(folder);
    folderPath.setAttribute("title", folder);
    folderPath.addEventListener("click", (e) => {
      e.stopPropagation();
      this.highlightFolder(folder);
      this.revealFolderInExplorer(folder);
    });
    const cache = this.app.metadataCache.getFileCache(file);
    if (cache == null ? void 0 : cache.tags) {
      const tagContainer = card.createDiv("note-tags");
      cache.tags.forEach((tag) => {
        const tagEl = tagContainer.createEl("span", {
          text: tag.tag,
          cls: "note-tag"
        });
      });
    }
    card.addEventListener("click", async () => {
      const leaf = this.app.workspace.getLeaf("tab");
      await leaf.openFile(file);
    });
    card.addEventListener("mouseenter", async () => {
      try {
        this.previewContainer.empty();
        const content = await this.app.vault.read(file);
        await import_obsidian.MarkdownRenderer.renderMarkdown(content, this.previewContainer, file.path, this);
      } catch (error) {
        console.error("\u9884\u89C8\u52A0\u8F7D\u5931\u8D25:", error);
        this.previewContainer.setText("\u9884\u89C8\u52A0\u8F7D\u5931\u8D25");
      }
    });
    this.addContextMenu(card, file);
    return card;
  }
  switchView(view) {
    this.currentView = view;
    this.container.setAttribute("data-view", view);
    this.container.empty();
    if (view === "timeline") {
      this.createTimelineView();
    } else {
      this.loadNotes();
    }
  }
  filterByTag(tag) {
    const files = this.app.vault.getMarkdownFiles();
    this.container.empty();
    files.forEach((file) => {
      const cache = this.app.metadataCache.getFileCache(file);
      if ((cache == null ? void 0 : cache.tags) && cache.tags.some((t) => t.tag === tag)) {
        const card = this.createNoteCard(file);
        this.container.appendChild(card);
      }
    });
    this.tagContainer.querySelectorAll("button").forEach((btn) => {
      if (btn.textContent === tag) {
        btn.addClass("active-tag");
      } else {
        btn.removeClass("active-tag");
      }
    });
  }
  togglePreview() {
    this.isPreviewCollapsed = !this.isPreviewCollapsed;
    if (this.isPreviewCollapsed) {
      this.previewContainer.addClass("collapsed");
    } else {
      this.previewContainer.removeClass("collapsed");
    }
  }
  setupResizer() {
    let startX;
    let startWidth;
    const startResize = (e) => {
      e.preventDefault();
      startX = e.pageX;
      startWidth = parseInt(getComputedStyle(this.previewContainer).width, 10);
      document.addEventListener("mousemove", resize);
      document.addEventListener("mouseup", stopResize);
      document.body.style.cursor = "col-resize";
      this.previewResizer.addClass("resizing");
    };
    const resize = (e) => {
      const width = startWidth - (e.pageX - startX);
      if (width >= 50 && width <= 800) {
        this.previewContainer.style.width = `${width}px`;
        if (this.isPreviewCollapsed) {
          this.isPreviewCollapsed = false;
          this.previewContainer.removeClass("collapsed");
        }
      }
    };
    const stopResize = () => {
      document.removeEventListener("mousemove", resize);
      document.removeEventListener("mouseup", stopResize);
      document.body.style.cursor = "";
      this.previewResizer.removeClass("resizing");
    };
    this.previewResizer.addEventListener("mousedown", startResize);
  }
  highlightFolder(folder) {
    this.currentFolder = this.currentFolder === folder ? null : folder;
    this.container.querySelectorAll(".note-card").forEach((card) => {
      const folderElement = card.querySelector(".note-folder");
      const cardFolder = folderElement ? folderElement.textContent : null;
      if (cardFolder) {
        card.toggleClass("folder-highlight", cardFolder === folder);
      }
    });
  }
  async revealFolderInExplorer(folder) {
    const fileExplorer = this.app.workspace.getLeavesOfType("file-explorer")[0];
    if (fileExplorer) {
      const fileExplorerView = fileExplorer.view;
      if (folder === "\u6839\u76EE\u5F55") {
        if (fileExplorerView.expandFolder) {
          await fileExplorerView.expandFolder("/");
        }
        return;
      }
      if (fileExplorerView.expandFolder) {
        const folderParts = folder.split("/");
        let currentPath = "";
        for (const part of folderParts) {
          currentPath += (currentPath ? "/" : "") + part;
          await fileExplorerView.expandFolder(currentPath);
        }
        if (fileExplorerView.setSelection) {
          await fileExplorerView.setSelection(folder);
        }
      }
    }
  }
  async createNewNote() {
    const date = new Date();
    const fileName = `\u672A\u547D\u540D\u7B14\u8BB0 ${date.toLocaleString().replace(/[/:]/g, "-")}`;
    try {
      const file = await this.app.vault.create(`${fileName}.md`, "# " + fileName + "\n\n");
      const leaf = this.app.workspace.getLeaf("tab");
      await leaf.openFile(file);
      this.loadNotes();
    } catch (error) {
      console.error("\u521B\u5EFA\u7B14\u8BB0\u5931\u8D25:", error);
    }
  }
  createTimelineView() {
    const timelineContainer = this.container.createDiv("timeline-container");
    const files = this.app.vault.getMarkdownFiles();
    const notesByDate = new Map();
    files.forEach((file) => {
      const date = new Date(file.stat.mtime).toLocaleDateString();
      if (!notesByDate.has(date)) {
        notesByDate.set(date, []);
      }
      const notes = notesByDate.get(date);
      if (notes) {
        notes.push(file);
      }
    });
    const sortedDates = Array.from(notesByDate.keys()).sort((a, b) => new Date(b).getTime() - new Date(a).getTime());
    sortedDates.forEach((date) => {
      const dateGroup = timelineContainer.createDiv("timeline-date-group");
      const dateNode = dateGroup.createDiv("timeline-date-node");
      dateNode.createDiv("timeline-node-circle");
      dateNode.createDiv("timeline-date-label").setText(date);
      const notesList = dateGroup.createDiv("timeline-notes-list");
      const notes = notesByDate.get(date);
      if (notes) {
        notes.forEach((file) => {
          const noteItem = notesList.createDiv("timeline-note-item");
          noteItem.createDiv("timeline-note-marker");
          const noteContent = noteItem.createDiv("timeline-note-content");
          noteContent.createDiv("timeline-note-title").setText(file.basename);
          noteItem.addEventListener("click", async () => {
            const leaf = this.app.workspace.getLeaf("tab");
            await leaf.openFile(file);
          });
          noteItem.addEventListener("mouseenter", async () => {
            try {
              this.previewContainer.empty();
              const content = await this.app.vault.read(file);
              await import_obsidian.MarkdownRenderer.renderMarkdown(content, this.previewContainer, file.path, this);
            } catch (error) {
              console.error("\u9884\u89C8\u52A0\u8F7D\u5931\u8D25:", error);
            }
          });
        });
      }
    });
  }
  addContextMenu(card, file) {
    card.addEventListener("contextmenu", (event) => {
      event.preventDefault();
      const menu = new import_obsidian.Menu(this.app);
      menu.addItem((item) => {
        item.setTitle("\u5728\u65B0\u6807\u7B7E\u9875\u6253\u5F00").setIcon("link").onClick(async () => {
          const leaf = this.app.workspace.getLeaf("tab");
          await leaf.openFile(file);
        });
      });
      menu.addItem((item) => {
        item.setTitle("\u5728\u6587\u4EF6\u7BA1\u7406\u5668\u4E2D\u663E\u793A").setIcon("folder").onClick(() => {
          var _a;
          this.revealFolderInExplorer(((_a = file.parent) == null ? void 0 : _a.path) || "/");
        });
      });
      menu.addItem((item) => {
        item.setTitle("\u79FB\u52A8\u7B14\u8BB0").setIcon("move").onClick(async () => {
          const modal = new FileSelectionModal(this.app, file);
          modal.open();
        });
      });
      menu.addItem((item) => {
        item.setTitle("\u5220\u9664\u7B14\u8BB0").setIcon("trash").onClick(async () => {
          const confirm = await new ConfirmModal(this.app, "\u786E\u8BA4\u5220\u9664", `\u662F\u5426\u786E\u5B9A\u8981\u5220\u9664\u7B14\u8BB0 "${file.basename}"\uFF1F`).show();
          if (confirm) {
            await this.app.vault.trash(file, true);
            this.refreshView();
          }
        });
      });
      menu.showAtMouseEvent(event);
    });
  }
  async refreshView() {
    const files = this.app.vault.getMarkdownFiles();
    this.container.empty();
    const filteredFiles = files.filter((file) => {
      var _a, _b;
      const matchesSearch = !this.currentSearchTerm || file.basename.toLowerCase().includes(this.currentSearchTerm.toLowerCase());
      let matchesTags = true;
      if (this.selectedTags.size > 0) {
        const cache = this.app.metadataCache.getFileCache(file);
        matchesTags = (_b = (_a = cache == null ? void 0 : cache.tags) == null ? void 0 : _a.some((t) => this.selectedTags.has(t.tag))) != null ? _b : false;
      }
      return matchesSearch && matchesTags;
    });
    filteredFiles.forEach((file) => {
      const card = this.createNoteCard(file);
      this.container.appendChild(card);
    });
  }
  toggleTag(tag, tagBtn) {
    if (this.selectedTags.has(tag)) {
      this.selectedTags.delete(tag);
      tagBtn.removeClass("active");
    } else {
      this.selectedTags.add(tag);
      tagBtn.addClass("active");
    }
    const allBtn = this.tagContainer.querySelector("button");
    if (allBtn) {
      allBtn.removeClass("active");
    }
    this.refreshView();
  }
  clearTagSelection() {
    this.selectedTags.clear();
    this.tagContainer.querySelectorAll(".tag-btn").forEach((btn) => {
      btn.removeClass("active");
    });
  }
};
var FileSelectionModal = class extends import_obsidian.Modal {
  constructor(app, file) {
    super(app);
    this.file = file;
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h3", { text: "\u9009\u62E9\u76EE\u6807\u6587\u4EF6\u5939" });
    const folderList = contentEl.createDiv("folder-list");
    const folders = this.getFolders();
    folders.forEach((folder) => {
      const item = folderList.createDiv("folder-item");
      item.setText(folder);
      item.addEventListener("click", async () => {
        await this.moveFile(folder);
        this.close();
      });
    });
  }
  getFolders() {
    const folders = new Set();
    this.app.vault.getAllLoadedFiles().forEach((file) => {
      if (file instanceof import_obsidian.TFolder) {
        folders.add(file.path);
      }
    });
    return Array.from(folders);
  }
  async moveFile(targetFolder) {
    const newPath = `${targetFolder}/${this.file.name}`;
    await this.app.fileManager.renameFile(this.file, newPath);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var ConfirmModal = class extends import_obsidian.Modal {
  constructor(app, title, message) {
    super(app);
    this.result = false;
    this.title = title;
    this.message = message;
  }
  async show() {
    return new Promise((resolve) => {
      this.resolvePromise = resolve;
      this.open();
    });
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h3", { text: this.title });
    contentEl.createEl("p", { text: this.message });
    const buttonContainer = contentEl.createDiv("button-container");
    const confirmButton = buttonContainer.createEl("button", { text: "\u786E\u8BA4" });
    confirmButton.addEventListener("click", () => {
      this.result = true;
      this.close();
    });
    const cancelButton = buttonContainer.createEl("button", { text: "\u53D6\u6D88" });
    cancelButton.addEventListener("click", () => {
      this.result = false;
      this.close();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    this.resolvePromise(this.result);
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  defaultView: "card"
};
var CardViewSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian2.Setting(containerEl).setName("\u9ED8\u8BA4\u89C6\u56FE").setDesc("\u9009\u62E9\u9ED8\u8BA4\u7684\u89C6\u56FE\u6A21\u5F0F").addDropdown((dropdown) => {
      dropdown.addOption("card", "\u5361\u7247\u89C6\u56FE").addOption("list", "\u5217\u8868\u89C6\u56FE").addOption("timeline", "\u65F6\u95F4\u8F74\u89C6\u56FE").setValue(this.plugin.settings.defaultView);
      dropdown.onChange(async (value) => {
        if (value === "card" || value === "list" || value === "timeline") {
          this.plugin.settings.defaultView = value;
          await this.plugin.saveSettings();
        }
      });
      return dropdown;
    });
  }
};
var CardViewPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView(VIEW_TYPE_CARD, (leaf) => new CardView(leaf, this));
    this.addRibbonIcon("layout-grid", "\u5361\u7247\u89C6\u56FE", () => {
      this.activateView();
    });
    this.addSettingTab(new CardViewSettingTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf = workspace.getLeavesOfType(VIEW_TYPE_CARD)[0];
    if (!leaf) {
      leaf = workspace.getLeaf("tab");
      await leaf.setViewState({
        type: VIEW_TYPE_CARD,
        active: true
      });
    }
    workspace.revealLeaf(leaf);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJjYXJkVmlldy50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBQbHVnaW4sIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcsIFRGaWxlLCBXb3Jrc3BhY2VMZWFmIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgeyBDYXJkVmlldywgVklFV19UWVBFX0NBUkQgfSBmcm9tICcuL2NhcmRWaWV3JztcclxuXHJcbmludGVyZmFjZSBDYXJkVmlld1BsdWdpblNldHRpbmdzIHtcclxuICAgIGRlZmF1bHRWaWV3OiAnY2FyZCcgfCAnbGlzdCcgfCAndGltZWxpbmUnO1xyXG59XHJcblxyXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBDYXJkVmlld1BsdWdpblNldHRpbmdzID0ge1xyXG4gICAgZGVmYXVsdFZpZXc6ICdjYXJkJ1xyXG59XHJcblxyXG5jbGFzcyBDYXJkVmlld1NldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcclxuICAgIHBsdWdpbjogQ2FyZFZpZXdQbHVnaW47XHJcblxyXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogQ2FyZFZpZXdQbHVnaW4pIHtcclxuICAgICAgICBzdXBlcihhcHAsIHBsdWdpbik7XHJcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XHJcbiAgICB9XHJcblxyXG4gICAgZGlzcGxheSgpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCB7IGNvbnRhaW5lckVsIH0gPSB0aGlzO1xyXG4gICAgICAgIGNvbnRhaW5lckVsLmVtcHR5KCk7XHJcblxyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAgICAgICAuc2V0TmFtZSgnXHU5RUQ4XHU4QkE0XHU4OUM2XHU1NkZFJylcclxuICAgICAgICAgICAgLnNldERlc2MoJ1x1OTAwOVx1NjJFOVx1OUVEOFx1OEJBNFx1NzY4NFx1ODlDNlx1NTZGRVx1NkEyMVx1NUYwRicpXHJcbiAgICAgICAgICAgIC5hZGREcm9wZG93bihkcm9wZG93biA9PiB7XHJcbiAgICAgICAgICAgICAgICBkcm9wZG93blxyXG4gICAgICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oJ2NhcmQnLCAnXHU1MzYxXHU3MjQ3XHU4OUM2XHU1NkZFJylcclxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKCdsaXN0JywgJ1x1NTIxN1x1ODg2OFx1ODlDNlx1NTZGRScpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbigndGltZWxpbmUnLCAnXHU2NUY2XHU5NUY0XHU4Rjc0XHU4OUM2XHU1NkZFJylcclxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVmYXVsdFZpZXcpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBkcm9wZG93bi5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09ICdjYXJkJyB8fCB2YWx1ZSA9PT0gJ2xpc3QnIHx8IHZhbHVlID09PSAndGltZWxpbmUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmRlZmF1bHRWaWV3ID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZHJvcGRvd247XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYXJkVmlld1BsdWdpbiBleHRlbmRzIFBsdWdpbiB7XHJcbiAgICBzZXR0aW5nczogQ2FyZFZpZXdQbHVnaW5TZXR0aW5ncztcclxuXHJcbiAgICBhc3luYyBvbmxvYWQoKSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcclxuXHJcbiAgICAgICAgdGhpcy5yZWdpc3RlclZpZXcoXHJcbiAgICAgICAgICAgIFZJRVdfVFlQRV9DQVJELFxyXG4gICAgICAgICAgICAobGVhZjogV29ya3NwYWNlTGVhZikgPT4gbmV3IENhcmRWaWV3KGxlYWYsIHRoaXMpXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRSaWJib25JY29uKCdsYXlvdXQtZ3JpZCcsICdcdTUzNjFcdTcyNDdcdTg5QzZcdTU2RkUnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuYWN0aXZhdGVWaWV3KCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgQ2FyZFZpZXdTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgbG9hZFNldHRpbmdzKCkge1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcclxuICAgICAgICBhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGFjdGl2YXRlVmlldygpIHtcclxuICAgICAgICBjb25zdCB7IHdvcmtzcGFjZSB9ID0gdGhpcy5hcHA7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IGxlYWYgPSB3b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKFZJRVdfVFlQRV9DQVJEKVswXTtcclxuICAgICAgICBpZiAoIWxlYWYpIHtcclxuICAgICAgICAgICAgbGVhZiA9IHdvcmtzcGFjZS5nZXRMZWFmKCd0YWInKTtcclxuICAgICAgICAgICAgYXdhaXQgbGVhZi5zZXRWaWV3U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgdHlwZTogVklFV19UWVBFX0NBUkQsXHJcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHRydWUsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB3b3Jrc3BhY2UucmV2ZWFsTGVhZihsZWFmKTtcclxuICAgIH1cclxufSAiLCAiaW1wb3J0IHtcclxuICAgIEl0ZW1WaWV3LFxyXG4gICAgV29ya3NwYWNlTGVhZixcclxuICAgIFRGaWxlLFxyXG4gICAgTWFya2Rvd25SZW5kZXJlcixcclxuICAgIE1lbnUsXHJcbiAgICBNb2RhbCxcclxuICAgIFRGb2xkZXIsXHJcbiAgICBBcHAsXHJcbiAgICBOb3RpY2VcclxufSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCBDYXJkVmlld1BsdWdpbiBmcm9tICcuL21haW4nO1xyXG5cclxuZXhwb3J0IGNvbnN0IFZJRVdfVFlQRV9DQVJEID0gJ2NhcmQtdmlldyc7XHJcblxyXG5leHBvcnQgY2xhc3MgQ2FyZFZpZXcgZXh0ZW5kcyBJdGVtVmlldyB7XHJcbiAgICBwcml2YXRlIHBsdWdpbjogQ2FyZFZpZXdQbHVnaW47XHJcbiAgICBwcml2YXRlIGN1cnJlbnRWaWV3OiAnY2FyZCcgfCAnbGlzdCcgfCAndGltZWxpbmUnO1xyXG4gICAgcHJpdmF0ZSBjb250YWluZXI6IEhUTUxFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSB0YWdDb250YWluZXI6IEhUTUxFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBjb250ZW50Q29udGFpbmVyOiBIVE1MRWxlbWVudDtcclxuICAgIHByaXZhdGUgcHJldmlld0NvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XHJcbiAgICBwcml2YXRlIHByZXZpZXdSZXNpemVyOiBIVE1MRWxlbWVudDtcclxuICAgIHByaXZhdGUgaXNQcmV2aWV3Q29sbGFwc2VkOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIGN1cnJlbnRGb2xkZXI6IHN0cmluZyB8IG51bGwgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBzZWFyY2hJbnB1dDogSFRNTElucHV0RWxlbWVudDtcclxuICAgIHByaXZhdGUgY3VycmVudFNlYXJjaFRlcm06IHN0cmluZyA9ICcnO1xyXG4gICAgcHJpdmF0ZSBzZWxlY3RlZFRhZ3M6IFNldDxzdHJpbmc+ID0gbmV3IFNldCgpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU2Nzg0XHU5MDIwXHU1MUZEXHU2NTcwXHJcbiAgICAgKiBAcGFyYW0gbGVhZiAtIFx1NURFNVx1NEY1Q1x1NTMzQVx1NTNGNlx1NUI1MFx1ODI4Mlx1NzBCOVxyXG4gICAgICogQHBhcmFtIHBsdWdpbiAtIFx1NjNEMlx1NEVGNlx1NUI5RVx1NEY4QlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihsZWFmOiBXb3Jrc3BhY2VMZWFmLCBwbHVnaW46IENhcmRWaWV3UGx1Z2luKSB7XHJcbiAgICAgICAgc3VwZXIobGVhZik7XHJcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XHJcbiAgICAgICAgdGhpcy5jdXJyZW50VmlldyA9IHBsdWdpbi5zZXR0aW5ncy5kZWZhdWx0VmlldztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1ODNCN1x1NTNENlx1ODlDNlx1NTZGRVx1N0M3Qlx1NTc4QlxyXG4gICAgICogQHJldHVybnMgXHU4OUM2XHU1NkZFXHU3QzdCXHU1NzhCXHU2ODA3XHU4QkM2XHU3QjI2XHJcbiAgICAgKi9cclxuICAgIGdldFZpZXdUeXBlKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIFZJRVdfVFlQRV9DQVJEO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU4M0I3XHU1M0Q2XHU4OUM2XHU1NkZFXHU2NjNFXHU3OTNBXHU2NTg3XHU2NzJDXHJcbiAgICAgKiBAcmV0dXJucyBcdTY2M0VcdTc5M0FcdTU3MjhcdTY4MDdcdTdCN0VcdTk4NzVcdTRFMEFcdTc2ODRcdTY1ODdcdTY3MkNcclxuICAgICAqL1xyXG4gICAgZ2V0RGlzcGxheVRleHQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gJ1x1NTM2MVx1NzI0N1x1ODlDNlx1NTZGRSc7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTg5QzZcdTU2RkVcdTYyNTNcdTVGMDBcdTY1RjZcdTc2ODRcdTUyMURcdTU5Q0JcdTUzMTZcdTUxRkRcdTY1NzBcclxuICAgICAqIFx1NTIxQlx1NUVGQVx1NjgwN1x1N0I3RVx1OEZDN1x1NkVFNFx1NTY2OFx1MzAwMVx1ODlDNlx1NTZGRVx1NTIwN1x1NjM2Mlx1NjMwOVx1OTRBRVx1NTQ4Q1x1NUJCOVx1NTY2OFxyXG4gICAgICovXHJcbiAgICBhc3luYyBvbk9wZW4oKSB7XHJcbiAgICAgICAgY29uc3QgeyBjb250YWluZXJFbCB9ID0gdGhpcztcclxuICAgICAgICBjb250YWluZXJFbC5lbXB0eSgpO1xyXG4gICAgICAgIGNvbnRhaW5lckVsLmFkZENsYXNzKCdjYXJkLXZpZXctY29udGFpbmVyJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU1MjFCXHU1RUZBXHU1REU1XHU1MTc3XHU2ODBGXHJcbiAgICAgICAgY29uc3QgdG9vbGJhciA9IGNvbnRhaW5lckVsLmNyZWF0ZURpdignY2FyZC12aWV3LXRvb2xiYXInKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTVERTZcdTRGQTdcdTVERTVcdTUxNzdcdTdFQzRcclxuICAgICAgICBjb25zdCBsZWZ0VG9vbHMgPSB0b29sYmFyLmNyZWF0ZURpdigndG9vbGJhci1sZWZ0Jyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU2NUIwXHU1RUZBXHU3QjE0XHU4QkIwXHU2MzA5XHU5NEFFXHJcbiAgICAgICAgY29uc3QgbmV3Tm90ZUJ0biA9IGxlZnRUb29scy5jcmVhdGVFbCgnYnV0dG9uJywge1xyXG4gICAgICAgICAgICBjbHM6ICduZXctbm90ZS1idXR0b24nLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIG5ld05vdGVCdG4uaW5uZXJIVE1MID0gYFxyXG4gICAgICAgICAgICA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjE2XCIgaGVpZ2h0PVwiMTZcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgY2xhc3M9XCJsdWNpZGUgbHVjaWRlLXBsdXNcIj48bGluZSB4MT1cIjEyXCIgeTE9XCI1XCIgeDI9XCIxMlwiIHkyPVwiMTlcIj48L2xpbmU+PGxpbmUgeDE9XCI1XCIgeTE9XCIxMlwiIHgyPVwiMTlcIiB5Mj1cIjEyXCI+PC9saW5lPjwvc3ZnPlxyXG4gICAgICAgICAgICA8c3Bhbj5cdTY1QjBcdTVFRkFcdTdCMTRcdThCQjA8L3NwYW4+XHJcbiAgICAgICAgYDtcclxuICAgICAgICBuZXdOb3RlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5jcmVhdGVOZXdOb3RlKCkpO1xyXG5cclxuICAgICAgICAvLyBcdTg5QzZcdTU2RkVcdTUyMDdcdTYzNjJcdTYzMDlcdTk0QUVcdTdFQzRcclxuICAgICAgICBjb25zdCB2aWV3U3dpdGNoZXIgPSBsZWZ0VG9vbHMuY3JlYXRlRGl2KCd2aWV3LXN3aXRjaGVyJyk7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVWaWV3U3dpdGNoZXIodmlld1N3aXRjaGVyKTtcclxuXHJcbiAgICAgICAgLy8gXHU1M0YzXHU0RkE3XHU2NDFDXHU3RDIyXHU2ODQ2XHJcbiAgICAgICAgY29uc3Qgc2VhcmNoQ29udGFpbmVyID0gdG9vbGJhci5jcmVhdGVEaXYoJ3NlYXJjaC1jb250YWluZXInKTtcclxuICAgICAgICB0aGlzLnNlYXJjaElucHV0ID0gc2VhcmNoQ29udGFpbmVyLmNyZWF0ZUVsKCdpbnB1dCcsIHtcclxuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogJ1x1NjQxQ1x1N0QyMlx1N0IxNFx1OEJCMC4uLicsXHJcbiAgICAgICAgICAgIGNsczogJ3NlYXJjaC1pbnB1dCdcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnNlYXJjaElucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRTZWFyY2hUZXJtID0gdGhpcy5zZWFyY2hJbnB1dC52YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy5yZWZyZXNoVmlldygpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBcdTY4MDdcdTdCN0VcdTY4MEZcclxuICAgICAgICB0aGlzLnRhZ0NvbnRhaW5lciA9IGNvbnRhaW5lckVsLmNyZWF0ZURpdigndGFnLWZpbHRlcicpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMubG9hZFRhZ3MoKTtcclxuXHJcbiAgICAgICAgLy8gXHU0RTNCXHU1MTg1XHU1QkI5XHU1MzNBXHU1N0RGXHJcbiAgICAgICAgY29uc3QgY29udGVudEFyZWEgPSBjb250YWluZXJFbC5jcmVhdGVEaXYoJ2NhcmQtdmlldy1jb250ZW50Jyk7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250ZW50QXJlYS5jcmVhdGVEaXYoJ2NhcmQtY29udGFpbmVyJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU5ODg0XHU4OUM4XHU1MzNBXHU1N0RGXHJcbiAgICAgICAgY29uc3QgcHJldmlld1dyYXBwZXIgPSBjb250YWluZXJFbC5jcmVhdGVEaXYoJ3ByZXZpZXctd3JhcHBlcicpO1xyXG4gICAgICAgIHRoaXMucHJldmlld0NvbnRhaW5lciA9IHByZXZpZXdXcmFwcGVyLmNyZWF0ZURpdigncHJldmlldy1jb250YWluZXInKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBcdTk4ODRcdTg5QzhcdTYzQTdcdTUyMzZcdTYzMDlcdTk0QUVcclxuICAgICAgICBjb25zdCBwcmV2aWV3Q29udHJvbHMgPSBwcmV2aWV3V3JhcHBlci5jcmVhdGVEaXYoJ3ByZXZpZXctY29udHJvbHMnKTtcclxuICAgICAgICBjb25zdCB0b2dnbGVCdXR0b24gPSBwcmV2aWV3Q29udHJvbHMuY3JlYXRlRWwoJ2J1dHRvbicsIHtcclxuICAgICAgICAgICAgY2xzOiAncHJldmlldy10b2dnbGUnLFxyXG4gICAgICAgICAgICBhdHRyOiB7ICdhcmlhLWxhYmVsJzogJ1x1NjI5OFx1NTNFMFx1OTg4NFx1ODlDOCcgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRvZ2dsZUJ1dHRvbi5pbm5lckhUTUwgPSBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIGNsYXNzPVwiZmVhdGhlciBmZWF0aGVyLWNoZXZyb24tcmlnaHRcIj48cG9seWxpbmUgcG9pbnRzPVwiOSAxOCAxNSAxMiA5IDZcIj48L3BvbHlsaW5lPjwvc3ZnPmA7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdG9nZ2xlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy50b2dnbGVQcmV2aWV3KCkpO1xyXG5cclxuICAgICAgICB0aGlzLnByZXZpZXdSZXNpemVyID0gcHJldmlld1dyYXBwZXIuY3JlYXRlRGl2KCdwcmV2aWV3LXJlc2l6ZXInKTtcclxuICAgICAgICB0aGlzLnNldHVwUmVzaXplcigpO1xyXG5cclxuICAgICAgICBhd2FpdCB0aGlzLmxvYWROb3RlcygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU1MkEwXHU4RjdEXHU2MjQwXHU2NzA5XHU2ODA3XHU3QjdFXHU1RTc2XHU1MjFCXHU1RUZBXHU2ODA3XHU3QjdFXHU4RkM3XHU2RUU0XHU1NjY4XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgYXN5bmMgbG9hZFRhZ3MoKSB7XHJcbiAgICAgICAgY29uc3QgdGFncyA9IHRoaXMuZ2V0QWxsVGFncygpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1NkRGQlx1NTJBMCBcIkFsbFwiIFx1NjgwN1x1N0I3RVxyXG4gICAgICAgIGNvbnN0IGFsbFRhZ0J0biA9IHRoaXMudGFnQ29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7IFxyXG4gICAgICAgICAgICB0ZXh0OiAnQWxsJyxcclxuICAgICAgICAgICAgY2xzOiAndGFnLWJ0biBhY3RpdmUnICAvLyBcdTlFRDhcdThCQTRcdTkwMDlcdTRFMkRcclxuICAgICAgICB9KTtcclxuICAgICAgICBhbGxUYWdCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xlYXJUYWdTZWxlY3Rpb24oKTtcclxuICAgICAgICAgICAgYWxsVGFnQnRuLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgdGhpcy5yZWZyZXNoVmlldygpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTUxNzZcdTRFRDZcdTY4MDdcdTdCN0VcclxuICAgICAgICB0YWdzLmZvckVhY2godGFnID0+IHtcclxuICAgICAgICAgICAgY29uc3QgdGFnQnRuID0gdGhpcy50YWdDb250YWluZXIuY3JlYXRlRWwoJ2J1dHRvbicsIHsgXHJcbiAgICAgICAgICAgICAgICB0ZXh0OiB0YWcsXHJcbiAgICAgICAgICAgICAgICBjbHM6ICd0YWctYnRuJ1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGFnQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZVRhZyh0YWcsIHRhZ0J0bik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU4M0I3XHU1M0Q2XHU2MjQwXHU2NzA5XHU3QjE0XHU4QkIwXHU0RTJEXHU3Njg0XHU2ODA3XHU3QjdFXHJcbiAgICAgKiBAcmV0dXJucyBcdTUzQkJcdTkxQ0RcdTU0MEVcdTc2ODRcdTY4MDdcdTdCN0VcdTY1NzBcdTdFQzRcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBnZXRBbGxUYWdzKCk6IHN0cmluZ1tdIHtcclxuICAgICAgICBjb25zdCB0YWdzID0gbmV3IFNldDxzdHJpbmc+KCk7XHJcbiAgICAgICAgdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpLmZvckVhY2goZmlsZSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhY2hlID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk7XHJcbiAgICAgICAgICAgIGlmIChjYWNoZT8udGFncykge1xyXG4gICAgICAgICAgICAgICAgY2FjaGUudGFncy5mb3JFYWNoKHRhZyA9PiB0YWdzLmFkZCh0YWcudGFnKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0YWdzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1NTIxQlx1NUVGQVx1ODlDNlx1NTZGRVx1NTIwN1x1NjM2Mlx1NjMwOVx1OTRBRVxyXG4gICAgICogQHBhcmFtIGNvbnRhaW5lciAtIFx1NjMwOVx1OTRBRVx1NUJCOVx1NTY2OFx1NTE0M1x1N0QyMFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNyZWF0ZVZpZXdTd2l0Y2hlcihjb250YWluZXI6IEhUTUxFbGVtZW50KSB7XHJcbiAgICAgICAgY29uc3Qgdmlld3MgPSBbXHJcbiAgICAgICAgICAgIHsgaWQ6ICdjYXJkJywgaWNvbjogJ2dyaWQnLCB0ZXh0OiAnXHU1MzYxXHU3MjQ3XHU4OUM2XHU1NkZFJyB9LFxyXG4gICAgICAgICAgICB7IGlkOiAnbGlzdCcsIGljb246ICdsaXN0JywgdGV4dDogJ1x1NTIxN1x1ODg2OFx1ODlDNlx1NTZGRScgfSxcclxuICAgICAgICAgICAgeyBpZDogJ3RpbWVsaW5lJywgaWNvbjogJ2Nsb2NrJywgdGV4dDogJ1x1NjVGNlx1OTVGNFx1OEY3NFx1ODlDNlx1NTZGRScgfVxyXG4gICAgICAgIF07XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmlld3MuZm9yRWFjaCh2aWV3ID0+IHtcclxuICAgICAgICAgICAgY29uc3QgYnRuID0gY29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7XHJcbiAgICAgICAgICAgICAgICBjbHM6IGB2aWV3LXN3aXRjaC1idG4gJHt2aWV3LmlkID09PSB0aGlzLmN1cnJlbnRWaWV3ID8gJ2FjdGl2ZScgOiAnJ31gLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NzZGNFx1NjNBNVx1NEY3Rlx1NzUyOCBTVkcgXHU1NkZFXHU2ODA3XHJcbiAgICAgICAgICAgIGNvbnN0IGljb25IdG1sID0ge1xyXG4gICAgICAgICAgICAgICAgJ2dyaWQnOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIxOFwiIGhlaWdodD1cIjE4XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiPjxyZWN0IHg9XCIzXCIgeT1cIjNcIiB3aWR0aD1cIjdcIiBoZWlnaHQ9XCI3XCI+PC9yZWN0PjxyZWN0IHg9XCIxNFwiIHk9XCIzXCIgd2lkdGg9XCI3XCIgaGVpZ2h0PVwiN1wiPjwvcmVjdD48cmVjdCB4PVwiMTRcIiB5PVwiMTRcIiB3aWR0aD1cIjdcIiBoZWlnaHQ9XCI3XCI+PC9yZWN0PjxyZWN0IHg9XCIzXCIgeT1cIjE0XCIgd2lkdGg9XCI3XCIgaGVpZ2h0PVwiN1wiPjwvcmVjdD48L3N2Zz4nLFxyXG4gICAgICAgICAgICAgICAgJ2xpc3QnOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIxOFwiIGhlaWdodD1cIjE4XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiPjxsaW5lIHgxPVwiOFwiIHkxPVwiNlwiIHgyPVwiMjFcIiB5Mj1cIjZcIj48L2xpbmU+PGxpbmUgeDE9XCI4XCIgeTE9XCIxMlwiIHgyPVwiMjFcIiB5Mj1cIjEyXCI+PC9saW5lPjxsaW5lIHgxPVwiOFwiIHkxPVwiMThcIiB4Mj1cIjIxXCIgeTI9XCIxOFwiPjwvbGluZT48bGluZSB4MT1cIjNcIiB5MT1cIjZcIiB4Mj1cIjMuMDFcIiB5Mj1cIjZcIj48L2xpbmU+PGxpbmUgeDE9XCIzXCIgeTE9XCIxMlwiIHgyPVwiMy4wMVwiIHkyPVwiMTJcIj48L2xpbmU+PGxpbmUgeDE9XCIzXCIgeTE9XCIxOFwiIHgyPVwiMy4wMVwiIHkyPVwiMThcIj48L2xpbmU+PC9zdmc+JyxcclxuICAgICAgICAgICAgICAgICdjbG9jayc6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjE4XCIgaGVpZ2h0PVwiMThcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCI+PGNpcmNsZSBjeD1cIjEyXCIgY3k9XCIxMlwiIHI9XCIxMFwiPjwvY2lyY2xlPjxwb2x5bGluZSBwb2ludHM9XCIxMiA2IDEyIDEyIDE2IDE0XCI+PC9wb2x5bGluZT48L3N2Zz4nXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBcdTUyMUJcdTVFRkFcdTU2RkVcdTY4MDdcdTVCQjlcdTU2NjhcclxuICAgICAgICAgICAgY29uc3QgaWNvblNwYW4gPSBidG4uY3JlYXRlU3Bhbih7IGNsczogJ3ZpZXctc3dpdGNoLWljb24nIH0pO1xyXG4gICAgICAgICAgICBpY29uU3Bhbi5pbm5lckhUTUwgPSBpY29uSHRtbFt2aWV3Lmljb25dO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU2REZCXHU1MkEwXHU2NTg3XHU1QjU3XHJcbiAgICAgICAgICAgIGJ0bi5jcmVhdGVTcGFuKHsgdGV4dDogdmlldy50ZXh0LCBjbHM6ICd2aWV3LXN3aXRjaC10ZXh0JyB9KTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcudmlldy1zd2l0Y2gtYnRuJykuZm9yRWFjaChiID0+IGIucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpKTtcclxuICAgICAgICAgICAgICAgIGJ0bi5hZGRDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN3aXRjaFZpZXcodmlldy5pZCBhcyAnY2FyZCcgfCAnbGlzdCcgfCAndGltZWxpbmUnKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcdTUyQTBcdThGN0RcdTYyNDBcdTY3MDlcdTdCMTRcdThCQjBcdTVFNzZcdTUyMUJcdTVFRkFcdTUzNjFcdTcyNDdcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBhc3luYyBsb2FkTm90ZXMoKSB7XHJcbiAgICAgICAgY29uc3QgZmlsZXMgPSB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIuZW1wdHkoKTtcclxuXHJcbiAgICAgICAgZmlsZXMuZm9yRWFjaChmaWxlID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY2FyZCA9IHRoaXMuY3JlYXRlTm90ZUNhcmQoZmlsZSk7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKGNhcmQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHU1MjFCXHU1RUZBXHU1MzU1XHU0RTJBXHU3QjE0XHU4QkIwXHU1MzYxXHU3MjQ3XHJcbiAgICAgKiBAcGFyYW0gZmlsZSAtIFx1N0IxNFx1OEJCMFx1NjU4N1x1NEVGNlxyXG4gICAgICogQHJldHVybnMgXHU1MzYxXHU3MjQ3SFRNTFx1NTE0M1x1N0QyMFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNyZWF0ZU5vdGVDYXJkKGZpbGU6IFRGaWxlKTogSFRNTEVsZW1lbnQge1xyXG4gICAgICAgIGNvbnN0IGNhcmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBjYXJkLmFkZENsYXNzKCdub3RlLWNhcmQnKTtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCB0aXRsZSA9IGNhcmQuY3JlYXRlRGl2KCdub3RlLXRpdGxlJyk7XHJcbiAgICAgICAgdGl0bGUuc2V0VGV4dChmaWxlLmJhc2VuYW1lKTtcclxuXHJcbiAgICAgICAgY29uc3QgbGFzdE1vZGlmaWVkID0gY2FyZC5jcmVhdGVEaXYoJ25vdGUtZGF0ZScpO1xyXG4gICAgICAgIGxhc3RNb2RpZmllZC5zZXRUZXh0KG5ldyBEYXRlKGZpbGUuc3RhdC5tdGltZSkudG9Mb2NhbGVEYXRlU3RyaW5nKCkpO1xyXG5cclxuICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTY1ODdcdTRFRjZcdTU5MzlcdThERUZcdTVGODRcdUZGMDhcdTZERkJcdTUyQTBcdTdBN0FcdTUwM0NcdTY4QzBcdTY3RTVcdUZGMDlcclxuICAgICAgICBjb25zdCBmb2xkZXJQYXRoID0gY2FyZC5jcmVhdGVEaXYoJ25vdGUtZm9sZGVyJyk7XHJcbiAgICAgICAgY29uc3QgZm9sZGVyID0gZmlsZS5wYXJlbnQgPyAoZmlsZS5wYXJlbnQucGF0aCA9PT0gJy8nID8gJ1x1NjgzOVx1NzZFRVx1NUY1NScgOiBmaWxlLnBhcmVudC5wYXRoKSA6ICdcdTY4MzlcdTc2RUVcdTVGNTUnO1xyXG4gICAgICAgIGZvbGRlclBhdGguc2V0VGV4dChmb2xkZXIpO1xyXG4gICAgICAgIGZvbGRlclBhdGguc2V0QXR0cmlidXRlKCd0aXRsZScsIGZvbGRlcik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gXHU3MEI5XHU1MUZCXHU2NTg3XHU0RUY2XHU1OTM5XHU4REVGXHU1Rjg0XHU5QUQ4XHU0RUFFXHU3NkY4XHU1NDBDXHU2NTg3XHU0RUY2XHU1OTM5XHU3Njg0XHU3QjE0XHU4QkIwXHJcbiAgICAgICAgZm9sZGVyUGF0aC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0Rm9sZGVyKGZvbGRlcik7XHJcbiAgICAgICAgICAgIHRoaXMucmV2ZWFsRm9sZGVySW5FeHBsb3Jlcihmb2xkZXIpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCBjYWNoZSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpO1xyXG4gICAgICAgIGlmIChjYWNoZT8udGFncykge1xyXG4gICAgICAgICAgICBjb25zdCB0YWdDb250YWluZXIgPSBjYXJkLmNyZWF0ZURpdignbm90ZS10YWdzJyk7XHJcbiAgICAgICAgICAgIGNhY2hlLnRhZ3MuZm9yRWFjaCh0YWcgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGFnRWwgPSB0YWdDb250YWluZXIuY3JlYXRlRWwoJ3NwYW4nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogdGFnLnRhZyxcclxuICAgICAgICAgICAgICAgICAgICBjbHM6ICdub3RlLXRhZydcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFx1NEZFRVx1NjUzOVx1NTM2MVx1NzI0N1x1NzBCOVx1NTFGQlx1NEU4Qlx1NEVGNlxyXG4gICAgICAgIGNhcmQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxlYWYgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhZigndGFiJyk7XHJcbiAgICAgICAgICAgIGF3YWl0IGxlYWYub3BlbkZpbGUoZmlsZSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIFx1OTg4NFx1ODlDOFx1NTI5Rlx1ODBGRFx1NEZERFx1NjMwMVx1NEUwRFx1NTNEOFxyXG4gICAgICAgIGNhcmQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJldmlld0NvbnRhaW5lci5lbXB0eSgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29udGVudCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlYWQoZmlsZSk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBNYXJrZG93blJlbmRlcmVyLnJlbmRlck1hcmtkb3duKFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmV2aWV3Q29udGFpbmVyLFxyXG4gICAgICAgICAgICAgICAgICAgIGZpbGUucGF0aCxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignXHU5ODg0XHU4OUM4XHU1MkEwXHU4RjdEXHU1OTMxXHU4RDI1OicsIGVycm9yKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJldmlld0NvbnRhaW5lci5zZXRUZXh0KCdcdTk4ODRcdTg5QzhcdTUyQTBcdThGN0RcdTU5MzFcdThEMjUnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTUzRjNcdTk1MkVcdTgzRENcdTUzNTVcclxuICAgICAgICB0aGlzLmFkZENvbnRleHRNZW51KGNhcmQsIGZpbGUpO1xyXG5cclxuICAgICAgICByZXR1cm4gY2FyZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1NTIwN1x1NjM2Mlx1ODlDNlx1NTZGRVx1NkEyMVx1NUYwRlxyXG4gICAgICogQHBhcmFtIHZpZXcgLSBcdTc2RUVcdTY4MDdcdTg5QzZcdTU2RkVcdTZBMjFcdTVGMEZcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBzd2l0Y2hWaWV3KHZpZXc6ICdjYXJkJyB8ICdsaXN0JyB8ICd0aW1lbGluZScpIHtcclxuICAgICAgICB0aGlzLmN1cnJlbnRWaWV3ID0gdmlldztcclxuICAgICAgICB0aGlzLmNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2RhdGEtdmlldycsIHZpZXcpO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyLmVtcHR5KCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHZpZXcgPT09ICd0aW1lbGluZScpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVUaW1lbGluZVZpZXcoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmxvYWROb3RlcygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFx1NjgzOVx1NjM2RVx1NjgwN1x1N0I3RVx1OEZDN1x1NkVFNFx1N0IxNFx1OEJCMFxyXG4gICAgICogQHBhcmFtIHRhZyAtIFx1NjgwN1x1N0I3RVx1NTQwRFx1NzlGMFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGZpbHRlckJ5VGFnKHRhZzogc3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgZmlsZXMgPSB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIuZW1wdHkoKTtcclxuXHJcbiAgICAgICAgZmlsZXMuZm9yRWFjaChmaWxlID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY2FjaGUgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcclxuICAgICAgICAgICAgaWYgKGNhY2hlPy50YWdzICYmIGNhY2hlLnRhZ3Muc29tZSh0ID0+IHQudGFnID09PSB0YWcpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjYXJkID0gdGhpcy5jcmVhdGVOb3RlQ2FyZChmaWxlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKGNhcmQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIFx1OUFEOFx1NEVBRVx1OTAwOVx1NEUyRFx1NzY4NFx1NjgwN1x1N0I3RVxyXG4gICAgICAgIHRoaXMudGFnQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbicpLmZvckVhY2goYnRuID0+IHtcclxuICAgICAgICAgICAgaWYgKGJ0bi50ZXh0Q29udGVudCA9PT0gdGFnKSB7XHJcbiAgICAgICAgICAgICAgICBidG4uYWRkQ2xhc3MoJ2FjdGl2ZS10YWcnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGJ0bi5yZW1vdmVDbGFzcygnYWN0aXZlLXRhZycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB0b2dnbGVQcmV2aWV3KCkge1xyXG4gICAgICAgIHRoaXMuaXNQcmV2aWV3Q29sbGFwc2VkID0gIXRoaXMuaXNQcmV2aWV3Q29sbGFwc2VkO1xyXG4gICAgICAgIGlmICh0aGlzLmlzUHJldmlld0NvbGxhcHNlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnByZXZpZXdDb250YWluZXIuYWRkQ2xhc3MoJ2NvbGxhcHNlZCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJldmlld0NvbnRhaW5lci5yZW1vdmVDbGFzcygnY29sbGFwc2VkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0dXBSZXNpemVyKCkge1xyXG4gICAgICAgIGxldCBzdGFydFg6IG51bWJlcjtcclxuICAgICAgICBsZXQgc3RhcnRXaWR0aDogbnVtYmVyO1xyXG5cclxuICAgICAgICBjb25zdCBzdGFydFJlc2l6ZSA9IChlOiBNb3VzZUV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgc3RhcnRYID0gZS5wYWdlWDtcclxuICAgICAgICAgICAgc3RhcnRXaWR0aCA9IHBhcnNlSW50KGdldENvbXB1dGVkU3R5bGUodGhpcy5wcmV2aWV3Q29udGFpbmVyKS53aWR0aCwgMTApO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCByZXNpemUpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgc3RvcFJlc2l6ZSk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yID0gJ2NvbC1yZXNpemUnO1xyXG4gICAgICAgICAgICB0aGlzLnByZXZpZXdSZXNpemVyLmFkZENsYXNzKCdyZXNpemluZycpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnN0IHJlc2l6ZSA9IChlOiBNb3VzZUV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gc3RhcnRXaWR0aCAtIChlLnBhZ2VYIC0gc3RhcnRYKTtcclxuICAgICAgICAgICAgaWYgKHdpZHRoID49IDUwICYmIHdpZHRoIDw9IDgwMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcmV2aWV3Q29udGFpbmVyLnN0eWxlLndpZHRoID0gYCR7d2lkdGh9cHhgO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNQcmV2aWV3Q29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1ByZXZpZXdDb2xsYXBzZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXZpZXdDb250YWluZXIucmVtb3ZlQ2xhc3MoJ2NvbGxhcHNlZCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3Qgc3RvcFJlc2l6ZSA9ICgpID0+IHtcclxuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgcmVzaXplKTtcclxuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHN0b3BSZXNpemUpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvciA9ICcnO1xyXG4gICAgICAgICAgICB0aGlzLnByZXZpZXdSZXNpemVyLnJlbW92ZUNsYXNzKCdyZXNpemluZycpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMucHJldmlld1Jlc2l6ZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgc3RhcnRSZXNpemUpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaGlnaGxpZ2h0Rm9sZGVyKGZvbGRlcjogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50Rm9sZGVyID0gdGhpcy5jdXJyZW50Rm9sZGVyID09PSBmb2xkZXIgPyBudWxsIDogZm9sZGVyO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5ub3RlLWNhcmQnKS5mb3JFYWNoKGNhcmQgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBmb2xkZXJFbGVtZW50ID0gY2FyZC5xdWVyeVNlbGVjdG9yKCcubm90ZS1mb2xkZXInKTtcclxuICAgICAgICAgICAgY29uc3QgY2FyZEZvbGRlciA9IGZvbGRlckVsZW1lbnQgPyBmb2xkZXJFbGVtZW50LnRleHRDb250ZW50IDogbnVsbDtcclxuICAgICAgICAgICAgaWYgKGNhcmRGb2xkZXIpIHtcclxuICAgICAgICAgICAgICAgIGNhcmQudG9nZ2xlQ2xhc3MoJ2ZvbGRlci1oaWdobGlnaHQnLCBjYXJkRm9sZGVyID09PSBmb2xkZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyByZXZlYWxGb2xkZXJJbkV4cGxvcmVyKGZvbGRlcjogc3RyaW5nKSB7XHJcbiAgICAgICAgLy8gXHU4M0I3XHU1M0Q2XHU2NTg3XHU0RUY2XHU2RDRGXHU4OUM4XHU1NjY4XHU4OUM2XHU1NkZFXHJcbiAgICAgICAgY29uc3QgZmlsZUV4cGxvcmVyID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYXZlc09mVHlwZSgnZmlsZS1leHBsb3JlcicpWzBdO1xyXG4gICAgICAgIGlmIChmaWxlRXhwbG9yZXIpIHtcclxuICAgICAgICAgICAgY29uc3QgZmlsZUV4cGxvcmVyVmlldyA9IGZpbGVFeHBsb3Jlci52aWV3IGFzIGFueTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NTk4Mlx1Njc5Q1x1NjYyRlx1NjgzOVx1NzZFRVx1NUY1NVx1RkYwQ1x1NzZGNFx1NjNBNVx1NUM1NVx1NUYwMFx1NjgzOVx1NzZFRVx1NUY1NVxyXG4gICAgICAgICAgICBpZiAoZm9sZGVyID09PSAnXHU2ODM5XHU3NkVFXHU1RjU1Jykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGZpbGVFeHBsb3JlclZpZXcuZXhwYW5kRm9sZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgZmlsZUV4cGxvcmVyVmlldy5leHBhbmRGb2xkZXIoJy8nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gXHU1QzU1XHU1RjAwXHU1RTc2XHU5MDA5XHU0RTJEXHU2NTg3XHU0RUY2XHU1OTM5XHJcbiAgICAgICAgICAgIGlmIChmaWxlRXhwbG9yZXJWaWV3LmV4cGFuZEZvbGRlcikge1xyXG4gICAgICAgICAgICAgICAgLy8gXHU1QzU1XHU1RjAwXHU3MjM2XHU2NTg3XHU0RUY2XHU1OTM5XHU4REVGXHJcbiAgICAgICAgICAgICAgICBjb25zdCBmb2xkZXJQYXJ0cyA9IGZvbGRlci5zcGxpdCgnLycpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRQYXRoID0gJyc7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIFx1OTAxMFx1N0VBN1x1NUM1NVx1NUYwMFx1NjU4N1x1NEVGNlx1NTkzOVxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwYXJ0IG9mIGZvbGRlclBhcnRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFBhdGggKz0gKGN1cnJlbnRQYXRoID8gJy8nIDogJycpICsgcGFydDtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBmaWxlRXhwbG9yZXJWaWV3LmV4cGFuZEZvbGRlcihjdXJyZW50UGF0aCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gXHU5MDA5XHU0RTJEXHU3NkVFXHU2ODA3XHU2NTg3XHU0RUY2XHU1OTM5XHJcbiAgICAgICAgICAgICAgICBpZiAoZmlsZUV4cGxvcmVyVmlldy5zZXRTZWxlY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBmaWxlRXhwbG9yZXJWaWV3LnNldFNlbGVjdGlvbihmb2xkZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgY3JlYXRlTmV3Tm90ZSgpIHtcclxuICAgICAgICAvLyBcdTgzQjdcdTUzRDZcdTVGNTNcdTUyNERcdTY1RTVcdTY3MUZcdTRGNUNcdTRFM0FcdTlFRDhcdThCQTRcdTY1ODdcdTRFRjZcdTU0MERcclxuICAgICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoKTtcclxuICAgICAgICBjb25zdCBmaWxlTmFtZSA9IGBcdTY3MkFcdTU0N0RcdTU0MERcdTdCMTRcdThCQjAgJHtkYXRlLnRvTG9jYWxlU3RyaW5nKCkucmVwbGFjZSgvWy86XS9nLCAnLScpfWA7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgLy8gXHU1MjFCXHU1RUZBXHU2NUIwXHU3QjE0XHU4QkIwXHJcbiAgICAgICAgICAgIGNvbnN0IGZpbGUgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5jcmVhdGUoXHJcbiAgICAgICAgICAgICAgICBgJHtmaWxlTmFtZX0ubWRgLFxyXG4gICAgICAgICAgICAgICAgJyMgJyArIGZpbGVOYW1lICsgJ1xcblxcbidcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFx1NTcyOFx1NjVCMFx1NjgwN1x1N0I3RVx1OTg3NVx1NEUyRFx1NjI1M1x1NUYwMFx1N0IxNFx1OEJCMFxyXG4gICAgICAgICAgICBjb25zdCBsZWFmID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYWYoJ3RhYicpO1xyXG4gICAgICAgICAgICBhd2FpdCBsZWFmLm9wZW5GaWxlKGZpbGUpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU1MjM3XHU2NUIwXHU1MzYxXHU3MjQ3XHU4OUM2XHU1NkZFXHJcbiAgICAgICAgICAgIHRoaXMubG9hZE5vdGVzKCk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignXHU1MjFCXHU1RUZBXHU3QjE0XHU4QkIwXHU1OTMxXHU4RDI1OicsIGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjcmVhdGVUaW1lbGluZVZpZXcoKSB7XHJcbiAgICAgICAgY29uc3QgdGltZWxpbmVDb250YWluZXIgPSB0aGlzLmNvbnRhaW5lci5jcmVhdGVEaXYoJ3RpbWVsaW5lLWNvbnRhaW5lcicpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1ODNCN1x1NTNENlx1NjI0MFx1NjcwOVx1N0IxNFx1OEJCMFx1NUU3Nlx1NjMwOVx1NjVFNVx1NjcxRlx1NTIwNlx1N0VDNFxyXG4gICAgICAgIGNvbnN0IGZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xyXG4gICAgICAgIGNvbnN0IG5vdGVzQnlEYXRlID0gbmV3IE1hcDxzdHJpbmcsIFRGaWxlW10+KCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgZmlsZXMuZm9yRWFjaChmaWxlID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKGZpbGUuc3RhdC5tdGltZSkudG9Mb2NhbGVEYXRlU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIGlmICghbm90ZXNCeURhdGUuaGFzKGRhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICBub3Rlc0J5RGF0ZS5zZXQoZGF0ZSwgW10pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG5vdGVzID0gbm90ZXNCeURhdGUuZ2V0KGRhdGUpO1xyXG4gICAgICAgICAgICBpZiAobm90ZXMpIHtcclxuICAgICAgICAgICAgICAgIG5vdGVzLnB1c2goZmlsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gXHU2MzA5XHU2NUU1XHU2NzFGXHU2MzkyXHU1RThGXHJcbiAgICAgICAgY29uc3Qgc29ydGVkRGF0ZXMgPSBBcnJheS5mcm9tKG5vdGVzQnlEYXRlLmtleXMoKSkuc29ydCgoYSwgYikgPT4gXHJcbiAgICAgICAgICAgIG5ldyBEYXRlKGIpLmdldFRpbWUoKSAtIG5ldyBEYXRlKGEpLmdldFRpbWUoKVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIFx1NTIxQlx1NUVGQVx1NjVGNlx1OTVGNFx1OEY3NFxyXG4gICAgICAgIHNvcnRlZERhdGVzLmZvckVhY2goZGF0ZSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGVHcm91cCA9IHRpbWVsaW5lQ29udGFpbmVyLmNyZWF0ZURpdigndGltZWxpbmUtZGF0ZS1ncm91cCcpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gXHU1MjFCXHU1RUZBXHU2NUU1XHU2NzFGXHU4MjgyXHU3MEI5XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGVOb2RlID0gZGF0ZUdyb3VwLmNyZWF0ZURpdigndGltZWxpbmUtZGF0ZS1ub2RlJyk7XHJcbiAgICAgICAgICAgIGRhdGVOb2RlLmNyZWF0ZURpdigndGltZWxpbmUtbm9kZS1jaXJjbGUnKTtcclxuICAgICAgICAgICAgZGF0ZU5vZGUuY3JlYXRlRGl2KCd0aW1lbGluZS1kYXRlLWxhYmVsJykuc2V0VGV4dChkYXRlKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFx1NTIxQlx1NUVGQVx1N0IxNFx1OEJCMFx1NTIxN1x1ODg2OFxyXG4gICAgICAgICAgICBjb25zdCBub3Rlc0xpc3QgPSBkYXRlR3JvdXAuY3JlYXRlRGl2KCd0aW1lbGluZS1ub3Rlcy1saXN0Jyk7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vdGVzID0gbm90ZXNCeURhdGUuZ2V0KGRhdGUpO1xyXG4gICAgICAgICAgICBpZiAobm90ZXMpIHtcclxuICAgICAgICAgICAgICAgIG5vdGVzLmZvckVhY2goZmlsZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm90ZUl0ZW0gPSBub3Rlc0xpc3QuY3JlYXRlRGl2KCd0aW1lbGluZS1ub3RlLWl0ZW0nKTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAvLyBcdTUyMUJcdTVFRkFcdTY4MDdcdThCQjBcdTdFQkZcclxuICAgICAgICAgICAgICAgICAgICBub3RlSXRlbS5jcmVhdGVEaXYoJ3RpbWVsaW5lLW5vdGUtbWFya2VyJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU1MjFCXHU1RUZBXHU3QjE0XHU4QkIwXHU1MTg1XHU1QkI5XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm90ZUNvbnRlbnQgPSBub3RlSXRlbS5jcmVhdGVEaXYoJ3RpbWVsaW5lLW5vdGUtY29udGVudCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5vdGVDb250ZW50LmNyZWF0ZURpdigndGltZWxpbmUtbm90ZS10aXRsZScpLnNldFRleHQoZmlsZS5iYXNlbmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHU2REZCXHU1MkEwXHU3MEI5XHU1MUZCXHU0RThCXHU0RUY2XHJcbiAgICAgICAgICAgICAgICAgICAgbm90ZUl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxlYWYgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhZigndGFiJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGxlYWYub3BlbkZpbGUoZmlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1NkRGQlx1NTJBMFx1OTg4NFx1ODlDOFx1NTI5Rlx1ODBGRFxyXG4gICAgICAgICAgICAgICAgICAgIG5vdGVJdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByZXZpZXdDb250YWluZXIuZW1wdHkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5yZWFkKGZpbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgTWFya2Rvd25SZW5kZXJlci5yZW5kZXJNYXJrZG93bihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJldmlld0NvbnRhaW5lcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlLnBhdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1x1OTg4NFx1ODlDOFx1NTJBMFx1OEY3RFx1NTkzMVx1OEQyNTonLCBlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gXHU2REZCXHU1MkEwXHU1M0YzXHU5NTJFXHU4M0RDXHU1MzU1XHU1MjlGXHU4MEZEXHJcbiAgICBwcml2YXRlIGFkZENvbnRleHRNZW51KGNhcmQ6IEhUTUxFbGVtZW50LCBmaWxlOiBURmlsZSkge1xyXG4gICAgICAgIGNhcmQuYWRkRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgY29uc3QgbWVudSA9IG5ldyBNZW51KHRoaXMuYXBwKTtcclxuXHJcbiAgICAgICAgICAgIG1lbnUuYWRkSXRlbSgoaXRlbSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaXRlbVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRUaXRsZShcIlx1NTcyOFx1NjVCMFx1NjgwN1x1N0I3RVx1OTg3NVx1NjI1M1x1NUYwMFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRJY29uKFwibGlua1wiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGVhZiA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWFmKCd0YWInKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgbGVhZi5vcGVuRmlsZShmaWxlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBtZW51LmFkZEl0ZW0oKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgICAgIGl0ZW1cclxuICAgICAgICAgICAgICAgICAgICAuc2V0VGl0bGUoXCJcdTU3MjhcdTY1ODdcdTRFRjZcdTdCQTFcdTc0MDZcdTU2NjhcdTRFMkRcdTY2M0VcdTc5M0FcIilcclxuICAgICAgICAgICAgICAgICAgICAuc2V0SWNvbihcImZvbGRlclwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXZlYWxGb2xkZXJJbkV4cGxvcmVyKGZpbGUucGFyZW50Py5wYXRoIHx8ICcvJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgbWVudS5hZGRJdGVtKChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFRpdGxlKFwiXHU3OUZCXHU1MkE4XHU3QjE0XHU4QkIwXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldEljb24oXCJtb3ZlXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtb2RhbCA9IG5ldyBGaWxlU2VsZWN0aW9uTW9kYWwodGhpcy5hcHAsIGZpbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RhbC5vcGVuKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgbWVudS5hZGRJdGVtKChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldFRpdGxlKFwiXHU1MjIwXHU5NjY0XHU3QjE0XHU4QkIwXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNldEljb24oXCJ0cmFzaFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29uZmlybSA9IGF3YWl0IG5ldyBDb25maXJtTW9kYWwoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXHU3ODZFXHU4QkE0XHU1MjIwXHU5NjY0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgXHU2NjJGXHU1NDI2XHU3ODZFXHU1QjlBXHU4OTgxXHU1MjIwXHU5NjY0XHU3QjE0XHU4QkIwIFwiJHtmaWxlLmJhc2VuYW1lfVwiXHVGRjFGYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICApLnNob3coKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb25maXJtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFwcC52YXVsdC50cmFzaChmaWxlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaFZpZXcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIG1lbnUuc2hvd0F0TW91c2VFdmVudChldmVudCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gXHU1MjM3XHU2NUIwXHU4OUM2XHU1NkZFXHVGRjA4XHU3NTI4XHU0RThFXHU2NDFDXHU3RDIyXHU1NDhDXHU4RkM3XHU2RUU0XHVGRjA5XHJcbiAgICBwcml2YXRlIGFzeW5jIHJlZnJlc2hWaWV3KCkge1xyXG4gICAgICAgIGNvbnN0IGZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyLmVtcHR5KCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGZpbHRlcmVkRmlsZXMgPSBmaWxlcy5maWx0ZXIoZmlsZSA9PiB7XHJcbiAgICAgICAgICAgIC8vIFx1NjQxQ1x1N0QyMlx1OEZDN1x1NkVFNFxyXG4gICAgICAgICAgICBjb25zdCBtYXRjaGVzU2VhcmNoID0gIXRoaXMuY3VycmVudFNlYXJjaFRlcm0gfHwgXHJcbiAgICAgICAgICAgICAgICBmaWxlLmJhc2VuYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXModGhpcy5jdXJyZW50U2VhcmNoVGVybS50b0xvd2VyQ2FzZSgpKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFx1NjgwN1x1N0I3RVx1OEZDN1x1NkVFNFxyXG4gICAgICAgICAgICBsZXQgbWF0Y2hlc1RhZ3MgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZFRhZ3Muc2l6ZSA+IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNhY2hlID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk7XHJcbiAgICAgICAgICAgICAgICBtYXRjaGVzVGFncyA9IGNhY2hlPy50YWdzPy5zb21lKHQgPT4gdGhpcy5zZWxlY3RlZFRhZ3MuaGFzKHQudGFnKSkgPz8gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBtYXRjaGVzU2VhcmNoICYmIG1hdGNoZXNUYWdzO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBmaWx0ZXJlZEZpbGVzLmZvckVhY2goZmlsZSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhcmQgPSB0aGlzLmNyZWF0ZU5vdGVDYXJkKGZpbGUpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZChjYXJkKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBcdTZERkJcdTUyQTBcdTY4MDdcdTdCN0VcdTUyMDdcdTYzNjJcdTY1QjlcdTZDRDVcclxuICAgIHByaXZhdGUgdG9nZ2xlVGFnKHRhZzogc3RyaW5nLCB0YWdCdG46IEhUTUxFbGVtZW50KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRUYWdzLmhhcyh0YWcpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRUYWdzLmRlbGV0ZSh0YWcpO1xyXG4gICAgICAgICAgICB0YWdCdG4ucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRUYWdzLmFkZCh0YWcpO1xyXG4gICAgICAgICAgICB0YWdCdG4uYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gXHU1M0Q2XHU2RDg4IFwiQWxsXCIgXHU2ODA3XHU3QjdFXHU3Njg0XHU5MDA5XHU0RTJEXHU3MkI2XHU2MDAxXHJcbiAgICAgICAgY29uc3QgYWxsQnRuID0gdGhpcy50YWdDb250YWluZXIucXVlcnlTZWxlY3RvcignYnV0dG9uJyk7XHJcbiAgICAgICAgaWYgKGFsbEJ0bikge1xyXG4gICAgICAgICAgICBhbGxCdG4ucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5yZWZyZXNoVmlldygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFx1NkRGQlx1NTJBMFx1NkUwNVx1OTY2NFx1NjgwN1x1N0I3RVx1OTAwOVx1NjJFOVx1NjVCOVx1NkNENVxyXG4gICAgcHJpdmF0ZSBjbGVhclRhZ1NlbGVjdGlvbigpIHtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkVGFncy5jbGVhcigpO1xyXG4gICAgICAgIHRoaXMudGFnQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy50YWctYnRuJykuZm9yRWFjaChidG4gPT4ge1xyXG4gICAgICAgICAgICBidG4ucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBcdTZERkJcdTUyQTBcdTY1ODdcdTRFRjZcdTkwMDlcdTYyRTlcdTZBMjFcdTYwMDFcdTY4NDZcclxuY2xhc3MgRmlsZVNlbGVjdGlvbk1vZGFsIGV4dGVuZHMgTW9kYWwge1xyXG4gICAgcHJpdmF0ZSBmaWxlOiBURmlsZTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgZmlsZTogVEZpbGUpIHtcclxuICAgICAgICBzdXBlcihhcHApO1xyXG4gICAgICAgIHRoaXMuZmlsZSA9IGZpbGU7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgb25PcGVuKCkge1xyXG4gICAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG4gICAgICAgIGNvbnRlbnRFbC5jcmVhdGVFbCgnaDMnLCB7IHRleHQ6ICdcdTkwMDlcdTYyRTlcdTc2RUVcdTY4MDdcdTY1ODdcdTRFRjZcdTU5MzknIH0pO1xyXG5cclxuICAgICAgICBjb25zdCBmb2xkZXJMaXN0ID0gY29udGVudEVsLmNyZWF0ZURpdignZm9sZGVyLWxpc3QnKTtcclxuICAgICAgICBjb25zdCBmb2xkZXJzID0gdGhpcy5nZXRGb2xkZXJzKCk7XHJcblxyXG4gICAgICAgIGZvbGRlcnMuZm9yRWFjaChmb2xkZXIgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBpdGVtID0gZm9sZGVyTGlzdC5jcmVhdGVEaXYoJ2ZvbGRlci1pdGVtJyk7XHJcbiAgICAgICAgICAgIGl0ZW0uc2V0VGV4dChmb2xkZXIpO1xyXG4gICAgICAgICAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5tb3ZlRmlsZShmb2xkZXIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldEZvbGRlcnMoKTogc3RyaW5nW10ge1xyXG4gICAgICAgIGNvbnN0IGZvbGRlcnMgPSBuZXcgU2V0PHN0cmluZz4oKTtcclxuICAgICAgICB0aGlzLmFwcC52YXVsdC5nZXRBbGxMb2FkZWRGaWxlcygpLmZvckVhY2goZmlsZSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZvbGRlcikge1xyXG4gICAgICAgICAgICAgICAgZm9sZGVycy5hZGQoZmlsZS5wYXRoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKGZvbGRlcnMpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgbW92ZUZpbGUodGFyZ2V0Rm9sZGVyOiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCBuZXdQYXRoID0gYCR7dGFyZ2V0Rm9sZGVyfS8ke3RoaXMuZmlsZS5uYW1lfWA7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5hcHAuZmlsZU1hbmFnZXIucmVuYW1lRmlsZSh0aGlzLmZpbGUsIG5ld1BhdGgpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uQ2xvc2UoKSB7XHJcbiAgICAgICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XHJcbiAgICAgICAgY29udGVudEVsLmVtcHR5KCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIFx1NkRGQlx1NTJBMFx1Nzg2RVx1OEJBNFx1NUJGOVx1OEJERFx1Njg0NlxyXG5jbGFzcyBDb25maXJtTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XHJcbiAgICBwcml2YXRlIHJlc3VsdDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSByZXNvbHZlUHJvbWlzZTogKHZhbHVlOiBib29sZWFuKSA9PiB2b2lkO1xyXG4gICAgcHJpdmF0ZSB0aXRsZTogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBtZXNzYWdlOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHRpdGxlOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKGFwcCk7XHJcbiAgICAgICAgdGhpcy50aXRsZSA9IHRpdGxlO1xyXG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgc2hvdygpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XHJcbiAgICAgICAgICAgIHRoaXMub3BlbigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG9uT3BlbigpIHtcclxuICAgICAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcclxuICAgICAgICBjb250ZW50RWwuY3JlYXRlRWwoJ2gzJywgeyB0ZXh0OiB0aGlzLnRpdGxlIH0pO1xyXG4gICAgICAgIGNvbnRlbnRFbC5jcmVhdGVFbCgncCcsIHsgdGV4dDogdGhpcy5tZXNzYWdlIH0pO1xyXG5cclxuICAgICAgICBjb25zdCBidXR0b25Db250YWluZXIgPSBjb250ZW50RWwuY3JlYXRlRGl2KCdidXR0b24tY29udGFpbmVyJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgY29uZmlybUJ1dHRvbiA9IGJ1dHRvbkNvbnRhaW5lci5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnXHU3ODZFXHU4QkE0JyB9KTtcclxuICAgICAgICBjb25maXJtQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJlc3VsdCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgY2FuY2VsQnV0dG9uID0gYnV0dG9uQ29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdcdTUzRDZcdTZEODgnIH0pO1xyXG4gICAgICAgIGNhbmNlbEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yZXN1bHQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG9uQ2xvc2UoKSB7XHJcbiAgICAgICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XHJcbiAgICAgICAgY29udGVudEVsLmVtcHR5KCk7XHJcbiAgICAgICAgdGhpcy5yZXNvbHZlUHJvbWlzZSh0aGlzLnJlc3VsdCk7XHJcbiAgICB9XHJcbn0gIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUEsdUJBQTZFOzs7QUNBN0Usc0JBVU87QUFHQSxJQUFNLGlCQUFpQjtBQUV2Qiw2QkFBdUIseUJBQVM7QUFBQSxFQW1CbkMsWUFBWSxNQUFxQixRQUF3QjtBQUNyRCxVQUFNO0FBWkYsOEJBQThCO0FBQzlCLHlCQUErQjtBQUUvQiw2QkFBNEI7QUFDNUIsd0JBQTRCLElBQUk7QUFTcEMsU0FBSyxTQUFTO0FBQ2QsU0FBSyxjQUFjLE9BQU8sU0FBUztBQUFBO0FBQUEsRUFPdkMsY0FBc0I7QUFDbEIsV0FBTztBQUFBO0FBQUEsRUFPWCxpQkFBeUI7QUFDckIsV0FBTztBQUFBO0FBQUEsUUFPTCxTQUFTO0FBQ1gsVUFBTSxFQUFFLGdCQUFnQjtBQUN4QixnQkFBWTtBQUNaLGdCQUFZLFNBQVM7QUFHckIsVUFBTSxVQUFVLFlBQVksVUFBVTtBQUd0QyxVQUFNLFlBQVksUUFBUSxVQUFVO0FBR3BDLFVBQU0sYUFBYSxVQUFVLFNBQVMsVUFBVTtBQUFBLE1BQzVDLEtBQUs7QUFBQTtBQUVULGVBQVcsWUFBWTtBQUFBO0FBQUE7QUFBQTtBQUl2QixlQUFXLGlCQUFpQixTQUFTLE1BQU0sS0FBSztBQUdoRCxVQUFNLGVBQWUsVUFBVSxVQUFVO0FBQ3pDLFNBQUssbUJBQW1CO0FBR3hCLFVBQU0sa0JBQWtCLFFBQVEsVUFBVTtBQUMxQyxTQUFLLGNBQWMsZ0JBQWdCLFNBQVMsU0FBUztBQUFBLE1BQ2pELE1BQU07QUFBQSxNQUNOLGFBQWE7QUFBQSxNQUNiLEtBQUs7QUFBQTtBQUdULFNBQUssWUFBWSxpQkFBaUIs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
