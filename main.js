/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// main.ts
__export(exports, {
  default: () => CardViewPlugin
});
var import_obsidian2 = __toModule(require("obsidian"));

// cardView.ts
var import_obsidian = __toModule(require("obsidian"));
var VIEW_TYPE_CARD = "card-view";
var CardView = class extends import_obsidian.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.isPreviewCollapsed = false;
    this.currentFolder = null;
    this.currentSearchTerm = "";
    this.selectedTags = new Set();
    this.plugin = plugin;
    this.currentView = plugin.settings.defaultView;
  }
  getViewType() {
    return VIEW_TYPE_CARD;
  }
  getDisplayText() {
    return "\u5361\u7247\u89C6\u56FE";
  }
  async onOpen() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.addClass("card-view-container");
    const toolbar = containerEl.createDiv("card-view-toolbar");
    const leftTools = toolbar.createDiv("toolbar-left");
    const newNoteBtn = leftTools.createEl("button", {
      cls: "new-note-button"
    });
    newNoteBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-plus"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>
            <span>\u65B0\u5EFA\u7B14\u8BB0</span>
        `;
    newNoteBtn.addEventListener("click", () => this.createNewNote());
    const viewSwitcher = leftTools.createDiv("view-switcher");
    this.createViewSwitcher(viewSwitcher);
    const searchContainer = toolbar.createDiv("search-container");
    this.searchInput = searchContainer.createEl("input", {
      type: "text",
      placeholder: "\u641C\u7D22\u7B14\u8BB0...",
      cls: "search-input"
    });
    this.searchInput.addEventListener("input", () => {
      this.currentSearchTerm = this.searchInput.value;
      this.refreshView();
    });
    this.tagContainer = containerEl.createDiv("tag-filter");
    await this.loadTags();
    const contentArea = containerEl.createDiv("card-view-content");
    this.container = contentArea.createDiv("card-container");
    const previewWrapper = containerEl.createDiv("preview-wrapper");
    this.previewContainer = previewWrapper.createDiv("preview-container");
    const previewControls = previewWrapper.createDiv("preview-controls");
    const toggleButton = previewControls.createEl("button", {
      cls: "preview-toggle",
      attr: { "aria-label": "\u6298\u53E0\u9884\u89C8" }
    });
    toggleButton.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-right"><polyline points="9 18 15 12 9 6"></polyline></svg>`;
    toggleButton.addEventListener("click", () => this.togglePreview());
    this.previewResizer = previewWrapper.createDiv("preview-resizer");
    this.setupResizer();
    await this.loadNotes();
  }
  async loadTags() {
    const tags = this.getAllTags();
    const allTagBtn = this.tagContainer.createEl("button", {
      text: "All",
      cls: "tag-btn active"
    });
    allTagBtn.addEventListener("click", () => {
      this.clearTagSelection();
      allTagBtn.addClass("active");
      this.refreshView();
    });
    tags.forEach((tag) => {
      const tagBtn = this.tagContainer.createEl("button", {
        text: tag,
        cls: "tag-btn"
      });
      tagBtn.addEventListener("click", (e) => {
        e.stopPropagation();
        this.toggleTag(tag, tagBtn);
      });
    });
  }
  getAllTags() {
    const tags = new Set();
    this.app.vault.getMarkdownFiles().forEach((file) => {
      const cache = this.app.metadataCache.getFileCache(file);
      if (cache == null ? void 0 : cache.tags) {
        cache.tags.forEach((tag) => tags.add(tag.tag));
      }
    });
    return Array.from(tags);
  }
  createViewSwitcher(container) {
    const views = [
      { id: "card", icon: "grid", text: "\u5361\u7247\u89C6\u56FE" },
      { id: "list", icon: "list", text: "\u5217\u8868\u89C6\u56FE" },
      { id: "timeline", icon: "clock", text: "\u65F6\u95F4\u8F74\u89C6\u56FE" }
    ];
    views.forEach((view) => {
      const btn = container.createEl("button", {
        cls: `view-switch-btn ${view.id === this.currentView ? "active" : ""}`
      });
      const iconHtml = {
        "grid": '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="7" height="7"></rect><rect x="14" y="3" width="7" height="7"></rect><rect x="14" y="14" width="7" height="7"></rect><rect x="3" y="14" width="7" height="7"></rect></svg>',
        "list": '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="8" y1="6" x2="21" y2="6"></line><line x1="8" y1="12" x2="21" y2="12"></line><line x1="8" y1="18" x2="21" y2="18"></line><line x1="3" y1="6" x2="3.01" y2="6"></line><line x1="3" y1="12" x2="3.01" y2="12"></line><line x1="3" y1="18" x2="3.01" y2="18"></line></svg>',
        "clock": '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><polyline points="12 6 12 12 16 14"></polyline></svg>'
      };
      const iconSpan = btn.createSpan({ cls: "view-switch-icon" });
      iconSpan.innerHTML = iconHtml[view.icon];
      btn.createSpan({ text: view.text, cls: "view-switch-text" });
      btn.addEventListener("click", () => {
        container.querySelectorAll(".view-switch-btn").forEach((b) => b.removeClass("active"));
        btn.addClass("active");
        this.switchView(view.id);
      });
    });
  }
  async loadNotes() {
    const files = this.app.vault.getMarkdownFiles();
    this.container.empty();
    const cards = await Promise.all(files.map((file) => this.createNoteCard(file)));
    cards.forEach((card) => {
      this.container.appendChild(card);
    });
  }
  async createNoteCard(file) {
    const card = document.createElement("div");
    card.addClass("note-card");
    const header = card.createDiv("note-card-header");
    const lastModified = header.createDiv("note-date");
    lastModified.setText(new Date(file.stat.mtime).toLocaleDateString());
    const folderPath = header.createDiv("note-folder");
    const folder = file.parent ? file.parent.path === "/" ? "\u6839\u76EE\u5F55" : file.parent.path : "\u6839\u76EE\u5F55";
    folderPath.setText(folder);
    folderPath.setAttribute("title", folder);
    const cardContent = card.createDiv("note-card-content");
    try {
      const content = await this.app.vault.read(file);
      const noteContent = cardContent.createDiv("note-content");
      await import_obsidian.MarkdownRenderer.renderMarkdown(content, noteContent, file.path, this);
      noteContent.addEventListener("wheel", (e) => {
        e.stopPropagation();
        const scrollAmount = e.deltaY;
        noteContent.scrollTop += scrollAmount;
      });
      card.addEventListener("mouseenter", async () => {
        try {
          this.previewContainer.empty();
          await import_obsidian.MarkdownRenderer.renderMarkdown(content, this.previewContainer, file.path, this);
        } catch (error) {
          console.error("\u9884\u89C8\u52A0\u8F7D\u5931\u8D25:", error);
        }
      });
      card.addEventListener("click", async () => {
        const leaf = this.app.workspace.getLeaf("tab");
        await leaf.openFile(file);
      });
      this.addContextMenu(card, file);
    } catch (error) {
      console.error("\u7B14\u8BB0\u52A0\u8F7D\u5931\u8D25:", error);
    }
    return card;
  }
  switchView(view) {
    this.currentView = view;
    this.container.setAttribute("data-view", view);
    this.container.empty();
    if (view === "timeline") {
      this.createTimelineView();
    } else {
      this.loadNotes();
    }
  }
  async filterByTag(tag) {
    const files = this.app.vault.getMarkdownFiles();
    this.container.empty();
    const filteredFiles = files.filter((file) => {
      var _a;
      const cache = this.app.metadataCache.getFileCache(file);
      return (_a = cache == null ? void 0 : cache.tags) == null ? void 0 : _a.some((t) => t.tag === tag);
    });
    const cards = await Promise.all(filteredFiles.map((file) => this.createNoteCard(file)));
    cards.forEach((card) => {
      this.container.appendChild(card);
    });
    this.tagContainer.querySelectorAll("button").forEach((btn) => {
      if (btn.textContent === tag) {
        btn.addClass("active-tag");
      } else {
        btn.removeClass("active-tag");
      }
    });
  }
  togglePreview() {
    this.isPreviewCollapsed = !this.isPreviewCollapsed;
    if (this.isPreviewCollapsed) {
      this.previewContainer.addClass("collapsed");
    } else {
      this.previewContainer.removeClass("collapsed");
    }
  }
  setupResizer() {
    let startX;
    let startWidth;
    const startResize = (e) => {
      e.preventDefault();
      startX = e.pageX;
      startWidth = parseInt(getComputedStyle(this.previewContainer).width, 10);
      document.addEventListener("mousemove", resize);
      document.addEventListener("mouseup", stopResize);
      document.body.style.cursor = "col-resize";
      this.previewResizer.addClass("resizing");
    };
    const resize = (e) => {
      const width = startWidth - (e.pageX - startX);
      if (width >= 50 && width <= 800) {
        this.previewContainer.style.width = `${width}px`;
        if (this.isPreviewCollapsed) {
          this.isPreviewCollapsed = false;
          this.previewContainer.removeClass("collapsed");
        }
      }
    };
    const stopResize = () => {
      document.removeEventListener("mousemove", resize);
      document.removeEventListener("mouseup", stopResize);
      document.body.style.cursor = "";
      this.previewResizer.removeClass("resizing");
    };
    this.previewResizer.addEventListener("mousedown", startResize);
  }
  highlightFolder(folder) {
    this.currentFolder = this.currentFolder === folder ? null : folder;
    this.container.querySelectorAll(".note-card").forEach((card) => {
      const folderElement = card.querySelector(".note-folder");
      const cardFolder = folderElement ? folderElement.textContent : null;
      if (cardFolder) {
        card.toggleClass("folder-highlight", cardFolder === folder);
      }
    });
  }
  async revealFolderInExplorer(folder) {
    const fileExplorer = this.app.workspace.getLeavesOfType("file-explorer")[0];
    if (fileExplorer) {
      const fileExplorerView = fileExplorer.view;
      if (folder === "\u6839\u76EE\u5F55") {
        if (fileExplorerView.expandFolder) {
          await fileExplorerView.expandFolder("/");
        }
        return;
      }
      if (fileExplorerView.expandFolder) {
        const folderParts = folder.split("/");
        let currentPath = "";
        for (const part of folderParts) {
          currentPath += (currentPath ? "/" : "") + part;
          await fileExplorerView.expandFolder(currentPath);
        }
        if (fileExplorerView.setSelection) {
          await fileExplorerView.setSelection(folder);
        }
      }
    }
  }
  async createNewNote() {
    const date = new Date();
    const fileName = `\u672A\u547D\u540D\u7B14\u8BB0 ${date.toLocaleString().replace(/[/:]/g, "-")}`;
    try {
      const file = await this.app.vault.create(`${fileName}.md`, "# " + fileName + "\n\n");
      const leaf = this.app.workspace.getLeaf("tab");
      await leaf.openFile(file);
      this.loadNotes();
    } catch (error) {
      console.error("\u521B\u5EFA\u7B14\u8BB0\u5931\u8D25:", error);
    }
  }
  async createTimelineView() {
    const timelineContainer = this.container.createDiv("timeline-container");
    const files = this.app.vault.getMarkdownFiles();
    const notesByDate = new Map();
    files.forEach((file) => {
      const date = new Date(file.stat.mtime).toLocaleDateString();
      if (!notesByDate.has(date)) {
        notesByDate.set(date, []);
      }
      const notes = notesByDate.get(date);
      if (notes) {
        notes.push(file);
      }
    });
    const sortedDates = Array.from(notesByDate.keys()).sort((a, b) => new Date(b).getTime() - new Date(a).getTime());
    for (const date of sortedDates) {
      const dateGroup = timelineContainer.createDiv("timeline-date-group");
      const dateNode = dateGroup.createDiv("timeline-date-node");
      dateNode.createDiv("timeline-node-circle");
      dateNode.createDiv("timeline-date-label").setText(date);
      const notesList = dateGroup.createDiv("timeline-notes-list");
      const notes = notesByDate.get(date);
      if (notes) {
        for (const file of notes) {
          const noteItem = notesList.createDiv("timeline-note-item");
          noteItem.createDiv("timeline-note-marker");
          const noteContent = noteItem.createDiv("timeline-note-content");
          noteContent.createDiv("timeline-note-title").setText(file.basename);
          noteItem.addEventListener("click", async () => {
            const leaf = this.app.workspace.getLeaf("tab");
            await leaf.openFile(file);
          });
          noteItem.addEventListener("mouseenter", async () => {
            try {
              this.previewContainer.empty();
              const content = await this.app.vault.read(file);
              await import_obsidian.MarkdownRenderer.renderMarkdown(content, this.previewContainer, file.path, this);
            } catch (error) {
              console.error("\u9884\u89C8\u52A0\u8F7D\u5931\u8D25:", error);
            }
          });
        }
      }
    }
  }
  addContextMenu(card, file) {
    card.addEventListener("contextmenu", (event) => {
      event.preventDefault();
      const menu = new import_obsidian.Menu(this.app);
      menu.addItem((item) => {
        item.setTitle("\u5728\u65B0\u6807\u7B7E\u9875\u6253\u5F00").setIcon("link").onClick(async () => {
          const leaf = this.app.workspace.getLeaf("tab");
          await leaf.openFile(file);
        });
      });
      menu.addItem((item) => {
        item.setTitle("\u5728\u6587\u4EF6\u7BA1\u7406\u5668\u4E2D\u663E\u793A").setIcon("folder").onClick(() => {
          var _a;
          this.revealFolderInExplorer(((_a = file.parent) == null ? void 0 : _a.path) || "/");
        });
      });
      menu.addItem((item) => {
        item.setTitle("\u79FB\u52A8\u7B14\u8BB0").setIcon("move").onClick(async () => {
          const modal = new FileSelectionModal(this.app, file);
          modal.open();
        });
      });
      menu.addItem((item) => {
        item.setTitle("\u5220\u9664\u7B14\u8BB0").setIcon("trash").onClick(async () => {
          const confirm = await new ConfirmModal(this.app, "\u786E\u8BA4\u5220\u9664", `\u662F\u5426\u786E\u5B9A\u8981\u5220\u9664\u7B14\u8BB0 "${file.basename}"\uFF1F`).show();
          if (confirm) {
            await this.app.vault.trash(file, true);
            this.refreshView();
          }
        });
      });
      menu.showAtMouseEvent(event);
    });
  }
  async refreshView() {
    const files = this.app.vault.getMarkdownFiles();
    this.container.empty();
    const filteredFiles = files.filter((file) => {
      var _a, _b;
      const matchesSearch = !this.currentSearchTerm || file.basename.toLowerCase().includes(this.currentSearchTerm.toLowerCase());
      let matchesTags = true;
      if (this.selectedTags.size > 0) {
        const cache = this.app.metadataCache.getFileCache(file);
        matchesTags = (_b = (_a = cache == null ? void 0 : cache.tags) == null ? void 0 : _a.some((t) => this.selectedTags.has(t.tag))) != null ? _b : false;
      }
      return matchesSearch && matchesTags;
    });
    const cards = await Promise.all(filteredFiles.map((file) => this.createNoteCard(file)));
    cards.forEach((card) => {
      this.container.appendChild(card);
    });
  }
  toggleTag(tag, tagBtn) {
    if (this.selectedTags.has(tag)) {
      this.selectedTags.delete(tag);
      tagBtn.removeClass("active");
    } else {
      this.selectedTags.add(tag);
      tagBtn.addClass("active");
    }
    const allBtn = this.tagContainer.querySelector("button");
    if (allBtn) {
      allBtn.removeClass("active");
    }
    this.refreshView();
  }
  clearTagSelection() {
    this.selectedTags.clear();
    this.tagContainer.querySelectorAll(".tag-btn").forEach((btn) => {
      btn.removeClass("active");
    });
  }
};
var FileSelectionModal = class extends import_obsidian.Modal {
  constructor(app, file) {
    super(app);
    this.file = file;
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h3", { text: "\u9009\u62E9\u76EE\u6807\u6587\u4EF6\u5939" });
    const folderList = contentEl.createDiv("folder-list");
    const folders = this.getFolders();
    folders.forEach((folder) => {
      const item = folderList.createDiv("folder-item");
      item.setText(folder);
      item.addEventListener("click", async () => {
        await this.moveFile(folder);
        this.close();
      });
    });
  }
  getFolders() {
    const folders = new Set();
    this.app.vault.getAllLoadedFiles().forEach((file) => {
      if (file instanceof import_obsidian.TFolder) {
        folders.add(file.path);
      }
    });
    return Array.from(folders);
  }
  async moveFile(targetFolder) {
    const newPath = `${targetFolder}/${this.file.name}`;
    await this.app.fileManager.renameFile(this.file, newPath);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var ConfirmModal = class extends import_obsidian.Modal {
  constructor(app, title, message) {
    super(app);
    this.result = false;
    this.title = title;
    this.message = message;
  }
  async show() {
    return new Promise((resolve) => {
      this.resolvePromise = resolve;
      this.open();
    });
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h3", { text: this.title });
    contentEl.createEl("p", { text: this.message });
    const buttonContainer = contentEl.createDiv("button-container");
    const confirmButton = buttonContainer.createEl("button", { text: "\u786E\u8BA4" });
    confirmButton.addEventListener("click", () => {
      this.result = true;
      this.close();
    });
    const cancelButton = buttonContainer.createEl("button", { text: "\u53D6\u6D88" });
    cancelButton.addEventListener("click", () => {
      this.result = false;
      this.close();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    this.resolvePromise(this.result);
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  defaultView: "card"
};
var CardViewSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian2.Setting(containerEl).setName("\u9ED8\u8BA4\u89C6\u56FE").setDesc("\u9009\u62E9\u9ED8\u8BA4\u7684\u89C6\u56FE\u6A21\u5F0F").addDropdown((dropdown) => {
      dropdown.addOption("card", "\u5361\u7247\u89C6\u56FE").addOption("list", "\u5217\u8868\u89C6\u56FE").addOption("timeline", "\u65F6\u95F4\u8F74\u89C6\u56FE").setValue(this.plugin.settings.defaultView);
      dropdown.onChange(async (value) => {
        if (value === "card" || value === "list" || value === "timeline") {
          this.plugin.settings.defaultView = value;
          await this.plugin.saveSettings();
        }
      });
      return dropdown;
    });
  }
};
var CardViewPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView(VIEW_TYPE_CARD, (leaf) => new CardView(leaf, this));
    this.addRibbonIcon("layout-grid", "\u5361\u7247\u89C6\u56FE", () => {
      this.activateView();
    });
    this.addSettingTab(new CardViewSettingTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf = workspace.getLeavesOfType(VIEW_TYPE_CARD)[0];
    if (!leaf) {
      leaf = workspace.getLeaf("tab");
      await leaf.setViewState({
        type: VIEW_TYPE_CARD,
        active: true
      });
    }
    workspace.revealLeaf(leaf);
  }
};
//# sourceMappingURL=data:application/json;base64,
