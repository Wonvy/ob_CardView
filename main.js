/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// main.ts
__export(exports, {
  default: () => CardViewPlugin
});
var import_obsidian2 = __toModule(require("obsidian"));

// cardView.ts
var import_obsidian = __toModule(require("obsidian"));
var VIEW_TYPE_CARD = "card-view";
var CardView = class extends import_obsidian.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.isPreviewCollapsed = false;
    this.currentFolder = null;
    this.currentSearchTerm = "";
    this.selectedTags = new Set();
    this.selectedNotes = new Set();
    this.lastSelectedNote = null;
    this.recentFolders = [];
    this.cardSize = 280;
    this.MIN_CARD_SIZE = 280;
    this.MAX_CARD_SIZE = 600;
    this.plugin = plugin;
    this.currentView = plugin.settings.defaultView;
  }
  getViewType() {
    return VIEW_TYPE_CARD;
  }
  getDisplayText() {
    return "\u5361\u7247\u89C6\u56FE";
  }
  async onOpen() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.addClass("card-view-container");
    const toolbar = containerEl.createDiv("card-view-toolbar");
    const leftTools = toolbar.createDiv("toolbar-left");
    const newNoteBtn = leftTools.createEl("button", {
      cls: "new-note-button"
    });
    newNoteBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-plus"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>
            <span>\u65B0\u5EFA\u7B14\u8BB0</span>
        `;
    newNoteBtn.addEventListener("click", () => this.createNewNote());
    const viewSwitcher = leftTools.createDiv("view-switcher");
    this.createViewSwitcher(viewSwitcher);
    const searchContainer = toolbar.createDiv("search-container");
    this.searchInput = searchContainer.createEl("input", {
      type: "text",
      placeholder: "\u641C\u7D22\u7B14\u8BB0...",
      cls: "search-input"
    });
    this.searchInput.addEventListener("input", () => {
      this.currentSearchTerm = this.searchInput.value;
      this.refreshView();
    });
    this.tagContainer = containerEl.createDiv("tag-filter");
    await this.loadTags();
    const contentArea = containerEl.createDiv("card-view-content");
    this.container = contentArea.createDiv("card-container");
    this.cardSize = this.plugin.settings.cardWidth;
    this.container.style.gridTemplateColumns = `repeat(auto-fill, ${this.cardSize}px)`;
    const previewWrapper = containerEl.createDiv("preview-wrapper");
    this.previewContainer = previewWrapper.createDiv("preview-container");
    const previewControls = previewWrapper.createDiv("preview-controls");
    const toggleButton = previewControls.createEl("button", {
      cls: "preview-toggle",
      attr: { "aria-label": "\u6298\u53E0\u9884\u89C8" }
    });
    toggleButton.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-right"><polyline points="9 18 15 12 9 6"></polyline></svg>`;
    toggleButton.addEventListener("click", () => this.togglePreview());
    this.previewResizer = previewWrapper.createDiv("preview-resizer");
    this.setupResizer();
    document.addEventListener("wheel", (e) => {
      if (e.ctrlKey) {
        e.preventDefault();
        this.adjustCardSize(e.deltaY);
      }
    }, { passive: false });
    await this.loadNotes();
  }
  async loadTags() {
    const tags = this.getAllTags();
    const allTagBtn = this.tagContainer.createEl("button", {
      text: "All",
      cls: "tag-btn active"
    });
    allTagBtn.addEventListener("click", () => {
      this.clearTagSelection();
      allTagBtn.addClass("active");
      this.refreshView();
    });
    tags.forEach((tag) => {
      const tagBtn = this.tagContainer.createEl("button", {
        text: tag,
        cls: "tag-btn"
      });
      tagBtn.addEventListener("click", (e) => {
        e.stopPropagation();
        this.toggleTag(tag, tagBtn);
      });
    });
  }
  getAllTags() {
    const tags = new Set();
    this.app.vault.getMarkdownFiles().forEach((file) => {
      const cache = this.app.metadataCache.getFileCache(file);
      if (cache == null ? void 0 : cache.tags) {
        cache.tags.forEach((tag) => tags.add(tag.tag));
      }
    });
    return Array.from(tags);
  }
  createViewSwitcher(container) {
    const views = [
      { id: "card", icon: "grid", text: "\u5361\u7247\u89C6\u56FE" },
      { id: "list", icon: "list", text: "\u5217\u8868\u89C6\u56FE" },
      { id: "timeline", icon: "clock", text: "\u65F6\u95F4\u8F74\u89C6\u56FE" }
    ];
    views.forEach((view) => {
      const btn = container.createEl("button", {
        cls: `view-switch-btn ${view.id === this.currentView ? "active" : ""}`
      });
      const iconHtml = {
        "grid": '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="7" height="7"></rect><rect x="14" y="3" width="7" height="7"></rect><rect x="14" y="14" width="7" height="7"></rect><rect x="3" y="14" width="7" height="7"></rect></svg>',
        "list": '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="8" y1="6" x2="21" y2="6"></line><line x1="8" y1="12" x2="21" y2="12"></line><line x1="8" y1="18" x2="21" y2="18"></line><line x1="3" y1="6" x2="3.01" y2="6"></line><line x1="3" y1="12" x2="3.01" y2="12"></line><line x1="3" y1="18" x2="3.01" y2="18"></line></svg>',
        "clock": '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><polyline points="12 6 12 12 16 14"></polyline></svg>'
      };
      const iconSpan = btn.createSpan({ cls: "view-switch-icon" });
      iconSpan.innerHTML = iconHtml[view.icon];
      btn.createSpan({ text: view.text, cls: "view-switch-text" });
      btn.addEventListener("click", () => {
        container.querySelectorAll(".view-switch-btn").forEach((b) => b.removeClass("active"));
        btn.addClass("active");
        this.switchView(view.id);
      });
    });
  }
  async loadNotes() {
    const files = this.app.vault.getMarkdownFiles();
    this.container.empty();
    const cards = await Promise.all(files.map((file) => this.createNoteCard(file)));
    cards.forEach((card) => {
      if (card instanceof HTMLElement) {
        card.style.width = `${this.cardSize}px`;
        this.container.appendChild(card);
      }
    });
    this.container.style.gridTemplateColumns = `repeat(auto-fill, ${this.cardSize}px)`;
  }
  async createNoteCard(file) {
    const card = document.createElement("div");
    card.addClass("note-card");
    card.setAttribute("data-path", file.path);
    const header = card.createDiv("note-card-header");
    const lastModified = header.createDiv("note-date");
    lastModified.setText(new Date(file.stat.mtime).toLocaleDateString());
    const folderPath = header.createDiv("note-folder");
    const folder = file.parent ? file.parent.path === "/" ? "\u6839\u76EE\u5F55" : file.parent.path : "\u6839\u76EE\u5F55";
    folderPath.setText(folder);
    folderPath.setAttribute("title", `\u6253\u5F00\u6587\u4EF6\u5939: ${folder}`);
    folderPath.addEventListener("click", async (e) => {
      e.stopPropagation();
      const fileExplorer = this.app.workspace.getLeavesOfType("file-explorer")[0];
      if (fileExplorer) {
        const fileExplorerView = fileExplorer.view;
        if (fileExplorerView.expandFolder) {
          await this.revealFolderInExplorer(folder);
          fileExplorer.setEphemeralState({ focus: true });
        }
      }
    });
    const openButton = header.createDiv("note-open-button");
    openButton.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path><polyline points="15 3 21 3 21 9"></polyline><line x1="10" y1="14" x2="21" y2="3"></line></svg>`;
    openButton.setAttribute("title", "\u5728\u65B0\u6807\u7B7E\u9875\u4E2D\u6253\u5F00");
    openButton.style.opacity = "0";
    const cardContent = card.createDiv("note-card-content");
    const title = cardContent.createDiv("note-title");
    let displayTitle = file.basename;
    const timePattern = /^\d{4}[-./]\d{2}[-./]\d{2}/;
    if (timePattern.test(displayTitle)) {
      displayTitle = displayTitle.replace(timePattern, "").trim();
    }
    title.setText(displayTitle);
    try {
      const content = await this.app.vault.read(file);
      const noteContent = cardContent.createDiv("note-content");
      await import_obsidian.MarkdownRenderer.renderMarkdown(content, noteContent, file.path, this);
      card.addEventListener("mouseenter", async () => {
        openButton.style.opacity = "1";
        title.style.opacity = "0";
        noteContent.style.display = "block";
        try {
          this.previewContainer.empty();
          await import_obsidian.MarkdownRenderer.renderMarkdown(content, this.previewContainer, file.path, this);
        } catch (error) {
          console.error("\u9884\u89C8\u52A0\u8F7D\u5931\u8D25:", error);
        }
      });
      card.addEventListener("mouseleave", () => {
        openButton.style.opacity = "0";
        title.style.opacity = "1";
        noteContent.style.display = "none";
      });
      openButton.addEventListener("click", async (e) => {
        e.stopPropagation();
        const leaf = this.app.workspace.getLeaf("tab");
        await leaf.openFile(file);
      });
      card.addEventListener("click", (e) => {
        this.handleCardSelection(file.path, e);
      });
      card.addEventListener("dblclick", async () => {
        const leaf = this.app.workspace.getLeaf("tab");
        await leaf.openFile(file);
      });
      card.addEventListener("contextmenu", (e) => {
        e.preventDefault();
        this.showContextMenu(e, this.getSelectedFiles());
      });
    } catch (error) {
      console.error("\u7B14\u8BB0\u52A0\u8F7D\u5931\u8D25:", error);
    }
    card.addEventListener("mouseenter", async () => {
      openButton.style.opacity = "1";
    });
    card.addEventListener("mouseleave", () => {
      openButton.style.opacity = "0";
    });
    return card;
  }
  switchView(view) {
    this.currentView = view;
    this.container.setAttribute("data-view", view);
    this.container.empty();
    if (view === "timeline") {
      this.createTimelineView();
    } else {
      this.loadNotes();
    }
  }
  async filterByTag(tag) {
    const files = this.app.vault.getMarkdownFiles();
    this.container.empty();
    const filteredFiles = files.filter((file) => {
      var _a;
      const cache = this.app.metadataCache.getFileCache(file);
      return (_a = cache == null ? void 0 : cache.tags) == null ? void 0 : _a.some((t) => t.tag === tag);
    });
    const cards = await Promise.all(filteredFiles.map((file) => this.createNoteCard(file)));
    cards.forEach((card) => {
      this.container.appendChild(card);
    });
    this.tagContainer.querySelectorAll("button").forEach((btn) => {
      if (btn.textContent === tag) {
        btn.addClass("active-tag");
      } else {
        btn.removeClass("active-tag");
      }
    });
  }
  togglePreview() {
    this.isPreviewCollapsed = !this.isPreviewCollapsed;
    if (this.isPreviewCollapsed) {
      this.previewContainer.addClass("collapsed");
    } else {
      this.previewContainer.removeClass("collapsed");
    }
  }
  setupResizer() {
    let startX;
    let startWidth;
    const startResize = (e) => {
      e.preventDefault();
      startX = e.pageX;
      startWidth = parseInt(getComputedStyle(this.previewContainer).width, 10);
      document.addEventListener("mousemove", resize);
      document.addEventListener("mouseup", stopResize);
      document.body.style.cursor = "col-resize";
      this.previewResizer.addClass("resizing");
    };
    const resize = (e) => {
      const width = startWidth - (e.pageX - startX);
      if (width >= 50 && width <= 800) {
        this.previewContainer.style.width = `${width}px`;
        if (this.isPreviewCollapsed) {
          this.isPreviewCollapsed = false;
          this.previewContainer.removeClass("collapsed");
        }
      }
    };
    const stopResize = () => {
      document.removeEventListener("mousemove", resize);
      document.removeEventListener("mouseup", stopResize);
      document.body.style.cursor = "";
      this.previewResizer.removeClass("resizing");
    };
    this.previewResizer.addEventListener("mousedown", startResize);
  }
  highlightFolder(folder) {
    this.currentFolder = this.currentFolder === folder ? null : folder;
    this.container.querySelectorAll(".note-card").forEach((card) => {
      const folderElement = card.querySelector(".note-folder");
      const cardFolder = folderElement ? folderElement.textContent : null;
      if (cardFolder) {
        card.toggleClass("folder-highlight", cardFolder === folder);
      }
    });
  }
  async revealFolderInExplorer(folder) {
    const fileExplorer = this.app.workspace.getLeavesOfType("file-explorer")[0];
    if (fileExplorer) {
      const fileExplorerView = fileExplorer.view;
      if (folder === "\u6839\u76EE\u5F55") {
        if (fileExplorerView.expandFolder) {
          await fileExplorerView.expandFolder("/");
        }
        return;
      }
      if (fileExplorerView.expandFolder) {
        const folderParts = folder.split("/");
        let currentPath = "";
        for (const part of folderParts) {
          currentPath += (currentPath ? "/" : "") + part;
          await fileExplorerView.expandFolder(currentPath);
        }
        if (fileExplorerView.setSelection) {
          await fileExplorerView.setSelection(folder);
        }
      }
    }
  }
  async createNewNote() {
    const date = new Date();
    const fileName = `\u672A\u547D\u540D\u7B14\u8BB0 ${date.toLocaleString().replace(/[/:]/g, "-")}`;
    try {
      const file = await this.app.vault.create(`${fileName}.md`, "# " + fileName + "\n\n");
      const leaf = this.app.workspace.getLeaf("tab");
      await leaf.openFile(file);
      this.loadNotes();
    } catch (error) {
      console.error("\u521B\u5EFA\u7B14\u8BB0\u5931\u8D25:", error);
    }
  }
  async createTimelineView() {
    const timelineContainer = this.container.createDiv("timeline-container");
    const files = this.app.vault.getMarkdownFiles();
    const notesByDate = new Map();
    files.forEach((file) => {
      const date = new Date(file.stat.mtime).toLocaleDateString();
      if (!notesByDate.has(date)) {
        notesByDate.set(date, []);
      }
      const notes = notesByDate.get(date);
      if (notes) {
        notes.push(file);
      }
    });
    const sortedDates = Array.from(notesByDate.keys()).sort((a, b) => new Date(b).getTime() - new Date(a).getTime());
    for (const date of sortedDates) {
      const dateGroup = timelineContainer.createDiv("timeline-date-group");
      const dateNode = dateGroup.createDiv("timeline-date-node");
      dateNode.createDiv("timeline-node-circle");
      dateNode.createDiv("timeline-date-label").setText(date);
      const notesList = dateGroup.createDiv("timeline-notes-list");
      const notes = notesByDate.get(date);
      if (notes) {
        for (const file of notes) {
          const noteItem = notesList.createDiv("timeline-note-item");
          noteItem.createDiv("timeline-note-marker");
          const noteContent = noteItem.createDiv("timeline-note-content");
          noteContent.createDiv("timeline-note-title").setText(file.basename);
          noteItem.addEventListener("click", async () => {
            const leaf = this.app.workspace.getLeaf("tab");
            await leaf.openFile(file);
          });
          noteItem.addEventListener("mouseenter", async () => {
            try {
              this.previewContainer.empty();
              const content = await this.app.vault.read(file);
              await import_obsidian.MarkdownRenderer.renderMarkdown(content, this.previewContainer, file.path, this);
            } catch (error) {
              console.error("\u9884\u89C8\u52A0\u8F7D\u5931\u8D25:", error);
            }
          });
        }
      }
    }
  }
  addContextMenu(card, file) {
    card.addEventListener("contextmenu", (event) => {
      event.preventDefault();
      event.stopPropagation();
      const path = card.getAttribute("data-path");
      if (path && !this.selectedNotes.has(path) && !event.ctrlKey) {
        this.clearSelection();
        this.selectedNotes.add(path);
        card.addClass("selected");
      }
      const selectedFiles = this.getSelectedFiles();
      this.showContextMenu(event, selectedFiles);
    });
  }
  async refreshView() {
    const files = this.app.vault.getMarkdownFiles();
    this.container.empty();
    const filteredFiles = files.filter((file) => {
      var _a, _b;
      const matchesSearch = !this.currentSearchTerm || file.basename.toLowerCase().includes(this.currentSearchTerm.toLowerCase());
      let matchesTags = true;
      if (this.selectedTags.size > 0) {
        const cache = this.app.metadataCache.getFileCache(file);
        matchesTags = (_b = (_a = cache == null ? void 0 : cache.tags) == null ? void 0 : _a.some((t) => this.selectedTags.has(t.tag))) != null ? _b : false;
      }
      return matchesSearch && matchesTags;
    });
    const cards = await Promise.all(filteredFiles.map((file) => this.createNoteCard(file)));
    cards.forEach((card) => {
      if (card instanceof HTMLElement) {
        card.style.width = `${this.cardSize}px`;
        this.container.appendChild(card);
      }
    });
    this.container.style.gridTemplateColumns = `repeat(auto-fill, ${this.cardSize}px)`;
  }
  toggleTag(tag, tagBtn) {
    if (this.selectedTags.has(tag)) {
      this.selectedTags.delete(tag);
      tagBtn.removeClass("active");
    } else {
      this.selectedTags.add(tag);
      tagBtn.addClass("active");
    }
    const allBtn = this.tagContainer.querySelector("button");
    if (allBtn) {
      allBtn.removeClass("active");
    }
    this.refreshView();
  }
  clearTagSelection() {
    this.selectedTags.clear();
    this.tagContainer.querySelectorAll(".tag-btn").forEach((btn) => {
      btn.removeClass("active");
    });
  }
  handleCardSelection(path, event) {
    const card = this.container.querySelector(`[data-path="${path}"]`);
    if (!card)
      return;
    if (event.ctrlKey) {
      if (this.selectedNotes.has(path)) {
        this.selectedNotes.delete(path);
        card.removeClass("selected");
      } else {
        this.selectedNotes.add(path);
        card.addClass("selected");
      }
    } else if (event.shiftKey && this.lastSelectedNote) {
      const cards = Array.from(this.container.querySelectorAll(".note-card"));
      const lastIndex = cards.findIndex((c) => c.getAttribute("data-path") === this.lastSelectedNote);
      const currentIndex = cards.findIndex((c) => c.getAttribute("data-path") === path);
      const start = Math.min(lastIndex, currentIndex);
      const end = Math.max(lastIndex, currentIndex);
      cards.forEach((c, i) => {
        const cardPath = c.getAttribute("data-path");
        if (i >= start && i <= end && cardPath) {
          this.selectedNotes.add(cardPath);
          c.addClass("selected");
        }
      });
    } else {
      this.clearSelection();
      this.selectedNotes.add(path);
      card.addClass("selected");
    }
    this.lastSelectedNote = path;
  }
  clearSelection() {
    this.selectedNotes.clear();
    this.container.querySelectorAll(".note-card.selected").forEach((card) => {
      card.removeClass("selected");
    });
  }
  getSelectedFiles() {
    return Array.from(this.selectedNotes).map((path) => this.app.vault.getAbstractFileByPath(path)).filter((file) => file instanceof import_obsidian.TFile);
  }
  showContextMenu(event, files) {
    const menu = new import_obsidian.Menu();
    if (files.length > 0) {
      menu.addItem((item) => {
        item.setTitle(`\u5728\u65B0\u6807\u7B7E\u9875\u6253\u5F00`).setIcon("link").onClick(async () => {
          for (const file of files) {
            const leaf = this.app.workspace.getLeaf("tab");
            await leaf.openFile(file);
          }
        });
      });
      menu.addItem((item) => {
        item.setTitle(`\u5728\u6587\u4EF6\u7BA1\u7406\u5668\u4E2D\u663E\u793A`).setIcon("folder").onClick(() => {
          var _a;
          const file = files[0];
          this.revealFolderInExplorer(((_a = file.parent) == null ? void 0 : _a.path) || "/");
        });
      });
      menu.addItem((item) => {
        item.setTitle(`\u79FB\u52A8 ${files.length} \u4E2A\u6587\u4EF6`).setIcon("move").onClick(() => {
          const modal = new EnhancedFileSelectionModal(this.app, files, this.recentFolders, (folders) => {
            this.recentFolders = folders;
          });
          modal.open();
        });
      });
      menu.addItem((item) => {
        item.setTitle(`\u5220\u9664 ${files.length} \u4E2A\u6587\u4EF6`).setIcon("trash").onClick(async () => {
          const confirm = await new ConfirmModal(this.app, "\u786E\u8BA4\u5220\u9664", `\u662F\u5426\u786E\u5B9A\u8981\u5220\u9664\u9009\u4E2D\u7684 ${files.length} \u4E2A\u6587\u4EF6\uFF1F`).show();
          if (confirm) {
            for (const file of files) {
              await this.app.vault.trash(file, true);
            }
            this.refreshView();
          }
        });
      });
    }
    menu.showAtMouseEvent(event);
  }
  adjustCardSize(delta) {
    const adjustment = delta > 0 ? -10 : 10;
    const newSize = Math.max(this.plugin.settings.minCardWidth, Math.min(this.plugin.settings.maxCardWidth, this.cardSize + adjustment));
    if (newSize !== this.cardSize) {
      this.cardSize = newSize;
      this.updateCardSize(newSize);
      this.plugin.saveCardWidth(newSize);
    }
  }
  updateCardSize(width) {
    this.cardSize = width;
    this.container.querySelectorAll(".note-card").forEach((card) => {
      if (card instanceof HTMLElement) {
        card.style.width = `${width}px`;
      }
    });
    this.container.style.gridTemplateColumns = `repeat(auto-fill, ${width}px)`;
  }
};
var ConfirmModal = class extends import_obsidian.Modal {
  constructor(app, title, message) {
    super(app);
    this.result = false;
    this.title = title;
    this.message = message;
  }
  async show() {
    return new Promise((resolve) => {
      this.resolvePromise = resolve;
      this.open();
    });
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h3", { text: this.title });
    contentEl.createEl("p", { text: this.message });
    const buttonContainer = contentEl.createDiv("button-container");
    const confirmButton = buttonContainer.createEl("button", { text: "\u786E\u8BA4" });
    confirmButton.addEventListener("click", () => {
      this.result = true;
      this.close();
    });
    const cancelButton = buttonContainer.createEl("button", { text: "\u53D6\u6D88" });
    cancelButton.addEventListener("click", () => {
      this.result = false;
      this.close();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    this.resolvePromise(this.result);
  }
};
var EnhancedFileSelectionModal = class extends import_obsidian.Modal {
  constructor(app, files, recentFolders, onFoldersUpdate) {
    super(app);
    this.selectedFolder = null;
    this.files = files;
    this.recentFolders = recentFolders;
    this.onFoldersUpdate = onFoldersUpdate;
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h3", {
      text: `\u79FB\u52A8 ${this.files.length} \u4E2A\u6587\u4EF6`
    });
    if (this.recentFolders.length > 0) {
      const recentSection = contentEl.createDiv("recent-folders-section");
      recentSection.createEl("h4", { text: "\u6700\u8FD1\u4F7F\u7528" });
      const recentList = recentSection.createDiv("recent-folders-list");
      this.recentFolders.forEach((folder) => {
        const item = recentList.createDiv("folder-item recent");
        item.setText(folder);
        item.addEventListener("click", () => this.selectFolder(item, folder));
      });
    }
    const folderList = contentEl.createDiv("folder-list");
    const folders = this.getFoldersWithHierarchy();
    this.createFolderTree(folderList, folders);
    const buttonContainer = contentEl.createDiv("modal-button-container");
    const confirmButton = buttonContainer.createEl("button", {
      text: "\u786E\u8BA4\u79FB\u52A8",
      cls: "mod-cta"
    });
    confirmButton.addEventListener("click", () => {
      if (this.selectedFolder) {
        this.moveFiles(this.selectedFolder);
      }
    });
    const cancelButton = buttonContainer.createEl("button", {
      text: "\u53D6\u6D88"
    });
    cancelButton.addEventListener("click", () => this.close());
  }
  getFoldersWithHierarchy() {
    const folders = [];
    const seen = new Set();
    this.app.vault.getAllLoadedFiles().forEach((file) => {
      if (file instanceof import_obsidian.TFolder) {
        const parts = file.path.split("/");
        let currentPath = "";
        let level = 0;
        parts.forEach((part) => {
          if (part) {
            currentPath += (currentPath ? "/" : "") + part;
            if (!seen.has(currentPath)) {
              seen.add(currentPath);
              folders.push({
                path: currentPath,
                name: part,
                level
              });
            }
            level++;
          }
        });
      }
    });
    return folders.sort((a, b) => a.path.localeCompare(b.path));
  }
  createFolderTree(container, folders) {
    folders.forEach((folder) => {
      const item = container.createDiv({
        cls: "folder-item"
      });
      item.style.paddingLeft = `${folder.level * 20 + 10}px`;
      const icon = item.createSpan({
        cls: "folder-icon"
      });
      icon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path></svg>`;
      const name = item.createSpan({
        cls: "folder-name",
        text: folder.name
      });
      item.addEventListener("click", () => this.selectFolder(item, folder.path));
    });
  }
  selectFolder(element, path) {
    this.contentEl.querySelectorAll(".folder-item").forEach((item) => {
      item.removeClass("selected");
    });
    element.addClass("selected");
    this.selectedFolder = path;
  }
  async moveFiles(targetFolder) {
    const confirmModal = new ConfirmModal(this.app, "\u786E\u8BA4\u79FB\u52A8", `\u662F\u5426\u5C06\u9009\u4E2D\u7684 ${this.files.length} \u4E2A\u6587\u4EF6\u79FB\u52A8\u5230 "${targetFolder}"\uFF1F`);
    if (await confirmModal.show()) {
      for (const file of this.files) {
        const newPath = `${targetFolder}/${file.name}`;
        await this.app.fileManager.renameFile(file, newPath);
      }
      this.recentFolders = [targetFolder, ...this.recentFolders.filter((f) => f !== targetFolder)].slice(0, 5);
      this.onFoldersUpdate(this.recentFolders);
      this.close();
    }
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  defaultView: "card",
  cardWidth: 280,
  minCardWidth: 280,
  maxCardWidth: 600
};
var CardViewSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian2.Setting(containerEl).setName("\u9ED8\u8BA4\u89C6\u56FE").setDesc("\u9009\u62E9\u9ED8\u8BA4\u7684\u89C6\u56FE\u6A21\u5F0F").addDropdown((dropdown) => {
      dropdown.addOption("card", "\u5361\u7247\u89C6\u56FE").addOption("list", "\u5217\u8868\u89C6\u56FE").addOption("timeline", "\u65F6\u95F4\u8F74\u89C6\u56FE").setValue(this.plugin.settings.defaultView);
      dropdown.onChange(async (value) => {
        if (value === "card" || value === "list" || value === "timeline") {
          this.plugin.settings.defaultView = value;
          await this.plugin.saveSettings();
        }
      });
    });
    new import_obsidian2.Setting(containerEl).setName("\u5361\u7247\u5BBD\u5EA6").setDesc("\u8BBE\u7F6E\u5361\u7247\u7684\u5BBD\u5EA6\uFF08280-600\u50CF\u7D20\uFF09").addText((text) => text.setPlaceholder("280").setValue(this.plugin.settings.cardWidth.toString()).onChange(async (value) => {
      const width = Number(value);
      if (!isNaN(width) && width >= 280 && width <= 600) {
        this.plugin.settings.cardWidth = width;
        await this.plugin.saveSettings();
        this.plugin.updateAllCardViews();
      }
    }));
    new import_obsidian2.Setting(containerEl).setName("\u6700\u5C0F\u5BBD\u5EA6").setDesc("\u8BBE\u7F6E\u5361\u7247\u7684\u6700\u5C0F\u5BBD\u5EA6\uFF08\u50CF\u7D20\uFF09").addText((text) => text.setPlaceholder("280").setValue(this.plugin.settings.minCardWidth.toString()).onChange(async (value) => {
      const width = Number(value);
      if (!isNaN(width) && width >= 200) {
        this.plugin.settings.minCardWidth = width;
        await this.plugin.saveSettings();
      }
    }));
    new import_obsidian2.Setting(containerEl).setName("\u6700\u5927\u5BBD\u5EA6").setDesc("\u8BBE\u7F6E\u5361\u7247\u7684\u6700\u5927\u5BBD\u5EA6\uFF08\u50CF\u7D20\uFF09").addText((text) => text.setPlaceholder("600").setValue(this.plugin.settings.maxCardWidth.toString()).onChange(async (value) => {
      const width = Number(value);
      if (!isNaN(width) && width <= 800) {
        this.plugin.settings.maxCardWidth = width;
        await this.plugin.saveSettings();
      }
    }));
  }
};
var CardViewPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView(VIEW_TYPE_CARD, (leaf) => new CardView(leaf, this));
    this.addRibbonIcon("layout-grid", "\u5361\u7247\u89C6\u56FE", () => {
      this.activateView();
    });
    this.addSettingTab(new CardViewSettingTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf = workspace.getLeavesOfType(VIEW_TYPE_CARD)[0];
    if (!leaf) {
      leaf = workspace.getLeaf("tab");
      await leaf.setViewState({
        type: VIEW_TYPE_CARD,
        active: true
      });
    }
    workspace.revealLeaf(leaf);
  }
  updateAllCardViews() {
    this.app.workspace.getLeavesOfType(VIEW_TYPE_CARD).forEach((leaf) => {
      const view = leaf.view;
      if (view) {
        view.updateCardSize(this.settings.cardWidth);
      }
    });
  }
  async saveCardWidth(width) {
    this.settings.cardWidth = width;
    await this.saveSettings();
  }
};
//# sourceMappingURL=data:application/json;base64,
